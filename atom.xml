<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[格物志]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://masukio.tk/"/>
  <updated>2015-07-12T13:44:53.000Z</updated>
  <id>http://masukio.tk/</id>
  
  <author>
    <name><![CDATA[masukio]]></name>
    <email><![CDATA[fjkfwz@hotmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Algorithms#001：Reservoir Sampling]]></title>
    <link href="http://masukio.tk/2015/07/12/Reservoir-Sampling/"/>
    <id>http://masukio.tk/2015/07/12/Reservoir-Sampling/</id>
    <published>2015-07-12T02:57:18.000Z</published>
    <updated>2015-07-12T13:44:53.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：Reservoir Sampling是一系列的随机算法，其目的在于从包含n个项目的集合S中选取k个样本，其中n为一很大或未知的数量，尤其适用于不能把所有n个项目都存放到主内存的情况，Reservoir Sampling使用固定长度的链表，从而保证内存大小的可控化。<br><a id="more"></a></p>
<p>试想一下如何从一个大海中装起一杯水，而整个大海中的所有水分子都有相同的概率被装进这个杯子里，当然你可以把整个大海搅浑后从中舀出一杯，然而问题是我们并没有这么大型的搅拌机，那么我们还能够怎么做？</p>
<p>一个行之有效的办法就是让海水中的每一个水分子一粒一粒都装入装入水杯中，同时由于杯子的容量是有限的，每进入一个水分子就会溢出一个水分子，溢出的水分子将被浪费掉，假设杯中的每一滴水都有相同的概率被挤出杯外，那么当海洋中的每一滴水都进入杯子后，我们就能够获得一杯集成大海精华的海水，而这时需要的只是一个杯子大小的搅拌机</p>
<hr>
<h1 id="Google面试题">Google面试题</h1><p>Google曾经有一道面试题，十分有趣：</p>
<blockquote>
<p>I have a linked list of numbers of length N. N is very large and I don’t know in advance the exact value of N.<br>How can I most efficiently write a function that will return k completely random numbers from the list</p>
</blockquote>
<p>题目非常简单：有N个元素的链表，事先不知道有多长，写一个函数可以高效地从其中取出k个随机数。</p>
<hr>
<h1 id="Introduction">Introduction</h1><p>在知道文件行数的情况下，我们可以很容易的用C运行库的rand函数随机的获得一个行数，从而随机的取出一行，但是，当前的情况是不知道行数，这样如何求呢？我们需要一个概念来帮助我们做出猜想，来使得对每一行取出的概率相等，也即随机，水塘抽样就是这么一个概念,Wikipedia上对水潭抽样是这么介绍的：</p>
<blockquote>
<p>水塘抽样是一系列的随机算法，其目的在于从包含n个项目的集合S中选取k个样本，其中n为一很大或未知的数量，尤其适用于不能把所有n个项目都存放到主内存的情况。</p>
</blockquote>
<p><img src="http://7nar5o.com1.z0.glb.clouddn.com/Reservoir%20Sampling.png" alt=""></p>
<p>最常见例子为Jeffrey Vitter在其论文Random Sampling with a Reservoir中所提及的算法R。</p>
<p>参照Dictionary of Algorithms and Data Structures所载的O(n)算法，包含以下步骤（假设阵列S以0开始标示）：</p>
<pre><code>1.从<span class="tag">S</span>中抽取首<span class="tag">k</span>项放入「水塘」中
2.對於每一個<span class="tag">S</span><span class="attr_selector">[j]</span>項（<span class="tag">j</span> ≥ <span class="tag">k</span>）：
3.隨機產生一個範圍從0到<span class="tag">j</span>的整數<span class="tag">r</span>
4.若 <span class="tag">r</span> &lt; <span class="tag">k</span> 則把水塘中的第<span class="tag">r</span>項換成<span class="tag">S</span><span class="attr_selector">[j]</span>項
</code></pre><p>即在0-j项中生成随机数r，被挑中的r就被丢弃掉，同时后边的队列补充一个j进来,因为我们array R[k]类似一个reservoir水库（蓄水池）,所以该算法取名为水塘抽样</p>
<blockquote>
<p>The algorithm creates a “reservoir” array of size k and populates it with the first k items of S. It then iterates through the remaining elements of S until Sis exhausted. At the $i^{th}$ element of S, the algorithm generates a random number j between 1 and i. If j is less than k, the $j^{th}$ element of the reservoir array is replaced with the ith element of S. In effect, for all i, the $i^{th}$ element of S is chosen to be included in the reservoir with probability $k/i$. Similarly, at each iteration the $j^{th}$ element of the reservoir array is chosen to be replaced with probability ${j/k}*{k/i}$, which simplifies to ${j/i}$. It can be shown that when the algorithm has finished executing, each item in S has equal probability (i.e. k/length(S)) of being chosen for the reservoir.</p>
</blockquote>
<h1 id="Java代码实现">Java代码实现</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> SAMPLE_COUNT = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Object[] samples = <span class="keyword">new</span> Object[SAMPLE_COUNT];</span><br><span class="line">Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span> (Object element in stream) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">index</span> &lt; SAMPLE_COUNT) &#123;</span><br><span class="line">        samples[<span class="keyword">index</span>] = element;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> r = rnd.nextInt(<span class="number">0</span>, <span class="keyword">index</span>);</span><br><span class="line">        <span class="keyword">if</span> (r &lt; SAMPLE_COUNT) &#123;</span><br><span class="line">            samples[r] = element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">index</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="算法证明">算法证明</h1><p>每个数在水潭中留下的概率</p>
<p>$$ {1 \over j} \times {j \over {j+1}} \times \dfrac{j+1}{j+2} \times \dfrac{j+2}{j+3} \times {···} \times \dfrac{n-1}{n} = {1 \over k} $$</p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：Reservoir Sampling是一系列的随机算法，其目的在于从包含n个项目的集合S中选取k个样本，其中n为一很大或未知的数量，尤其适用于不能把所有n个项目都存放到主内存的情况，Reservoir Sampling使用固定长度的链表，从而保证内存大小的可控化。<br>]]>
    
    </summary>
    
      <category term="抽样" scheme="http://masukio.tk/tags/%E6%8A%BD%E6%A0%B7/"/>
    
      <category term="算法" scheme="http://masukio.tk/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Algorithms" scheme="http://masukio.tk/categories/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Cicada#002：K-9 Mail源码分析]]></title>
    <link href="http://masukio.tk/2015/07/11/Cicada-002/"/>
    <id>http://masukio.tk/2015/07/11/Cicada-002/</id>
    <published>2015-07-11T08:16:21.000Z</published>
    <updated>2015-12-16T02:11:39.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：K-9 Mail是Android平台上使用Java语言开发的专业的开源邮件客户端，系统设计、代码实现、注释良好，支持MS Exchange Server，邮件会话和推送，有着健壮的开发者社区，本文分析其技术架构以及主要的代码实现以便打包成库供后期开发使用。<br><a id="more"></a></p>
<h1 id="实现层级">实现层级</h1><p>K-9 Mail将的主要的用于邮件会话的实体类打包成类库，其主要的实体类包括<code>com.fsck.k9.mail</code>提供用于通讯过程需要的类和用于对邮件提供面向编程思想进行邮件内容封装的实体类<code>com.fsck.k9.mail.internet</code></p>
<p>上层包括用于实现用户数据持久化和用于充当用户UI信息控制的Activity的相关操作，其包名为<code>com.fsck.k9</code>类其中两个重要的类包括<code>Account</code>、<code>K9</code>，二者通过<code>SharedPreference</code>类来持久化数据</p>
<p>K9类继承自’android.app.Application’,其主要的作用用于设置、获取客户端应用全局的配置性数据，包括获取邮件的频率、全局的主题设置、消息的推送、预览邮件内容的设置，其方法提供给其他任何的类使用</p>
<p>Account类对应的是MVC模型中的<code>Model</code>类，它接收来自包括<code>Activity，Service，Broadcast 和 Receiver</code>等等机制传递过来的用户请求，其除了封装相应的用户信息，还被设计用于保存账户的各种设置，包括用于账户身份认证的Identity，字体设计FontSizes，通知设置NotificationSetting和邮件收发地址、草稿箱、在各种网络状态下是否启用数据的压缩，是否进行邮件加密等</p>
<h1 id="Library类">Library类</h1><h2 id="com-fsck-k9-mail">com.fsck.k9.mail</h2><p><code>com.fsck.k9.mail</code>中的核心类包括<code>Address</code>、<code>Folder</code>、<code>Message</code>、<code>Store</code></p>
<p><img src="http://7nar5o.com1.z0.glb.clouddn.com/class.png" alt="K9mail中主要的类"></p>
<h3 id="Address">Address</h3><p>Address类实现了E-Mail的地址的封装，其将获取收件人发件人，邮件目标地址的信息并将其拼接成固定数据格式的String流</p>
<h3 id="Store类">Store类</h3><p><code>Store</code>类为抽象类，相当于远程或本地的Store代理其包括4个子类<code>imap</code>、<code>pop3</code>、<code>webdav</code>分别用于访问IMAP,POP3，WebDav服务器和本地SQLite数据可，Store类根据用户Account设置的属性值<code>mStoreUri</code>来创建对应的Store子类方法</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Store store = sStores.<span class="keyword">get</span>(uri);</span><br><span class="line">       <span class="keyword">if</span> (store == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (uri.startsWith(<span class="string">"imap"</span>)) &#123;</span><br><span class="line">               store = <span class="keyword">new</span> ImapStore(storeConfig,</span><br><span class="line">                       <span class="keyword">new</span> DefaultTrustedSocketFactory(context),</span><br><span class="line">                       (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE));</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uri.startsWith(<span class="string">"pop3"</span>)) &#123;</span><br><span class="line">               store = <span class="keyword">new</span> Pop3Store(storeConfig,</span><br><span class="line">                       <span class="keyword">new</span> DefaultTrustedSocketFactory(context));</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uri.startsWith(<span class="string">"webdav"</span>)) &#123;</span><br><span class="line">               store = <span class="keyword">new</span> WebDavStore(storeConfig);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (store != <span class="literal">null</span>) &#123;</span><br><span class="line">               sStores.put(uri, store);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (store == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> MessagingException(<span class="string">"Unable to locate an applicable Store for "</span> + uri);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> store;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>对外通过提供接口MessagingController类来调用库中Store类来实现对底层的同一封装，在创建EMail账户，与WebDav通信也会调用其Store类，然后调用Store类并通过RemoteStore对邮件进行路由从而对不同的通信协议进行处理</p>
<h3 id="Message">Message</h3><p>Message实现了对邮件内容的封装，有一个子类MimeMessage继承自Message，其安照<code>metadata in RFC 822 and RFC 2045 style headers.</code>规定的数据结构来拼装数据，即以OO的方式通过Adress类封装邮件地址，Body类来完成对邮件主体数据的封装从而封装整个邮件数据，K9 Mail在其4个Store类中以内部类的形式提供了MImeMessage的子类，包括`ImapMessage，LocalMessage，Pop3Message和WebDavMessage）来操作每一种类型Store中的邮件</p>
<h4 id="MIME邮件的构成">MIME邮件的构成</h4><blockquote>
<p>MIME的全称是”Multipurpose Internet Mail Extensions”，中译为”多用途互联网邮件扩展”，指的是一系列的电子邮件技术规范，主要包括RFC 2045、RFC 2046、RFC 2047、RFC 4288、RFC 4289和RFC 2077。</p>
</blockquote>
<p>顾名思义，MIME是对传统电子邮件的一个扩展，现在已经成为电子邮件实际上的标准。</p>
<p>传统的电子邮件是1982年定下技术规范的，文件是RFC 822。</p>
<p>它的一个重要特点，就是规定电子邮件只能使用ASCII字符。这导致了三个结果：1）非英语字符都不能在电子邮件中使用；2）电子邮件中不能插入二进制文件（如图片）；3）电子邮件不能有附件。</p>
<p>这实际上无法接受的，因此到了1992年，工程师们决定扩展电子邮件的技术规范，提出一系列补充规范，这就是MIME的由来。</p>
<p>下面是一封传统的电子邮件。</p>
<pre><code><span class="string">From:</span> <span class="string">"Tommy Lee"</span> &lt;lee<span class="annotation">@example</span>.com&gt;
<span class="string">To:</span> <span class="string">"Jack Zhang"</span> &lt;zhang<span class="annotation">@example</span>.com&gt;
<span class="string">Subject:</span> Test
<span class="string">Date:</span> Wed, <span class="number">17</span> May <span class="number">2000</span> <span class="number">19</span>:<span class="number">08</span>:<span class="number">29</span> -<span class="number">0400</span>
Message-<span class="string">ID:</span> &lt;NDBBIAKOPKHFGPLCODIGIEKBCHAA.lee<span class="annotation">@example</span>.com&gt;
Hello World.
</code></pre><p>从上面可以看出，这封信的发信人地址是<code>lee@example</code>.com，收信人地址是<code>hang@example.com</code>，邮件主题是Test，发送时间是2000年5月17日，邮件内容是<code>&quot;Hello World.&quot;</code>。</p>
<p>在结构上，这封信分为三个部分：首先是信件头，然后是一个空行，最后是信件内容。收信人的客户端软件只会显示最后一部分，要查看全信，必须使用”查看原始邮件”功能。</p>
<p>MIME对传统电子邮件的扩展，表现在它在信件头部分添加了几条语句，主要有三条。<br>第一条是：</p>
<pre><code><span class="attribute">MIME-Version</span>: <span class="string">1.0</span>
</code></pre><p>这条语句是必须的，而且1.0这个版本值是不变的，即使MIME本身已经升级了好几次。<br>有了这条语句，收信端就知道这封信使用了MIME规范。<br>第二条语句是：</p>
<pre><code>Content-Type: <span class="type">text</span>/plain; charset=<span class="string">"ISO-8859-1"</span>
</code></pre><p>这一行是极端重要的，它表明传递的信息类型和采用的编码。<br>Content-Type表明信息类型，缺省值为” text/plain”。它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用”/“分割。主要类型有9种，分别是<code>application</code>、<code>audio</code>、<code>example</code>、<code>image</code>、<code>message</code>、<code>model</code>、<code>multipart</code>、<code>text</code>、<code>video</code>。<br>每一种主要类型下面又有许多种次要类型，常见的有：</p>
<pre><code>text/plain：纯文本，文件扩展名<span class="class">.txt</span>
text/html：HTML文本，文件扩展名.htm和<span class="class">.html</span>
image/jpeg：jpeg格式的图片，文件扩展名<span class="class">.jpg</span>
image/gif：GIF格式的图片，文件扩展名<span class="class">.gif</span>
audio/x-wave：WAVE格式的音频，文件扩展名<span class="class">.wav</span>
audio/mpeg：MP3格式的音频，文件扩展名<span class="class">.mp3</span>
video/mpeg：MPEG格式的视频，文件扩展名<span class="class">.mpg</span>
application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip
</code></pre><p>详细的Content-Type列表，可以查看这里和这里。<br>如果信息的主要类型是”text”，那么还必须指明编码类型”charset”，缺省值是ASCII，其他可能值有”ISO-8859-1”、”UTF-8”、”GB2312”等等。<br>整个Content-Type这一行，不仅使用在电子邮件，后来也被移植到了HTTP协议中，所以现在只要是在网上传播的HTTP信息，都带有Content-Type头，以表明信息类型。<br>前面已经说过，电子邮件的传统格式不支持非ASCII编码和二进制数据。因此MIME规定了第三条语句：</p>
<pre><code><span class="attribute">Content-transfer-encoding</span>: <span class="string">base64</span>
</code></pre><p>这条语句指明了编码转换的方式。Content-transfer-encoding的值有5种,”7bit”、”8bit”、”binary”、”quoted-printable”和”base64”,其中”7bit”是缺省值，即不用转化的ASCII字符。</p>
<h5 id="MIME消息">MIME消息</h5><p>总体来说，MIME消息由消息头和消息体两大部分组成。现在我们关注的是MIME邮件，因此在以下的讨论中姑且称“消息”为“邮件”。邮件头中不允许出现空行。有一些邮件不能被邮件客户端软件识别，显示的是原始码，就是因为首行是空行。</p>
<h6 id="邮件头">邮件头</h6><p>邮件头包含了发件人、收件人、主题、时间、MIME版本、邮件内容的类型等重要信息。每条信息称为一个域，由域名后加“: ”和信息内容构成，可以是一行，较长的也可以占用多行。域的首行必须“顶头”写，即左边不能有空白字符（空格和制表符）；续行则必须以空白字符打头，且第一个空白字符不是信息本身固有的，解码时要过滤掉。</p>
<p>邮件体包含邮件的内容，它的类型由邮件头的“Content-Type”域指出。常见的简单类型有text/plain(纯文本)和text/html(超文本)。邮件体被分为多个段，每个段又包含段头和段体两部分，这两部分之间也以空行分隔。常见的multipart类型有三种：multipart/mixed, multipart/related和multipart/alternative。从它们的名称，不难推知这些类型各自的含义和用处。它们之间的层次关系可归纳为下图所示：</p>
<p>可以看出，如果在邮件中要添加附件，必须定义multipart/mixed段；如果存在内嵌资源，至少要定义multipart/related段；如果纯文本与超文本共存，至少要定义multipart/alternative段。什么是“至少”？举个例子说，如果只有纯文本与超文本正文，那么在邮件头中将类型扩大化，定义为multipart/related，甚至multipart/mixed，都是允许的。</p>
<p>multipart诸类型的共同特征是，在段头指定“boundary”参数字符串，段体内的每个子段以此串定界。所有的子段都以“—”+boundary行开始，父段则以“—”+boundary+“—”行结束。段与段之间也以空行分隔。在邮件体是multipart类型的情况下，邮件体的开始部分(第一个“—”+boundary行之前)可以有一些附加的文本行，相当于注释，解码时应忽略。段间也可以有一些附加的文本行，不会显示出来，如果有兴趣，不妨验证一下。<br>结合boundary定界和multipart层次关系图，。</p>
<p>在邮件头中，有很多从RFC 822沿用的域名，MIME也增加了一些。常见的标准域名和含义如下</p>
<table>
<thead>
<tr>
<th>域名</th>
<th style="text-align:left">含义</th>
<th style="text-align:center">添加者</th>
</tr>
</thead>
<tbody>
<tr>
<td>Received</td>
<td style="text-align:left">传输路径</td>
<td style="text-align:center">各级邮件服务器</td>
</tr>
<tr>
<td>Return-Path</td>
<td style="text-align:left">回复地址</td>
<td style="text-align:center">目标邮件服务器</td>
</tr>
<tr>
<td>Delivered-To</td>
<td style="text-align:left">发送地址</td>
<td style="text-align:center">目标邮件服务器</td>
</tr>
<tr>
<td>Reply-To</td>
<td style="text-align:left">回复地址</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>From</td>
<td style="text-align:left">发件人地址</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>To</td>
<td style="text-align:left">收件人地址</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>Cc</td>
<td style="text-align:left">抄送地址</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>Bcc</td>
<td style="text-align:left">暗送地址</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>Date</td>
<td style="text-align:left">日期和时间</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>Subject</td>
<td style="text-align:left">主题</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>Message-ID</td>
<td style="text-align:left">消息ID</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>MIME-Version</td>
<td style="text-align:left">MIME版本</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>Content-Type</td>
<td style="text-align:left">内容的类型</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
<tr>
<td>Content-Transfer-Encoding</td>
<td style="text-align:left">内容的传输编码方式</td>
<td style="text-align:center">邮件的创建者</td>
</tr>
</tbody>
</table>
<p>非标准的、自定义域名都以X-开头，例如X-Mailer, X-MSMail-Priority等，通常在接收和发送邮件的是同一程序时才能理解它们的意义。<br>在段头中，大致有如下一些域</p>
<table>
<thead>
<tr>
<th>域名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content-Type</td>
<td style="text-align:center">段体的类型</td>
</tr>
<tr>
<td>Content-Transfer-Encoding</td>
<td style="text-align:center">段体的传输编码方式</td>
</tr>
<tr>
<td>Content-Disposition</td>
<td style="text-align:center">段体的安排方式</td>
</tr>
<tr>
<td>Content-ID</td>
<td style="text-align:center">段体的ID</td>
</tr>
<tr>
<td>Content-Location</td>
<td style="text-align:center">段体的位置(路径)</td>
</tr>
<tr>
<td>Content-Base</td>
<td style="text-align:center">段体的基位置</td>
</tr>
</tbody>
</table>
<p>有的域除了值之外，还带有参数。值与参数、参数与参数之间以“;”分隔。参数名与参数值之间以“=”分隔。如例3的28-29行，Content-Type域的值为“multipart/alternative”，此外有一个参数boundary，值为”——=_NextPart_002_007C_01C3115F.80DFC5E0”。又如例3的第176行，Content-Disposition域的值为“attachment”，此外有一个参数filename，值为“readme.doc”。</p>
<p>Content-Type都是“主类型/子类型”的形式。主类型有text, image, audio, video, application, multipart, message等，分别表示文本、图片、音频、视频、应用、分段、消息等。每个主类型都可能有多个子类型，如text类型就包含plain, html, xml, css等子类型。以X-开头的主类型和子类型，同样表示自定义的类型，未向IANA正式注册，但大多已经约定成俗了。如application/x-zip-compressed是ZIP文件类型。在Windows中，注册表的“HKEY_CLASSES_ROOT/MIME/Database/Content Type”内列举了除multipart之外大部分已知的Content-Type。</p>
<p><img src="http://7nar5o.com1.z0.glb.clouddn.com/邮件body.png" alt="邮件body的三种组成及它们之间的关系"></p>
<p>关于参数的形式，RFC里有很多补充规定，有的允许带几个参数，较为常见的有</p>
<table>
<thead>
<tr>
<th>主类型</th>
<th style="text-align:left">参数名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>text</td>
<td style="text-align:left">charset</td>
<td style="text-align:center">字符集</td>
</tr>
<tr>
<td>image</td>
<td style="text-align:left">name</td>
<td style="text-align:center">名称</td>
</tr>
<tr>
<td>application</td>
<td style="text-align:left">name</td>
<td style="text-align:center">名称</td>
</tr>
<tr>
<td>multipart</td>
<td style="text-align:left">boundary</td>
<td style="text-align:center">边界</td>
</tr>
</tbody>
</table>
<p>其中字符集也能在Windows注册表的“HKEY_CLASSES_ROOT/MIME/Database/Charset”内见到。</p>
<p>Content-Transfer-Encoding共有Base64, Quoted-printable, 7bit, 8bit, Binary等几种。其中7bit是缺省的编码方式。电子邮件源码最初设计为全部是可打印的ASCII码的形式。非ASCII码的文本或数据要编码成要求的格式，如上面的三个例子。Base64, Quoted-Printable是在非英语国家使用最广使的编码方式。Binary方式只具有象征意义，而没有任何实用价值。<br>Base64将输入的字符串或一段数据编码成只含有<code>{&#39;A&#39;-&#39;Z&#39;, &#39;a&#39;-&#39;z&#39;, &#39;0&#39;-&#39;9&#39;, &#39;+&#39;, &#39;/&#39;}</code>这64个字符的串，’=’用于填充。其编码的方法是，将输入数据流每次取6 bit，用此6 bit的值(0-63)作为索引去查表，输出相应字符。这样，每3个字节将编码为4个字符(3×8 → 4×6)；不满4个字符的以’=’填充。</p>
<p>有的场合，以“=?charset?B?xxxxxxxx?=”表示xxxxxxxx是Base64编码，且原文的字符集是charset。如<br>Quoted-printable根据输入的字符串或字节范围进行编码，若是不需编码的字符，直接输出；若需要编码，则先输出’=’，后面跟着以2个字符表示的十六进制字节值。有的场合，以“=?charset?Q?xxxxxxxx?=”表示xxxxxxxx是Quoted-printable编码，且原文的字符集是charset。在段体内则直接编码，适当时机换行，换行前额外输出一个’=’。</p>
<p>近年来，国内多数邮件服务器已经支持8bit方式，因此只在国内传输的邮件，特别是在邮件头中，可直接使用8bit编码，对汉字不做处理。如果邮件要出国，还是老老实实地按Base64或Quoted-printable编码才行。</p>
<p>内嵌资源也是MIME的一个发光点，它能使邮件内容变得生动活泼、丰富多彩。可在邮件的multipart/related框架内定义一些与正文关联的图片、动画、声音甚至CSS样式和脚本的段。通常在HTML正文内，使用超级链接与内嵌资源相联系。</p>
<pre><code><span class="subst">&lt;</span>BODY background<span class="subst">=</span>cid:<span class="number">007901</span>c3111c$<span class="number">72</span>b978a0$<span class="number">0100007</span>f@bluesky bgColor<span class="subst">=</span><span class="variable">#ffffff</span><span class="subst">&gt;</span>
它指出用一个Content<span class="attribute">-ID</span>为<span class="number">007901</span>c3111c$<span class="number">72</span>b978a0$<span class="number">0100007</span>f@bluesky的图片作为背景(cid:xxxxxxxx也是一种超级链接)。而<span class="number">64</span><span class="subst">-</span><span class="number">169</span>行恰好就是这样一个内嵌资源。
除了用Content<span class="attribute">-ID</span>进行联系外，还有另外一种常用形式：用普通超级连接和Content<span class="attribute">-Location</span>。例如：
在HTML正文中，
<span class="attribute">...</span> <span class="attribute">...</span>  <span class="attribute">...</span> <span class="attribute">...</span>
<span class="subst">&lt;</span>IMG SRC<span class="subst">=</span><span class="string">"http://www.dangdang.com/images/all/anti_joyo_dm_book.gif"</span><span class="subst">&gt;</span>
<span class="attribute">...</span> <span class="attribute">...</span>  <span class="attribute">...</span> <span class="attribute">...</span>
<span class="subst">&lt;</span>IMG SRC<span class="subst">=</span><span class="string">"http://www.dangdang.com/dd2001/getimage_small.asp?id=486341"</span><span class="subst">&gt;</span>
<span class="attribute">...</span> <span class="attribute">...</span>  <span class="attribute">...</span> <span class="attribute">...</span>
对应的内嵌资源为
Content<span class="attribute">-Type</span>: image/gif; name<span class="subst">=</span><span class="string">"anti_joyo_dm_book.gif"</span>
Content<span class="attribute">-Transfer</span><span class="attribute">-Encoding</span>: base64
Content<span class="attribute">-Location</span>: http:<span class="comment">//www.dangdang.com/images/all/anti_joyo_dm_book.gif</span>
<span class="attribute">...</span> <span class="attribute">...</span> <span class="attribute">...</span> <span class="attribute">...</span>
Content<span class="attribute">-Type</span>: application/octet<span class="attribute">-stream</span>; name<span class="subst">=</span><span class="string">"getimage_small.asp?id=486341"</span>
Content<span class="attribute">-Transfer</span><span class="attribute">-Encoding</span>: base64
Content<span class="attribute">-Location</span>: http:<span class="comment">//www.dangdang.com/dd2001/getimage_small.asp?id=486341</span>
<span class="attribute">...</span> <span class="attribute">...</span> <span class="attribute">...</span> <span class="attribute">...</span>
另外，
Content<span class="attribute">-Location</span>: http:<span class="comment">//www.dangdang.com/images/all/anti_joyo_dm_book.gif</span>
与
Content<span class="attribute">-Location</span>: anti_joyo_dm_book<span class="built_in">.</span>gif
Content<span class="attribute">-Base</span>: http:<span class="comment">//www.dangdang.com/images/all/</span>
是等效的。
</code></pre><h3 id="Folder">Folder</h3><p>Folder用于处理邮件文件夹的封装，Folder也是一个抽象类，k9 mail也同时在Store中对应提供4种类型的即`ImapFolder,Pop3Folder,LocalFolder和WebDavFolder，用于将数据封装成文件夹的格式</p>
<h3 id="Filter">Filter</h3><p>包<code>com.fask.k9.mail.filter</code>，Android数据流的加解密库包括Base64的加解密，二进制流的加解密，十进制的加解密其用于做数据流的解析，数据的打包封装，将编码过的邮件的网络数据流解密成具有可读性的String流</p>
<h3 id="Power">Power</h3><p>包<code>com.fsck.k9.mail.power</code>中的TaccingPowerManager用于调控系统的资源管理，跟踪Wakelock,对线程唤醒进行调度，从而安排邮件的获取，更新Notification</p>
<h3 id="SSL">SSL</h3><p>包<code>com.fsck.k9.mail.ssl</code>，Android SSL加密库用于支持加密的邮件服务器，对邮件客户端到服务器端的通信进行</p>
<h3 id="Transport">Transport</h3><p>包<code>com.fsck.k9.mail.transport</code>用于提供邮件底层的网络连接，包括认证设置（验证用户名，密码和客户端证书），并提供未加密的SMTP连接和TLS隧道数据连接的SMTP通讯，SSL加密的SMTP通讯，其连接遵循SMTP邮件通讯协议</p>
<h2 id="K9包">K9包</h2><p>K9和Account均使用<code>SharedPreferences</code>，<code>SharedPreferences</code>是平台下除SQLite外的另一种方便的数据持久化方式，是Android平台下最简单的外部数据读写方法，适用于保存不同用户的个性化设置信息</p>
<p>一个账户通过一个UUID定义，可以通过<code>mUuid</code>的属性来区分两个账户的设置信息。Account类实现了接口<code>BaseAcount</code>，这个接口定义了基础的用户信息，能够获取、设置EMail账户及获取其信息</p>
<h1 id="业务实现流程">业务实现流程</h1><h2 id="接收邮件">接收邮件</h2><p>k9mail可以通过IMAP和POP3两种方式来从服务器端读取邮件，它设计和实现上的亮点包括</p>
<pre><code><span class="number">1</span>.实现了用一个同一个流程无缝融合IMAP,POP3和WebDav三种不同的账户类型，其从服务器端接收邮件的流程和代码是相同的
<span class="number">2</span>.通过抽象的方式实现获取邮件过程与账户类型无关，但没有增加不同获取方式之间代码的耦合度，通过代码将不同类型的账户类型路由到不同的Store子类，包括IMAP，POP3和WebDav，从而实现代码的松耦合。
<span class="number">3</span>.接收邮件时，通过<span class="escape">``</span>类来实现邮件结构的判断，从数据流的头信息，从而区分邮件数据流的块大小，先接收小邮件，后接收大邮件，接收的小邮件直接返回给UI线程进行更新，而将耗时任务转移到后台进行数据的接收工作，同时可以根据用户的设置判断自动接收邮件。判断邮件大小的区分可以通过Account用户自定义属性<span class="escape">`M</span>aximumAutoToDownload<span class="escape">`通</span>过<span class="escape">`S</span>haredPreference<span class="escape">`储</span>存到XML的Key-Value数据结构中。
<span class="number">4</span>.同时在接收邮件的过程中将进行服务器端与客户端直接的操作，包括客户端与服务器端邮件信息的同步
</code></pre><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/LoadMessage.png" alt=""></p>
<p>接收邮件的实现流程如下：</p>
<h3 id="启动后台进程">启动后台进程</h3><p>用户点击<code>MessageListFragment</code>底栏<code>FooterView</code>选择<code>ManualSearch</code>时</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (view == mFooterView) &#123;</span><br><span class="line">           <span class="keyword">if</span> (mCurrentFolder != <span class="keyword">null</span> &amp;&amp; !mSearch.isManualSearch()) &#123;</span><br><span class="line"></span><br><span class="line">               mController.loadMoreMessages(mAccount, mFolderName, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>Activity会调用MessagingController的loadMoreMessages加载当前账户文件夹的下一批邮件</p>
<pre><code>mController.loadMoreMessages(mAccount, mFolderName, <span class="literal">null</span>);
</code></pre><p>在<code>loadMoreMessages</code>方法中，调用 <code>synchronizeMailbox()</code>来加载更多的邮件</p>
<pre><code>synchronizeMailbox<span class="list">(<span class="keyword">account</span>, folder, listener, null)</span><span class="comment">;</span>
</code></pre><p>synchronizeMailbox方法在后台开启一个线程，并运行<code>synchronizeMailboxSynchronous()</code>方法来完成加载邮件，通知界面数据更新的操作<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">synchronizeMailbox</span><span class="params">(<span class="keyword">final</span> Account account, <span class="keyword">final</span> String folder, <span class="keyword">final</span> MessagingListener listener, <span class="keyword">final</span> Folder providedRemoteFolder)</span> </span>&#123;</span><br><span class="line">       putBackground(<span class="string">"synchronizeMailbox"</span>, listener, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="annotation">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               synchronizeMailboxSynchronous(account, folder, listener, providedRemoteFolder);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>synchronizeMailboxSynchronous()方法通知界面监听器Listener来更新状态<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (MessagingListener <span class="keyword">l</span> : getListeners(listener)) &#123;</span><br><span class="line">            <span class="keyword">l</span>.synchronizeMailboxStarted(account, folder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         * We don't ever sync the Outbox or errors folder</span><br><span class="line">         */</span></span><br><span class="line">        <span class="keyword">if</span> (folder.equals(account.getOutboxFolderName()) || folder.equals(account.getErrorFolderName())) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MessagingListener <span class="keyword">l</span> : getListeners(listener)) &#123;</span><br><span class="line">                <span class="keyword">l</span>.synchronizeMailboxFinished(account, folder, 0, 0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Messaging同步文件夹">Messaging同步文件夹</h3><p>通知所用MessagingListern开始同步文件夹</p>
<pre><code><span class="keyword">l</span>.synchronizeMailboxStarted(account, folder);
</code></pre><p>如果是发件箱是<code>发件箱Outbox或者错误的文件夹errors folder</code>则调用界面同步完成并返回</p>
<pre><code><span class="keyword">l</span>.synchronizeMailboxFinished(account, folder, 0, 0);
</code></pre><h3 id="取得远程Store">取得远程Store</h3><p>从SQLite中获取本地邮件获得本地邮件信息<code>Folder.OPEN_MODE_RW</code>更新最新的UID<code>updateLastUid()</code>保存到一个HashMap中，根据Account对象<code>account.getRemoteStore()</code>取得远程Store（Pop3Store,ImapStore,WebDavStore）及其文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">final LocalStore <span class="built_in">local</span>Store = account.getLocalStore();</span><br><span class="line">           tLocalFolder = <span class="built_in">local</span>Store.getFolder(folder);</span><br><span class="line">           final LocalFolder <span class="built_in">local</span>Folder = tLocalFolder;</span><br><span class="line">           <span class="built_in">local</span>Folder.open(Folder.OPEN_MODE_RW);</span><br><span class="line">           <span class="built_in">local</span>Folder.updateLastUid();</span><br><span class="line">           List&lt;? extends Message&gt; <span class="built_in">local</span>Messages = <span class="built_in">local</span>Folder.getMessages(null);</span><br><span class="line">           Map&lt;String, Message&gt; <span class="built_in">local</span>UidMap = new HashMap&lt;String, Message&gt;();</span><br><span class="line">           <span class="keyword">for</span> (Message message : <span class="built_in">local</span>Messages) &#123;</span><br><span class="line">               <span class="built_in">local</span>UidMap.put(message.getUid(), message);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (providedRemoteFolder != null) &#123;</span><br><span class="line">               remoteFolder = providedRemoteFolder;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               Store remoteStore = account.getRemoteStore();</span><br><span class="line">               remoteFolder = remoteStore.getFolder(folder);</span><br><span class="line">               <span class="keyword">if</span> (! verifyOrCreateRemoteSpecialFolder(account, folder, remoteFolder, listener)) &#123;</span><br><span class="line">                   <span class="built_in">return</span>;</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure></p>
<p>从文件夹中获取远程邮件，判断远程邮件夹是否为为HashMap中确定是否下载这个远程邮件，把下一批下载到本地的邮件收集到一个ArrayList<message>中.</message></p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">remoteFolder.<span class="built_in">open</span>(Folder.OPEN_MODE_RW);</span><br><span class="line">             <span class="keyword">if</span> (Expunge.EXPUNGE_ON_POLL == account.getExpungePolicy()) &#123;</span><br><span class="line">                 remoteFolder.expunge();</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/*</span><br><span class="line">          * Get the remote message count.</span><br><span class="line">          */</span></span><br><span class="line">         <span class="built_in">int</span> remoteMessageCount = remoteFolder.getMessageCount();</span><br><span class="line"></span><br><span class="line">         <span class="built_in">int</span> visibleLimit = localFolder.getVisibleLimit();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (visibleLimit &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             visibleLimit = K9.DEFAULT_VISIBLE_LIMIT;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">final</span> List&lt;Message&gt; remoteMessages = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line">         Map&lt;<span class="keyword">String</span>, Message&gt; remoteUidMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, Message&gt;();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">final</span> Date earliestDate = account.getEarliestPollDate();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (remoteMessageCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="comment">/* Message numbers start at 1.  */</span></span><br><span class="line">             <span class="built_in">int</span> remoteStart;</span><br><span class="line">             <span class="keyword">if</span> (visibleLimit &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                 remoteStart = Math.<span class="built_in">max</span>(<span class="number">0</span>, remoteMessageCount - visibleLimit) + <span class="number">1</span>;</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 remoteStart = <span class="number">1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="built_in">int</span> remoteEnd = remoteMessageCount;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (K9.DEBUG)</span><br><span class="line">                 Log.v(K9.LOG_TAG, <span class="string">"SYNC: About to get messages "</span> + remoteStart + <span class="string">" through "</span> + remoteEnd + <span class="string">" for folder "</span> + folder);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">final</span> AtomicInteger headerProgress = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">             <span class="keyword">for</span> (MessagingListener l : getListeners(listener)) &#123;</span><br><span class="line">                 l.synchronizeMailboxHeadersStarted(account, folder);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             List&lt;? extends Message&gt; remoteMessageArray = remoteFolder.getMessages(remoteStart, remoteEnd, earliestDate, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">             <span class="built_in">int</span> messageCount = remoteMessageArray.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span> (Message thisMess : remoteMessageArray) &#123;</span><br><span class="line">                 headerProgress.incrementAndGet();</span><br><span class="line">                 <span class="keyword">for</span> (MessagingListener l : getListeners(listener)) &#123;</span><br><span class="line">                     l.synchronizeMailboxHeadersProgress(account, folder, headerProgress.<span class="built_in">get</span>(), messageCount);</span><br><span class="line">                 &#125;</span><br><span class="line">                 Message localMessage = localUidMap.<span class="built_in">get</span>(thisMess.getUid());</span><br><span class="line">                 <span class="keyword">if</span> (localMessage == <span class="keyword">null</span> || !localMessage.olderThan(earliestDate)) &#123;</span><br><span class="line">                     remoteMessages.<span class="built_in">add</span>(thisMess);</span><br><span class="line">                     remoteUidMap.put(thisMess.getUid(), thisMess);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span> (MessagingListener l : getListeners(listener)) &#123;</span><br><span class="line">                 l.synchronizeMailboxHeadersFinished(account, folder, headerProgress.<span class="built_in">get</span>(), remoteUidMap.<span class="built_in">size</span>());</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (remoteMessageCount &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Message count "</span> + remoteMessageCount + <span class="string">" for folder "</span> + folder);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>
<h3 id="同步数据">同步数据</h3><p>判断用户是否设置为本地Folder与远程服务器同步<code>account.syncRemoteDeletions()</code>，若值为1，则删除服务器上不存在但本地存在的邮件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">             * Remove any messages that are in the local store but no longer on the remote store or are too old</span><br><span class="line">             */</span></span><br><span class="line">            <span class="keyword">if</span> (account.syncRemoteDeletions()) &#123;</span><br><span class="line">                List&lt;Message&gt; destroyMessages = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line">                <span class="keyword">for</span> (Message <span class="string">localMessage :</span> localMessages) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (remoteUidMap.get(localMessage.getUid()) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        destroyMessages.add(localMessage);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                localFolder.destroyMessages(destroyMessages);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (Message <span class="string">destroyMessage :</span> destroyMessages) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (MessagingListener <span class="string">l :</span> getListeners(listener)) &#123;</span><br><span class="line">                        l.synchronizeMailboxRemovedMessage(account, folder, destroyMessage);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<h3 id="执行下载">执行下载</h3><p>执行<code>MessagingController.downloadMessages()</code>下载第3步确认下载的邮件到本地，下载结果是成功通知所有注册的<code>MessagingListener</code></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">             * Now we download the actual content of messages.</span><br><span class="line">             */</span></span><br><span class="line">            <span class="keyword">int</span> newMessages = downloadMessages(account, remoteFolder, localFolder, remoteMessages, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> unreadMessageCount = localFolder.getUnreadMessageCount();</span><br><span class="line">            <span class="keyword">for</span> (MessagingListener l : getListeners()) &#123;</span><br><span class="line">                l.folderStatusChanged(account, folder, unreadMessageCount);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<h3 id="优先下载">优先下载</h3><p>在downloadMessages()中计算未同步的邮件、小邮件、大邮件到本地，最后保存到SQLite之中</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> * Grab the content of the small <span class="keyword">messages</span> <span class="keyword">first</span>. This <span class="keyword">is</span> going <span class="keyword">to</span></span><br><span class="line"> * <span class="keyword">be</span> very fast <span class="built_in">and</span> at very worst will <span class="keyword">be</span> <span class="keyword">a</span> single <span class="keyword">up</span> of <span class="keyword">a</span> few bytes <span class="built_in">and</span> <span class="keyword">a</span> single</span><br><span class="line"> * download of <span class="number">625</span><span class="keyword">k</span>.</span><br><span class="line"> */</span><br><span class="line">FetchProfile fp = <span class="keyword">new</span> FetchProfile();</span><br><span class="line">fp.<span class="built_in">add</span>(FetchProfile.Item.BODY);</span><br><span class="line">//        fp.<span class="built_in">add</span>(FetchProfile.Item.FLAGS);</span><br><span class="line">//        fp.<span class="built_in">add</span>(FetchProfile.Item.ENVELOPE);</span><br><span class="line"></span><br><span class="line">downloadSmallMessages(account, remoteFolder, localFolder, smallMessages, progress, unreadBeforeStart, newMessages, todo, fp);</span><br><span class="line">smallMessages.clear();</span><br></pre></td></tr></table></figure>
<h3 id="判断邮件Body">判断邮件Body</h3><p>通过<code>message.getBody() == null</code>来判断该邮件是否有内容，如果邮件Body为空则直接调用对应的Folder的fetch()<code>remoteFolder.fetch()</code>方法来取得邮件；<br>、<code>localFolder.appendMessages()、localFolder.getMessage()</code>更新本地Folder信息；否则则通过<code>MessageExtractor.collectTextParts();</code>取得邮件的各个部分，再调用对应的<code>remoteFolder.fetchPart();</code>把邮件的每一个部分收集到本地,并构造到邮件中，然后<code>localFolder.appendMessages();</code>保存到SQLite中</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (message.getBody() == <span class="keyword">null</span>) &#123;</span><br><span class="line">   <span class="comment">/*</span><br><span class="line">  	* The provider was unable to get the structure of the message, so</span><br><span class="line">   * we'll download a reasonable portion of the messge and mark it as</span><br><span class="line">   * incomplete so the entire thing can be downloaded later if the user</span><br><span class="line">   * wishes to download it.</span><br><span class="line">   */</span></span><br><span class="line">   fp.clear();</span><br><span class="line">   fp.add(FetchProfile.Item.BODY_SANE);</span><br><span class="line">   <span class="comment">/*</span><br><span class="line">    *  TODO a good optimization here would be to make sure that all Stores set</span><br><span class="line">    *  the proper size after this fetch and compare the before and after size. If</span><br><span class="line">    *  they equal we can mark this SYNCHRONIZED instead of PARTIALLY_SYNCHRONIZED</span><br><span class="line">    */</span></span><br><span class="line"></span><br><span class="line">   remoteFolder.fetch(Collections.singletonList(message), fp, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Store the updated message locally</span></span><br><span class="line">   localFolder.appendMessages(Collections.singletonList(message));</span><br><span class="line"></span><br><span class="line">   Message localMessage = localFolder.getMessage(message.getUid());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Certain (POP3) servers give you the whole message even when you ask for only the first x Kb</span></span><br><span class="line">   <span class="keyword">if</span> (!message.isSet(Flag.X_DOWNLOADED_FULL)) &#123;</span><br><span class="line">   <span class="comment">/*</span><br><span class="line">    * Mark the message as fully downloaded if the message size is smaller than</span><br><span class="line">    * the account's autodownload size limit, otherwise mark as only a partial</span><br><span class="line">    * download.  This will prevent the system from downloading the same message</span><br><span class="line">    * twice.</span><br><span class="line">    *</span><br><span class="line">    * If there is no limit on autodownload size, that's the same as the message</span><br><span class="line">    * being smaller than the max size</span><br><span class="line">    */</span></span><br><span class="line">   <span class="keyword">if</span> (account.getMaximumAutoDownloadMessageSize() == <span class="number">0</span> || message.getSize() &lt; account.getMaximumAutoDownloadMessageSize()) &#123;</span><br><span class="line">       localMessage.setFlag(Flag.X_DOWNLOADED_FULL, <span class="keyword">true</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// Set a flag indicating that the message has been partially downloaded and</span></span><br><span class="line">       <span class="comment">// is ready for view.</span></span><br><span class="line">       localMessage.setFlag(Flag.X_DOWNLOADED_PARTIAL, <span class="keyword">true</span>;</span><br><span class="line">       	&#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">/*</span><br><span class="line">        * We have a structure to deal with, from which</span><br><span class="line">        * we can pull down the parts we want to actually store.</span><br><span class="line">        * Build a list of parts we are interested in. Text parts will be downloaded</span><br><span class="line">        * right now, attachments will be left for later.</span><br><span class="line">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="built_in">Set</span>&lt;Part&gt; viewables = MessageExtractor.collectTextParts(message);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span><br><span class="line">        * Now download the parts we're interested in storing.</span><br><span class="line">        */</span></span><br><span class="line">       <span class="keyword">for</span> (Part <span class="literal">part</span> : viewables) &#123;</span><br><span class="line">           remoteFolder.fetchPart(message, <span class="literal">part</span>, <span class="keyword">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// Store the updated message locally</span></span><br><span class="line">       localFolder.appendMessages(Collections.singletonList(message));</span><br><span class="line"></span><br><span class="line">       Message localMessage = localFolder.getMessage(message.getUid());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置重复下载">设置重复下载</h3><p>最后设置邮件下载标识防止重复下载<code>localMessage.setFlag(Flag.X_DOWNLOADED_PARTIAL, true)</code></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">Set</span> a flag indicating this <span class="keyword">message</span> has been fully downloaded <span class="keyword">and</span> can be viewed.</span><br><span class="line">localMessage.setFlag(Flag.X_DOWNLOADED_PARTIAL, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<p>通过<code>MessagingListener</code>通知文件夹添加或更新邮件，更新进度</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (MessagingListener <span class="keyword">l</span> : getListeners()) &#123;</span><br><span class="line">    <span class="keyword">l</span>.synchronizeMailboxAddOrUpdateMessage(account, folder, localMessage);</span><br><span class="line">    <span class="keyword">l</span>.synchronizeMailboxProgress(account, folder, progress.<span class="literal">get</span>(), todo);</span><br><span class="line">    <span class="keyword">if</span> (!localMessage.isSet(Flag.SEEN)) &#123;</span><br><span class="line">                    <span class="keyword">l</span>.synchronizeMailboxNewMessage(account, folder, localMessage);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="发送邮件">发送邮件</h2><p>发送邮件的过程中，客户端一边执行异步AnsycTask，一边更新UI线程，发送完成后返回发送成功的页面。</p>
<p>发送邮件的过程如下：</p>
<p><img src="http://7nar5o.com1.z0.glb.clouddn.com/sendemail.png" alt=""></p>
<h3 id="启动后台">启动后台</h3><p>用户编写邮件的Activity是<code>MessageCompose</code>,在<code>MessageCpmpose</code>中触发<code>MenuItem</code>的<code>send</code>按钮启动发送邮件的过程</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.send:</span><br><span class="line">	mPgpData.setEncryptionKeys(<span class="keyword">null</span>);</span><br><span class="line">	onSend();</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>然后进行用户输入的检查，如果用户的发送地址，主题，邮件主题为空，则返回错误信息，使用Toast对用户进行提醒，并检查队列信息，如果之前没有邮件则调用<code>performSend()</code>，对用户的设置进行判断，进行不同方式的邮件加密（SignEncryptCallback and with encryptedData set in pgpData），调用<code>sendMessage()</code>方法执行一个新的<code>SendMessageTask()</code>,在这个类的<code>doInBackground()</code>在<code>MessagingController</code>中获取一个Instance执行<code>sendMessage()</code>动作<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MessagingController.getInstance(getApplication()).sendMessage(mAccount, message, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p>
<p>调用MessagingController的<code>sendMessage()</code>完成操作</p>
<h3 id="本地保存">本地保存</h3><p>在MessageController的<code>send()</code>中,首先根据当前的account账户找到<code>LocalStore</code>对象，再根据<code>localStore</code>句柄获取<code>LocalFolder</code>对象，然后调用<code>localFolder.appendMessages()</code>把待发送的邮件保存在本地。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LocalStore <span class="built_in">local</span>Store = account.getLocalStore();</span><br><span class="line">LocalFolder <span class="built_in">local</span>Folder = <span class="built_in">local</span>Store.getFolder(account.getOutboxFolderName());</span><br><span class="line"><span class="built_in">local</span>Folder.open(Folder.OPEN_MODE_RW);</span><br><span class="line"><span class="built_in">local</span>Folder.appendMessages(Collections.singletonList(message));</span><br><span class="line">Message <span class="built_in">local</span>Message = <span class="built_in">local</span>Folder.getMessage(message.getUid());</span><br><span class="line"><span class="built_in">local</span>Message.setFlag(Flag.X_DOWNLOADED_FULL, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">local</span>Folder.close();</span><br><span class="line">sendPendingMessages(account, listener);</span><br></pre></td></tr></table></figure>
<h3 id="发送邮件-1">发送邮件</h3><p>接下来<code>MessagingController</code>调用<code>sendPendingMessages()</code>从发件箱中发送邮件，<code>sendPendingMessagesSynchronous()</code>内完成具体邮件的发送工作并通知Listener更新UI界面,并且支持输出发送消息进度的信息</p>
<pre><code>transport.sendMessage(<span class="keyword">message</span>);
</code></pre><p>在<code>sendPendingMessagesSynchronous()</code>方法中，首先根据当前的account账户找到<code>LocalStore</code>对象，再根据<code>localStore</code>句柄获取<code>OutboxFolder</code>发件箱的<code>LocalFolder</code>对象后,调用向MessagingController注册的Listerner<code>sendPendingMessagesStarted()</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Store <span class="built_in">local</span>Store = account.getLocalStore();</span><br><span class="line"><span class="built_in">local</span>Folder = <span class="built_in">local</span>Store.getFolder(</span><br><span class="line">                  account.getOutboxFolderName());</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">local</span>Folder.exists()) &#123;</span><br><span class="line">    <span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (MessagingListener l : getListeners()) &#123;</span><br><span class="line">    l.sendPendingMessagesStarted(account);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">local</span>Folder.open(Folder.OPEN_MODE_RW);</span><br></pre></td></tr></table></figure></p>
<p>如果发件箱中的邮件标记为“删除”，则先销毁这部分邮件，然后循环发送每一封邮件，并为每一封邮件打上状态标记（Flag.X_SEND_IN_PROGRESS）</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="class"><span class="keyword">message</span>.<span class="title">isSet</span>(Flag.DELETED)) </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">message</span>.<span class="title">destroy</span>();</span><br><span class="line">    continue;</span><br><span class="line">	&#125;</span></span><br></pre></td></tr></table></figure>
<p>在发送的过程中，<br>调用向MessagingController注册的Listerner<code>synchronizeMailboxProgress()</code>通知监听器发送已开始，<br>在邮件的发送过程中，循环调用<code>synchronizeMailboxProgress()</code>方法传递progress参数，在发送每一封邮件<code>transport.sendMessage()</code>的过程中，进度计数器会<code>progress++</code>,在邮件发送结束后调用<code>l.sendPendingMessagesCompleted();</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">for</span> (<span class="tag">MessagingListener</span> <span class="rule"><span class="attribute">l </span>:<span class="value"> <span class="function">getListeners</span>()) &#123;</span><br><span class="line">    l.<span class="function">synchronizeMailboxProgress</span>(account, account.<span class="function">getSentFolderName</span>(), progress, todo)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><code>sendPendingMessagesSynchronous()</code>调用<code>transport.sendMessage(message)</code>发送每一封邮件，如果不存在已发送文件夹则将发出的邮件destory，如果存在已发送文件夹则将已发送邮件从未发送文件夹转移到已发送文件夹，发送过程调用<code>EOLConvertingOutPutStrean</code>以数据流的方式将待发送的邮件写入服务器端。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span>Folder.moveMessages(Collections.singletonList(message), <span class="built_in">local</span>SentFolder);</span><br></pre></td></tr></table></figure>
<p>最后调用<code>processPendingCommands()</code>同步服务器端已发送文件夹。</p>
<h2 id="删除邮件">删除邮件</h2><h3 id="删除一组邮件">删除一组邮件</h3><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/deletemesssage.png" alt="K9Mail删除邮件的流程"></p>
<p>1.k9mail在Activity MessageList方法<code>onCustomKeyDown</code>中设置删除按钮的响应事件,根据删除按钮所在的界面(<code>MassageListFragment</code>和<code>MessageViewFragment</code>的删除按钮)调用<code>onDelect</code>方法删除邮件</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">mDisplayMode =</span>= DisplayMode.MESSAGE_LIST) &#123;</span><br><span class="line">    mMessageListFragment.onDelete();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mMessageViewFragment != <span class="constant">null</span>) &#123;</span><br><span class="line">    mMessageViewFragment.onDelete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MassageListFragment</code>再分别调用<code>MessagingController</code>的方法<code>deleteThreads()</code>和<code>deleteMessages()</code>去删除一个会话邮件或是一组邮件,<code>MessageViewFragment</code>调用<code>MessagingController</code>的<code>deleteMessages()</code>方法删除一个邮件</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">onDeleteConfirmed</span><span class="params">(List&lt;LocalMessage&gt; messages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mThreadedList) &#123;</span><br><span class="line">            mController.deleteThreads(messages);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mController.deleteMessages(messages, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在执行删除操作之前,kmail会<code>disable</code>删除按钮,防止连续误删</p>
<p><code>MessagingController</code>执行删除操作调用<code>actOnMessages()</code>方法启动后台线程<code>deleteThreadsSynchronous()</code>并把任务压栈道名为mCommands的BlockingQueue<command>类型的队列中</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> putBackground(String <span class="keyword">description</span>, MessagingListener listener, Runnable runnable) &#123;</span><br><span class="line">        putCommand(mCommands, <span class="keyword">description</span>, listener, runnable, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<p>使在删除过程中，界面仍能够保持正常的响应，在操作过程中通知MessagingListener通知界面</p>
<p>2.删除邮件之前先通知MessagingListener删除界面邮件，删除邮件时，判断是否存在垃圾箱，当前文件夹为垃圾箱，则将邮件打上<code>Flag.DELETED</code>的标签，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (folder.equals(account.getTrashFolderName()) || !account.hasTrashFolder()) &#123;</span><br><span class="line">    <span class="built_in">local</span>Folder.setFlags(messages, Collections.singleton(Flag.DELETED), <span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">local</span>TrashFolder = <span class="built_in">local</span>Store.getFolder(account.getTrashFolderName());</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">local</span>TrashFolder.exists()) &#123;</span><br><span class="line">        <span class="built_in">local</span>TrashFolder.create(Folder.FolderType.HOLDS_MESSAGES);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">local</span>TrashFolder.exists()) &#123;</span><br><span class="line">        uidMap = <span class="built_in">local</span>Folder.moveMessages(messages, <span class="built_in">local</span>TrashFolder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果待删除邮件在发件箱内，将待删除的邮件移入垃圾箱，则把要删除的邮件移入垃圾箱，同时向服务器执行PendingExpunge()在服务器上移动响应的文件夹；然后通过Account获取LocalStore后获取LocalFolder，通过Account的方法<code>getDeletePolicy()</code>获取用户删除操作执行不同的动作，如果设置删除动作为“已读”则给该邮件打上“已读”的标签，如果用户策略为删除则打上“删除”标签，执行真正的删除操作。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (folder.equals(account.getOutboxFolderName())) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Message</span> message : messages) &#123;</span><br><span class="line">    <span class="comment">// If the message was in the Outbox, then it has been copied to local Trash, and has</span></span><br><span class="line">    <span class="comment">// to be copied to remote trash</span></span><br><span class="line">        <span class="type">PendingCommand</span> command = <span class="keyword">new</span> <span class="type">PendingCommand</span>();</span><br><span class="line">        command.command = <span class="type">PENDING_COMMAND_APPEND</span>;</span><br><span class="line">        command.arguments =</span><br><span class="line">            <span class="keyword">new</span> <span class="type">String</span>[] &#123;</span><br><span class="line">            account.getTrashFolderName(),</span><br><span class="line">            message.getUid()</span><br><span class="line">        &#125;;</span><br><span class="line">        queuePendingCommand(account, command);</span><br><span class="line">    &#125;</span><br><span class="line">    processPendingCommands(account);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (account.getDeletePolicy() == <span class="type">DeletePolicy</span>.<span class="type">ON_DELETE</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (folder.equals(account.getTrashFolderName())) &#123;</span><br><span class="line">        queueSetFlag(account, folder, <span class="type">Boolean</span>.<span class="built_in">toString</span>(<span class="built_in">true</span>), <span class="type">Flag</span>.<span class="type">DELETED</span>.<span class="built_in">toString</span>(), uids);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queueMoveOrCopy(account, folder, account.getTrashFolderName(), <span class="built_in">false</span>, uids, uidMap);</span><br><span class="line">                &#125;</span><br><span class="line">        processPendingCommands(account);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (account.getDeletePolicy() == <span class="type">DeletePolicy</span>.<span class="type">MARK_AS_READ</span>) &#123;</span><br><span class="line">        queueSetFlag(account, folder, <span class="type">Boolean</span>.<span class="built_in">toString</span>(<span class="built_in">true</span>), <span class="type">Flag</span>.<span class="type">SEEN</span>.<span class="built_in">toString</span>(), uids);</span><br><span class="line">        processPendingCommands(account);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>调用<code>processPendingCommands()</code>方法将删除操作保存到SQLite的<code>Pending_commands</code>的表中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List<span class="tag">&lt;<span class="title">PendingCommand</span>&gt;</span> commands = localStore.getPendingCommands();</span><br></pre></td></tr></table></figure></p>
<p>执行完成后则从表中删除</p>
<p>3.执行删除操作，获取到远程文件夹<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Store</span> remoteStore = account.getRemoteStore();</span><br><span class="line"><span class="title">Folder</span> remoteFolder = remoteStore.getFolder(folder);</span><br></pre></td></tr></table></figure></p>
<p>取得到ImapFolder，在<code>ImapFolder</code>中执行真正的删除操作<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">remoteFolder.<span class="keyword">open</span>(Folder.OPEN_MODE_RW);</span><br><span class="line"><span class="keyword">if</span> (remoteFolder.getMode() != Folder.OPEN_MODE_RW) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">remoteFolder.expunge();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeFolder(remoteFolder);</span><br></pre></td></tr></table></figure></p>
<p><code>ImapFolder</code>调用另一个内部类<code>ImapConnection</code>向服务器发送<code>expunge()</code>命令，<code>ImapFolder</code>处理<code>expunge()</code>的响应。</p>
<h2 id="IMAP邮件的解析、封装、保存">IMAP邮件的解析、封装、保存</h2><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/服务器响应解析.png" alt="服务器响应解析"></p>
<p>在获取邮件的过程中，通过<code>message.getBody() == null</code>来判断该邮件是否有内容，如果邮件Body为空则直接通过<code>MessageController</code>调用<code>ImapStore</code>的内部类<code>ImapFolder</code>的<code>fetch()</code>方法来获取邮件；否则则通过<code>MessageExtractor.collectTextParts();</code>取得邮件的各个部分，再调用对应的<code>remoteFolder.fetchPart();</code>把邮件的每一个部分收集到本地,并构造到邮件中，然后<code>localFolder.appendMessages();</code>保存到SQLite中</p>
<p><code>fetch()</code>方法的操作流程如下：首先检查到服务器的TCP连接（若无连接则抛出异常）-&gt; 构造IMAP命令 -&gt; 通过ImapConnection将命令发送到邮件服务器 -&gt; 读取、解析服务器响应</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mConnection.sendCommand(<span class="keyword">String</span>.format(<span class="string">"UID FETCH %s (%s)"</span>,</span><br><span class="line">	combine(uidWindow.toArray(<span class="keyword">new</span> <span class="keyword">String</span>[uidWindow.<span class="built_in">size</span>()]), <span class="string">','</span>),</span><br><span class="line">    combine(fetchFields.toArray(<span class="keyword">new</span> <span class="keyword">String</span>[fetchFields.<span class="built_in">size</span>()]), <span class="string">' '</span>)), <span class="keyword">false</span>);</span><br><span class="line">    ImapResponse response;</span><br><span class="line">    <span class="built_in">int</span> messageNumber = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ImapResponseCallback callback = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (fp.contains(FetchProfile.Item.BODY) || fp.contains(FetchProfile.Item.BODY_SANE)) &#123;</span><br><span class="line">        callback = <span class="keyword">new</span> FetchBodyCallback(messageMap);</span><br><span class="line">    &#125;</span><br><span class="line">    response = mConnection.readResponse(callback);</span><br><span class="line"></span><br><span class="line">        ImapMessage imapMessage = (ImapMessage) message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Object</span> literal = handleFetchResponse(imapMessage, fetchList);</span><br></pre></td></tr></table></figure>
<p>首先通过<code>mConnection.sendCommand()</code>方法向服务器传输命令，根据邮件UID来获取邮件，K9Mail通过使用了<code>java.net.Socket</code>类通过Socket连接邮件服务器，k9mail与邮件服务器建立连接和管理连接的实现封装在<code>ImapConnection</code>之中，连接过程通过域名服务器(DNS)解析@host域名，返回的IP地址逐个尝试连接服务器，直到连接到邮件服务器后将不再尝试后面的address，在与服务器的连接过程中，<code>ImapConnection</code>调用<code>ImapResponseParser</code>对服务器返回的响应先做一遍解析，提高对不规范邮件的错容性，尽可能的显示所有能够正常显示的邮件或者对于实在无法解析的邮件显示邮件的部分内容</p>
<p>调用<code>ImapMessage</code>类解析服务器响应，将返回的数据封装成为<code>ImapMessage</code>类型，</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="typename">String</span> bodyString = (<span class="typename">String</span>)<span class="keyword">literal</span>;</span><br><span class="line">InputStream bodyStream = <span class="keyword">new</span> ByteArrayInputStream(bodyString.getBytes());</span><br><span class="line">imapMessage.parse(bodyStream);</span><br></pre></td></tr></table></figure>
<p><code>Folder</code>,<code>Message</code>类其作用近似于接口但相对于接口它提供了一些通用方法的实现，例如判断发送时间先后的<code>olderThan()</code>方法，在实际处理业务逻辑的过程中使用的的是它们的子类，Message类只有一个子类<code>MimeMessage</code>，邮件头<code>MimeHearder</code>封装、Email地址<code>Address</code>封装,邮件体<code>MimeBody</code>封装等都定义在<code>MimeMessage</code>之中，<code>MimeMessage</code>有4个子类是响应Store的内部类用于实现对应<code>Store</code>类的具体功能。</p>
<p>K9Mail实际解析邮件并且实现封装的类为<code>MimeMessage</code>主要的实现方法是调用的是Apache的开源邮件解析库mimej4来实现，K9mail主要使用了mime4j的编解码、解析邮件并封装为对象、处理特殊字符这三个方面的功能，<code>MimeHearder</code>类用于封装Mime邮件的头部，提供了获取邮件头信息（收件人、抄送人地址）的处理，拼装的方法</p>
<p><img src="IMAP邮件的分装" alt="">(<a href="http://7nar5o.com1.z0.glb.clouddn.com/message.png" target="_blank" rel="external">http://7nar5o.com1.z0.glb.clouddn.com/message.png</a>)</p>
<p>在<code>MimeMessage</code>中实际完成解析工作的是类方法<code>parse(InputStream in)</code>和内部类<code>MimeMessageBuilder</code>，二者的主要功能是提供邮件的解析机制完成邮件的解析并封装为<code>MimeMessage</code>对象<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void parse(<span class="type">InputStream</span> <span class="keyword">in</span>, boolean recurse) throws <span class="type">IOException</span>, <span class="type">MessagingException</span> &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="type">MimeStreamParser</span> <span class="keyword">parser</span> = <span class="keyword">new</span> <span class="type">MimeStreamParser</span>(parserConfig);</span><br><span class="line"><span class="keyword">parser</span>.setContentHandler(<span class="keyword">new</span> <span class="type">MimeMessageBuilder</span><span class="literal">()</span>);</span><br><span class="line"><span class="keyword">if</span> (recurse) &#123;</span><br><span class="line">    <span class="keyword">parser</span>.setRecurse<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">parser</span>.parse(<span class="keyword">new</span> <span class="type">EOLConvertingInputStream</span>(<span class="keyword">in</span>));</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>在解析过程中，遇到邮件内容的关键字<code>head</code>,<code>MultiPart</code>,<code>body</code>,<code>BodyPart</code>,<code>epilogue</code>、<code>preamble</code><br><code>field</code>等会触发响应类的解析工作，例如当开始解析头信息时，调用<code>Part.class</code>对header进行解析<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expect(Part.<span class="keyword">class</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一个MimeMessage对象可以有一个<code>MultiPart</code>(同时又是一个Body类型)的mBody，这个Body可以有一组数量不限的BodyPart，每个BodyPart又是一个Body类型，同时每个<code>MultiPart</code>还可以有一个Part类型的父对象，这样就构成了一组递归关系，从父对象往BodyPart解析直到没有内容为止。</p>
<p>MimeMessageBuilder是负责将解析好邮件的各个部分组装成为k9mail对邮件内容的封装类，最终解析好的邮件会被封装为MimeMessage对象<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MimeMessageBuilder</span> <span class="keyword">implements</span> <span class="title">ContentHandler</span></span></span><br></pre></td></tr></table></figure></p>
<p><code>ContentHandler</code>类是<code>MimeMessageBuilder</code>类的接口，<code>ContentHandler</code>是mime4j的接口</p>
<p>mime4j的MimeStreamParser类负责具体的解析工作，在解析过程中会以事件触发机制调用之前注册的<code>ContentHandler</code>(<code>MimeMessageBuilder</code>),通知其使用构建结果构建的对象<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> T_BODY</span><br><span class="line">BodyDescriptor <span class="keyword">desc</span> = mimeTokenStream.getBodyDescriptor()</span><br><span class="line">InputStream bodyContent</span><br><span class="line"><span class="keyword">if</span> (contentDecoding) </span><br><span class="line">    bodyContent = mimeTokenStream.getDecodedInputStream()</span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">    bodyContent = mimeTokenStream.getInputStream()</span><br><span class="line">    handler.body(<span class="keyword">desc</span>, bodyContent)</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p>
<p>解析完成后调用<code>localFolder.appendMessages(Collections.singletonList(message))</code>将MimeMessage对象保存到SQlite的<code>message</code>表中，k9mail先提取各个字段的值保存到<code>ContentValue</code>（相当于Map，其中数据可以在SQLiteDatabase操作数据库使用）中，然后调用<code>android.database.sqlite</code>的<code>insert</code>方法将ContentValue的数据保存到message表中并创建在<code>threads</code>中的入口</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">ContentValues cv = new ContentValues();</span><br><span class="line">    cv.put(<span class="string">"message_part_id"</span>, rootMessagePartId);</span><br><span class="line">    cv.put(<span class="string">"uid"</span>, uid);</span><br><span class="line">    cv.put(<span class="string">"subject"</span>, <span class="keyword">message</span>.getSubject());</span><br><span class="line">    cv.put(<span class="string">"sender_list"</span>, Address.pack(<span class="keyword">message</span>.getFrom()));</span><br><span class="line">    cv.put(<span class="string">"date"</span>, <span class="keyword">message</span>.getSentDate() == null</span><br><span class="line">            ? System.currentTimeMillis() : <span class="keyword">message</span>.getSentDate().getTime());</span><br><span class="line">    cv.put(<span class="string">"flags"</span>, this.localStore.serializeFlags(<span class="keyword">message</span>.getFlags()));</span><br><span class="line">    cv.put(<span class="string">"deleted"</span>, <span class="keyword">message</span>.isSet(Flag.DELETED) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    cv.put(<span class="string">"read"</span>, <span class="keyword">message</span>.isSet(Flag.SEEN) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    cv.put(<span class="string">"flagged"</span>, <span class="keyword">message</span>.isSet(Flag.FLAGGED) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    cv.put(<span class="string">"answered"</span>, <span class="keyword">message</span>.isSet(Flag.ANSWERED) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    cv.put(<span class="string">"forwarded"</span>, <span class="keyword">message</span>.isSet(Flag.FORWARDED) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    cv.put(<span class="string">"folder_id"</span>, mFolderId);</span><br><span class="line">    cv.put(<span class="string">"to_list"</span>, Address.pack(<span class="keyword">message</span>.getRecipients(RecipientType.TO)));</span><br><span class="line">    cv.put(<span class="string">"cc_list"</span>, Address.pack(<span class="keyword">message</span>.getRecipients(RecipientType.CC)));</span><br><span class="line">    cv.put(<span class="string">"bcc_list"</span>, Address.pack(<span class="keyword">message</span>.getRecipients(RecipientType.BCC)));</span><br><span class="line">    cv.put(<span class="string">"preview"</span>, preview);</span><br><span class="line">    cv.put(<span class="string">"reply_to_list"</span>, Address.pack(<span class="keyword">message</span>.getReplyTo()));</span><br><span class="line">    cv.put(<span class="string">"attachment_count"</span>, attachmentCount);</span><br><span class="line">    cv.put(<span class="string">"internal_date"</span>, <span class="keyword">message</span>.getInternalDate() == null</span><br><span class="line">            ? System.currentTimeMillis() : <span class="keyword">message</span>.getInternalDate().getTime());</span><br><span class="line">    cv.put(<span class="string">"mime_type"</span>, <span class="keyword">message</span>.getMimeType());</span><br><span class="line">    cv.put(<span class="string">"empty"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">String</span> messageId = <span class="keyword">message</span>.getMessageId();</span><br><span class="line">    <span class="keyword">if</span> (messageId != null) &#123;</span><br><span class="line">    cv.put(<span class="string">"message_id"</span>, messageId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (oldMessageId == -<span class="number">1</span>) &#123;</span><br><span class="line">    long msgId = db.insert(<span class="string">"messages"</span>, <span class="string">"uid"</span>, cv);</span><br><span class="line"></span><br><span class="line">    // Create entry in 'threads' table</span><br><span class="line">    cv.clear();</span><br><span class="line">    cv.put(<span class="string">"message_id"</span>, msgId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rootId != -<span class="number">1</span>) &#123;</span><br><span class="line">        cv.put(<span class="string">"root"</span>, rootId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parentId != -<span class="number">1</span>) &#123;</span><br><span class="line">        cv.put(<span class="string">"parent"</span>, parentId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    db.insert(<span class="string">"threads"</span>, null, cv);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    db.update(<span class="string">"messages"</span>, cv, <span class="string">"id = ?"</span>, new <span class="keyword">String</span>[] &#123; Long.toString(oldMessageId) &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="mime4j">mime4j</h3><p>开源项目mime4j是一个优秀的邮件内容解析、构建和处理库，它主要有两个特点：<br>    1.使用回调机制报告邮件解析事件的发生<br>    在解析过程中，当遇到开始和结束邮件头、邮件体等构成邮件元素的时候，mime4j会通过回调的方式对外发起调用，这种行为类似于SAX XML解析器，有效简化了邮件的解析和解析结果封装的实现。<br>    2.提高了对不规范邮件的兼容性<br>    mime4j对不规范邮件的兼容性达到了有Perl编写的邮件解析工具MIME:Tools的水平，二者在邮件解析结果的差别在0.5%，主要是在不规范垃圾邮件的解析上。</p>
<h2 id="添加用户的流程">添加用户的流程</h2><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/bindingaccount.png" alt="添加用户的流程"></p>
<p>当用户不存在或用户在<code>Activity AccountList</code>中点击bottombar的添加新用户时，会启用Intent打开<code>Activity AccountSetupBasic</code>进行用户信息的相关配置，先进行一遍邮件地址的解析工作，如果是常用的邮件域名（为名为<code>R.xml.providers</code>文件中的域名），则根据响应的配置调用finishAutoSetup()自动完成配置的工作，否则则需要手动配置邮件服务器的信息<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XmlResourceParser xml = getResources<span class="comment">()</span>.getXml<span class="comment">(R.xml.providers)</span>;</span><br></pre></td></tr></table></figure></p>
<p><code>R.xml.providers</code>文件中邮件配置的定义如下：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;provider <span class="variable">id=</span><span class="string">"gmail"</span> <span class="variable">label=</span><span class="string">"Gmail"</span> <span class="variable">domain=</span><span class="string">"gmail.com"</span>&gt;</span><br><span class="line">    &lt;incoming <span class="variable">uri=</span><span class="string">"imap+ssl+://imap.gmail.com"</span> <span class="variable">username=</span><span class="string">"$email"</span> /&gt;</span><br><span class="line">    &lt;outgoing <span class="variable">uri=</span><span class="string">"smtp+ssl+://smtp.gmail.com"</span> <span class="variable">username=</span><span class="string">"$email"</span> /&gt;</span><br><span class="line">&lt;/provider&gt;</span><br></pre></td></tr></table></figure></p>
<p>finishAutoSetup()方法如下：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">private void finishAutoSetup() &#123;</span><br><span class="line">        String <span class="variable">email =</span> mEmailView.getText().<span class="built_in">toString</span>();</span><br><span class="line">        String <span class="variable">password =</span> mPasswordView.getText().<span class="built_in">toString</span>();</span><br><span class="line">        String[] <span class="variable">emailParts =</span> splitEmail(email);</span><br><span class="line">        String <span class="variable">user =</span> emailParts[<span class="number">0</span>];</span><br><span class="line">        String <span class="variable">domain =</span> emailParts[<span class="number">1</span>];</span><br><span class="line">        try &#123;</span><br><span class="line">            String <span class="variable">userEnc =</span> UrlEncodingHelper.encodeUtf8(user);</span><br><span class="line">            String <span class="variable">passwordEnc =</span> UrlEncodingHelper.encodeUtf8(password);</span><br><span class="line"></span><br><span class="line">            String <span class="variable">incomingUsername =</span> mProvider.incomingUsernameTemplate;</span><br><span class="line">            <span class="variable">incomingUsername =</span> incomingUsername.replaceAll(<span class="string">"\\$email"</span>, email);</span><br><span class="line">            <span class="variable">incomingUsername =</span> incomingUsername.replaceAll(<span class="string">"\\$user"</span>, userEnc);</span><br><span class="line">            <span class="variable">incomingUsername =</span> incomingUsername.replaceAll(<span class="string">"\\$domain"</span>, domain);</span><br><span class="line"></span><br><span class="line">            URI <span class="variable">incomingUriTemplate =</span> mProvider.incomingUriTemplate;</span><br><span class="line">            URI <span class="variable">incomingUri =</span> new URI(incomingUriTemplate.getScheme(), incomingUsername + <span class="string">":"</span> + passwordEnc,</span><br><span class="line">                    incomingUriTemplate.getHost(), incomingUriTemplate.getPort(), <span class="constant">null</span>, <span class="constant">null</span>, <span class="constant">null</span>);</span><br><span class="line"></span><br><span class="line">            String <span class="variable">outgoingUsername =</span> mProvider.outgoingUsernameTemplate;</span><br><span class="line"></span><br><span class="line">            URI <span class="variable">outgoingUriTemplate =</span> mProvider.outgoingUriTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            URI outgoingUri;</span><br><span class="line"> 			<span class="keyword">if</span> (<span class="variable">mAccount =</span>= <span class="constant">null</span>) &#123;</span><br><span class="line">                <span class="variable">mAccount =</span> Preferences.getPreferences(this).newAccount();</span><br><span class="line">            &#125;</span><br><span class="line">            mAccount.setName(getOwnerName());</span><br><span class="line">            mAccount.setEmail(email);</span><br><span class="line">            mAccount.setStoreUri(incomingUri.<span class="built_in">toString</span>());</span><br><span class="line">            mAccount.setTransportUri(outgoingUri.<span class="built_in">toString</span>());</span><br><span class="line"></span><br><span class="line">            setupFolderNames(incomingUriTemplate.getHost().toLowerCase(Locale.US));</span><br><span class="line"></span><br><span class="line">            ServerSettings <span class="variable">incomingSettings =</span> RemoteStore.decodeStoreUri(incomingUri.<span class="built_in">toString</span>());</span><br><span class="line">            mAccount.setDeletePolicy(AccountCreator.getDefaultDeletePolicy(incomingSettings.type));</span><br><span class="line"></span><br><span class="line">            // Check incoming here.  Then check outgoing <span class="keyword">in</span> onActivityResult()</span><br><span class="line">            AccountSetupCheckSettings.actionCheckSettings(this, mAccount, CheckDirection.INCOMING);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>finishAutoSetup()的流程如下：</p>
<p>1.先搜寻默认的Provider <code>findProviderForDomain(domain)</code><br>2.然后根据模板信息用模板信息拼装<code>incomingUri</code>和<code>outgoingUri</code><br>3.并调用<code>Preferences.getPreferences(this).newAccount()</code>方法建立一个新的Account，并配置一些用户信息，并保存用于从远程获取邮件的StoreUri（<code>incomingUri</code>），和向远程发送邮件的TransportUri(outgoingUri）<br>4.配置填写完成后调用<code>Activity AccountSetupCheckSetting</code>进行配置信息的检查</p>
<p>之后传递Intent的EXTRA_ACCOUNT和EXTRA_CHECK_DIRECTION参数，打开<code>Activity AccountSetupCheckSetting</code>进行配置信息的检查<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">actionCheckSettings</span><span class="params">(Activity context, Account account,</span><br><span class="line">            CheckDirection direction)</span> </span>&#123;</span><br><span class="line">    Intent i = <span class="keyword">new</span> Intent(context, AccountSetupCheckSettings.<span class="keyword">class</span>);</span><br><span class="line">    i.putExtra(EXTRA_ACCOUNT, account.getUuid());</span><br><span class="line">    i.putExtra(EXTRA_CHECK_DIRECTION, direction);</span><br><span class="line">    context.startActivityForResult(i, ACTIVITY_REQUEST_CODE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行<code>execute()</code>开启一个新的AsyncTask<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CheckAccountTask(mAccount).<span class="keyword">execute</span>(mDirection);</span><br></pre></td></tr></table></figure></p>
<p>清理完错误的认证信息后，执行checkServerSettings()方法<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clearCertificateErrorNotifications<span class="list">(<span class="keyword">direction</span>)</span><span class="comment">;</span></span><br><span class="line">checkServerSettings<span class="list">(<span class="keyword">direction</span>)</span><span class="comment">;</span></span><br><span class="line">setResult<span class="list">(<span class="keyword">RESULT_OK</span>)</span><span class="comment">;</span></span><br><span class="line">finish<span class="list">()</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>checkServerSettings()方法进行服务器的获取发送测试<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (direction) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">INCOMING:</span> &#123;</span><br><span class="line">        checkIncoming();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">OUTGOING:</span> &#123;</span><br><span class="line">        checkOutgoing();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Activity AccountSetupBasic</code>通过Intent传递过来的<code>CheckDirection</code>参数是<code>INCOMING</code>,则进行获取邮件的测试<code>checkIncoming()</code>,<code>checkIncoming()</code>方法进行如下操作：<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Store</span> store = account.getRemoteStore<span class="literal">()</span></span><br><span class="line">publishProgress(<span class="type">R</span>.<span class="built_in">string</span>.account_setup_check_settings_check_incoming_msg);</span><br><span class="line">store.checkSettings<span class="literal">()</span>;</span><br><span class="line"><span class="type">MessagingController</span>.getInstance(getApplication<span class="literal">()</span>).listFoldersSynchronous(account, <span class="literal">true</span>, null);</span><br><span class="line"><span class="type">MessagingController</span>.getInstance(getApplication<span class="literal">()</span>).synchronizeMailbox(account, account.getInboxFolderName<span class="literal">()</span>, null, null);</span><br></pre></td></tr></table></figure></p>
<p>1.先根据<code>account</code>获取远程Store，如果RemoteStore不存在则异步创建一个Pop3Store，该类包含着该账户所需的所有远程储存信息，同时Activity加载等待动画<br>2.调用Pop3Store的checkSettings()方法配置Pop3Store<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pop3Folder</span> folder = <span class="keyword">new</span> <span class="type">Pop3Folder</span>(mStoreConfig.getInboxFolderName<span class="literal">()</span>);</span><br><span class="line">folder.<span class="keyword">open</span>(<span class="type">Folder</span>.<span class="type">OPEN_MODE_RW</span>);</span><br></pre></td></tr></table></figure></p>
<p>创建一个新的Pop3Folder，用这个Folder的<code>open()</code>方法与邮件服务器通信以及发送其他命令</p>
<p>3.打开一个线程调用<code>MessagingController</code>的<code>listFoldersSynchronous()</code>方法,该方法用于从邮件服务器中下载所有Folder，listFoldersSynchronous()`方法的主要流程如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Store <span class="built_in">local</span>Store = account.getLocalStore();</span><br><span class="line"><span class="built_in">local</span>Folders = <span class="built_in">local</span>Store.getPersonalNamespaces(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (refreshRemote || <span class="built_in">local</span>Folders.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">do</span>RefreshRemote(account, listener);</span><br><span class="line">    <span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先根据<code>Account</code>获取<code>LocalStore</code>,根据<code>LocalStore</code>获取<code>PersonalNamespaces</code>如果远程目录有新邮件或者本地文件夹为空，则执行<code>doRefreshRemote()</code>方法，<code>doRefreshRemote()</code>方法的主要流程如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> (Folder remoteFolder : remoteFolders) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">local</span>FolderNames.contains(remoteFolder.getName()) == <span class="literal">false</span>) &#123;</span><br><span class="line">        LocalFolder <span class="built_in">local</span>Folder = <span class="built_in">local</span>Store.getFolder(remoteFolder.getName());</span><br><span class="line">        foldersToCreate.add(<span class="built_in">local</span>Folder);</span><br><span class="line">    &#125;</span><br><span class="line">    remoteFolderNames.add(remoteFolder.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4.打开一个线程调用<code>MessagingController</code>的<code>synchronizeMailbox()方法，该方法用于从邮件服务器中同步收件箱，</code>synchronizeMailbox()方法在后台执行<code>synchronizeMailboxSynchronous()</code>方法，<code>synchronizeMailboxSynchronous()</code>方法通知监听器后调用<code>processPendingCommandsSynchronous()</code>方法先邮件服务器发送命令<code>getInboxFolderName()</code>获取账户文件夹的名字</p>
<h2 id="LocalStore数据库">LocalStore数据库</h2><p>K9 Mail在本地以email账号为单位，以UUID作为SQLite数据库名称，分别保存一个账号的文件夹（folders），邮件（messages），附件（attachment），邮件头信息（headers），提交到邮件服务器命令的栈（pending_commands），会话（邮件之间的关系threads），不同的账户有着各自的数据库</p>
<h3 id="打开数据库">打开数据库</h3><p>LockableDataBase类中定义了打开数据库的操作和避免读写出错的数据库锁，系统根据用户的UUID获取数据库文件的位置databaseFile，从<br>而找到数据库打开数据库文件</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">File</span> databaseFile = storageManager.getDatabase(uUid, providerId);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> doOpenOrCreateDb(<span class="keyword">final</span> <span class="keyword">File</span> databaseFile) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StorageManager.InternalStorageProvider.ID.equals(mStorageProviderId)) &#123;</span><br><span class="line">            <span class="comment">// internal storage</span></span><br><span class="line">            mDb = context.openOrCreateDatabase(databaseFile.getName(), Context.MODE_PRIVATE,</span><br><span class="line">                    <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// external storage</span></span><br><span class="line">            mDb = SQLiteDatabase.openOrCreateDatabase(databaseFile, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据库设计Schema">数据库设计Schema</h3><p>在新建数据库过程中LockableDataBase类根据StoreSchemaDefinition的数据库结构建立数据库表，同时升级软件版本是也根据Schema重新建立数据库表，db.getVersion()=29的Schema结构如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">db.execSQL("<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> folders (id <span class="built_in">INTEGER</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>, name <span class="built_in">TEXT</span>, <span class="string">"</span><br><span class="line">       + "</span>last_updated <span class="built_in">INTEGER</span>, unread_count <span class="built_in">INTEGER</span>, visible_limit <span class="built_in">INTEGER</span>, <span class="keyword">status</span> <span class="built_in">TEXT</span>, <span class="string">"</span><br><span class="line">       + "</span>push_state <span class="built_in">TEXT</span>, last_pushed <span class="built_in">INTEGER</span>, flagged_count <span class="built_in">INTEGER</span> <span class="keyword">default</span> <span class="number">0</span>, <span class="string">"</span><br><span class="line">       + "</span>integrate <span class="built_in">INTEGER</span>, top_group <span class="built_in">INTEGER</span>, poll_class <span class="built_in">TEXT</span>, push_class <span class="built_in">TEXT</span>, display_class <span class="built_in">TEXT</span>, notify_class <span class="built_in">TEXT</span><span class="string">"</span><br><span class="line">       + "</span>)<span class="string">");</span><br><span class="line"></span><br><span class="line">db.execSQL("</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> messages (<span class="string">" +</span><br><span class="line">        "</span>id <span class="built_in">INTEGER</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>, <span class="string">" +</span><br><span class="line">        "</span>deleted <span class="built_in">INTEGER</span> <span class="keyword">default</span> <span class="number">0</span>, <span class="string">" +</span><br><span class="line">        "</span>folder_id <span class="built_in">INTEGER</span>, <span class="string">" +</span><br><span class="line">        "</span>uid <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span>subject <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span><span class="built_in">date</span> <span class="built_in">INTEGER</span>, <span class="string">" +</span><br><span class="line">        "</span>flags <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span>sender_list <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span>to_list <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span>cc_list <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span>bcc_list <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span>reply_to_list <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span>attachment_count <span class="built_in">INTEGER</span>, <span class="string">" +</span><br><span class="line">        "</span>internal_date <span class="built_in">INTEGER</span>, <span class="string">" +</span><br><span class="line">        "</span>message_id <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span>preview <span class="built_in">TEXT</span>, <span class="string">" +</span><br><span class="line">        "</span>mime_type <span class="built_in">TEXT</span>, <span class="string">"+</span><br><span class="line">        "</span>normalized_subject_hash <span class="built_in">INTEGER</span>, <span class="string">" +</span><br><span class="line">        "</span>empty <span class="built_in">INTEGER</span>, <span class="string">" +</span><br><span class="line">        "</span><span class="keyword">read</span> <span class="built_in">INTEGER</span> <span class="keyword">default</span> <span class="number">0</span>, <span class="string">" +</span><br><span class="line">        "</span>flagged <span class="built_in">INTEGER</span> <span class="keyword">default</span> <span class="number">0</span>, <span class="string">" +</span><br><span class="line">        "</span>answered <span class="built_in">INTEGER</span> <span class="keyword">default</span> <span class="number">0</span>, <span class="string">" +</span><br><span class="line">        "</span>forwarded <span class="built_in">INTEGER</span> <span class="keyword">default</span> <span class="number">0</span>, <span class="string">" +</span><br><span class="line">        "</span>message_part_id <span class="built_in">INTEGER</span><span class="string">" +</span><br><span class="line">        "</span>)<span class="string">");</span></span></span><br></pre></td></tr></table></figure>
<p><img src="http://7nar5o.com1.z0.glb.clouddn.com/scheme.png" alt="数据库scheme"></p>
<h4 id="Folders表">Folders表</h4><p>该表存放了当前账户所有的文件夹，该表以ID为主键，在name字段建立了索引，包括“文件夹设置”中的所有选项、显示（diaplay_class）、同步（poll_class）和推送（push_class）级别，k9mail支持<code>NONE NO_CLASS INHERITED FIRST_CLASS</code>、同步的时间(last_pushed)，是否将该文件夹下的邮件整合到全局收件箱（integrate），以及标星数</p>
<p>字段top_group按照数字等级说明一个文件夹是否是“收件箱、垃圾箱、草稿箱、归档文件夹、发件箱、反垃圾邮件箱、已发送文件夹、错误文件夹”其中之一并且设置为置顶文件夹</p>
<h4 id="Messages表">Messages表</h4><p>该表保存了一份邮件除了附件（保存在attachments之中）及头信息（保存在headers之中）的所有信息，每封邮件都在表中对应了一条记录，字段id为主键，在表上建立了如下索引：<br>    1.在字段uid和folder_id上建立了索引msg_uid<br>    2.在字段folder_id、delect和internal_data建立了索引msg_folder_id_delect_data<br>    3.在字段empty上建立了索引msg_empty<br>    4.在字段read上建立了索引msg_read<br>    5.在字段flagger上建立了索引msg_flagged</p>
<p>字段flag是邮件的标识与服务器端保持一致，标识的值包括：<code>DELETED SEEN FLAGGED ANSWERED FORWARDED</code>等，字段<code>deleted flagged answered forwarded</code>与字段flag的标识相对应，字段<code>read</code>则对应着标识<code>SEEN</code>，用于标识flag是否存在对应的标识，类型为INTEGER，<code>0：存在；1：不存在</code>，默认值为0</p>
<p>字段empty表明邮件是否为空，<code>0:邮件非空；1：空</code>；attachment_account表明一个邮件附件的总数目，对应<code>LocalMessage</code>类的属性<code>mAttachmentAccount</code></p>
<h4 id="表message_parts">表message_parts</h4><p>表message_parts包括除了message表外的所有信息，在schema version 29中k9mail将表attachments和表header整合到表message_parts之中</p>
<h5 id="表attachments">表attachments</h5><p>该表以id字段为主键，储存着邮件的附件信息，通过字段<code>message_id</code>对应着响应的Message，该表的每条字段关联着一个附件文件的链接，通过<code>content_url</code>从本地保存中获取到附件文件</p>
<p>字段store_data保存着字符串类型的Android邮件头信息；字段<code>content_disposition</code>保存着邮件头信息中<code>Content_Disposition</code>的值，通过该字段可以获取附件的相关数据</p>
<h5 id="表header">表header</h5><p>该表以id为主键，保存着邮件的头信息，与Attachment相似，一封邮件可以在该表中存在多条记录，字段<code>name``value</code>以键值对key-value的方式保存着头信息中的所有字段，在字段<code>message_id</code>上建立了索引<code>header_folder</code></p>
<h4 id="表threads">表threads</h4><p>该表以id为主键，为客户端提供了邮件会话支持的功能，按顺序保存着一个会话中邮件的关系，该表的索引有：<br>1.在字段<code>message_id</code>上建立了索引<code>threads_message_id</code><br>2.在字段<code>root</code>上建立了索引<code>threads_root</code><br>3.在字段<code>parent</code>上建立了索引<code>threads_parent</code></p>
<p>k9 mail使用了LocalStore内部类ThreadInfo作为threads的实体类，ThreadInfo中的属性threadId对应着该表之中的Id字段</p>
<h4 id="表pending_command">表pending_command</h4><p>该表以id为主键，保存着提交到服务器的命令队列，其作用是保证这些命令不会丢失，防止客户端发生意外或意外退出时而导致命令丢失的情况发生，保证客户端与服务器端数据的一致性，字段Argements中保存着命令参数</p>
<h3 id="触发器">触发器</h3><p>SQLite触发器可以在执行完一段特定的数据库更改后，触发完成后续的数据库操作，避免了开发专门的数据库代码<br>1.触发器set_thread_root<br>该触发器thread表，在该表中新增一条计入后,对新增的的记录设置root字段的值为id的值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.execSQL("<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> set_thread_root <span class="string">" +</span><br><span class="line">    "</span><span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> threads <span class="string">" +</span><br><span class="line">    "</span><span class="keyword">BEGIN</span> <span class="string">" +</span><br><span class="line">    "</span><span class="keyword">UPDATE</span> threads <span class="keyword">SET</span> root=id <span class="keyword">WHERE</span> root <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">AND</span> ROWID = NEW.ROWID;</span> " +</span><br><span class="line">    "<span class="operator"><span class="keyword">END</span><span class="string">");</span></span></span><br></pre></td></tr></table></figure></p>
<p>2.触发器delete_folder<br>该触发器作用于message表，在从folder表中删除记录前起作用，在从folder中删除记录前先将message表中属于待删除的文件夹的所有邮件自动删除<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.execSQL("<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> delete_folder<span class="string">" +</span><br><span class="line">	"</span><span class="keyword">BEFORE</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> folders<span class="string">" +</span><br><span class="line">	"</span><span class="keyword">BEGIN</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> messages <span class="keyword">WHERE</span> old.id = folder_id;</span>" +</span><br><span class="line">	"<span class="operator"><span class="keyword">END</span>;</span>");</span><br></pre></td></tr></table></figure></p>
<p>3.触发器delete_message<br>该触发器作用于message表和hearder表（message_parts表），在从从messages表中删除记录前起作用，用于自动删除邮件的附件头信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.execSQL("<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> delete_message <span class="string">" +</span><br><span class="line">   "</span><span class="keyword">BEFORE</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> messages <span class="string">" +</span><br><span class="line">   "</span><span class="keyword">BEGIN</span> <span class="string">" +</span><br><span class="line">   "</span><span class="keyword">DELETE</span> <span class="keyword">FROM</span> message_parts <span class="keyword">WHERE</span> root = OLD.message_part_id;</span>" +</span><br><span class="line">   "<span class="operator"><span class="keyword">END</span><span class="string">");</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="操作数据库">操作数据库</h3><p>LocalStore是唯一对外公开操作数据库的类，其内部包括9个内部类、1个接口，以邮件、文件夹为核心，提供了以面向对象方式围绕邮件和文件夹的一系列操作，包括向数据表插入新的数据，删除数据，更新数据库，获取数据等方法，k9 mail为不同的内部类设计了基类，即把不同的实体封装成为不同的类，又减少了代码的重复。</p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：K-9 Mail是Android平台上使用Java语言开发的专业的开源邮件客户端，系统设计、代码实现、注释良好，支持MS Exchange Server，邮件会话和推送，有着健壮的开发者社区，本文分析其技术架构以及主要的代码实现以便打包成库供后期开发使用。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://masukio.tk/tags/Android/"/>
    
      <category term="K-9 Mail" scheme="http://masukio.tk/tags/K-9-Mail/"/>
    
      <category term="Cicada" scheme="http://masukio.tk/categories/Cicada/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Cicada#001：Introduction]]></title>
    <link href="http://masukio.tk/2015/07/11/Cicada-001/"/>
    <id>http://masukio.tk/2015/07/11/Cicada-001/</id>
    <published>2015-07-11T07:45:54.000Z</published>
    <updated>2015-08-15T09:32:32.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：Cicada中文名「蝉」，是我的第一款Android应用，它是基于开源软件K-9 Mail库开发的TO-DO应用，它的特点在于其基于E-Mail协议，支持跨平台，无需注册即可实现任务的共享，即使没有安装APP，也可以通过邮件来实现大部分功能。本篇为概览，介绍软件的实现的功能，系统架构，UI及交互。<br><a id="more"></a><br><img src="http://7nar5o.com1.z0.glb.clouddn.com/Cidaca.PNG" alt=""></p>
<h1 id="清单">清单</h1><p>很多人显然意识到了「一个脑子记不过来」这一惨痛的事实，开始寻求一些解决之道，于是开始接触时间管理、GTD 等概念。然而，这些概念要不过于复杂，不适用于自己的实际生活，要么过于理论，很难套用到具体的行为中去。</p>
<p>而清单则是一个恰到好处的解决方案。一方面，清单充当了思维导图的角色，但你把不同的事项分别存放在不同的清单列表中，实际上已经是对这些事项的第一次梳理，明确了大致分类，方便对自己的日程和时间作出具体的分配和规划。另一方面，清单可以督促我们的行动。很多实验都已经证明了，无论你有没有强迫症，在清单上留有尚待完成的事项，都会激发一个人的行动欲，提高我们的办事效率。</p>
<h1 id="TO-DO应用">TO-DO应用</h1><p>Android平台上已经有不少TO-DO类应用，例如大名鼎鼎的 OmniFocus、Things,TO-DO和最近很火的 Wunderlist 都是众多 Power User 的必备。</p>
<h2 id="弃之不用">弃之不用</h2><p>其中GTD 老牌软件 OmniFocus、Things，你可以为每个事项设定不同的情景，关联不同的人物，在不同的透视下查看，当然，如果你每天都有上百个待办事项，OmniFocus 才是你唯一正确的选择。然而对于我们一般人，这些过于简单或复杂的设定，其实并不适用于大多数人的普通生活。</p>
<h2 id="奇妙清单">奇妙清单</h2><p>「奇妙清单」接近我理想中的清单软件，我也一直将其作为日常生产力软件在使用，它没有复杂的情景设置，也没有任务的无限层级，事实上，从推出到现在，整体的设计和使用理念都没有发生过重大的改变。层级只有「清单 - 事项 - 子任务」三级，它只支持设置到期时间和一次提醒，可以对优先级高的任务打上星标，一款无所不能的 App，往往大多数人会因为学习成本过高而放弃。但「奇妙清单」非常巧妙地把握了这个平衡，在使用时一切功能都恰到好处。</p>
<h2 id="Cicada优点">Cicada优点</h2><pre><code><span class="number">1</span>.不是每个人都是Wunderlist「奇妙清单」的用户，但每个人都有电子邮箱，
  Cicada基于用户现有的邮箱系统即可实现，任务的存储，分享，通过电子邮箱自动导入关系链
<span class="number">2</span>.「奇妙清单」缺少聚合清单的清单流，导致有的事项容易错过，
  而Cicada通过算法进行重要性和任务周期进行事项的颜色标记和智能排序，
    优先安排重要度-周期比高的任务和紧急任务
<span class="number">3</span>.分布式加<span class="keyword">Group</span>，可以通过清单ID或二维码加入清单而不用一个一个的添加，例如办公室同事或同班同学清单
<span class="number">4</span>.没有客户端也可以使用，跨平台
<span class="number">5</span>.利用邮件的文件传输功能实现文件传输
</code></pre><h1 id="实现目标">实现目标</h1><pre><code><span class="number">1</span>.实现个人事项的参加，持久化与云同步
<span class="number">2</span>.支持事项的分类、检索与锁定（PIN）
<span class="number">3</span>.支持基于邮件协议的事项分享
<span class="number">4</span>.支持创建、加入清单群（Group），群二维码的生成
<span class="number">5</span>.对邮件内容进行封装，即使在邮件客户端中也能够有良好的阅读体验
<span class="number">6</span><span class="class">.Material</span> Design化,并使用Design Support Library向下兼容至Android V2.<span class="number">1</span>
<span class="number">7</span><span class="class">.Private</span> List专属隐私列表，并使用PIN码保护
<span class="number">8</span>.直接解析E-Mail中的联系人，并创建联系人列表
<span class="number">9</span>.过期事项自动存档至回收箱中
<span class="number">10</span>.任务按紧急程度，事项结束日期，持续时间自动排序
<span class="number">11</span>.联系人的管理、分组，消息的接收、退出机制
<span class="number">12</span>.邮件内容的解析，封装与呈现
</code></pre><h1 id="系统构建">系统构建</h1><h2 id="电子邮件系统">电子邮件系统</h2><h3 id="原因">原因</h3><pre><code>1.Cicada使用电子邮件系统进行事项的分享，而无需搭建自己的服务器后台
2.使用互联网分布式的邮件系统可以将事项发布给地球上的任何人，而不用担心其是否安装客户端
3.电子邮件自带用户关系链，可以直接导入邮箱联系人
4.用户使用现有系统而无需使用一项新服务
5.邮件格式适合于群发，群组讨论
6.与平台无关，电子邮件是一个跨平台的数据协议
7.电子邮件适合长周期重要的事件，事项是对将来事件的计划无需实现即时通讯
</code></pre><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/Table.PNG" alt="I/T Rate"></p>
<h3 id="底层实现">底层实现</h3><p>Cicada使用K-9 Mail作为底层框架，支持SMTP/POP3/IMAP，即使团队成员没有使用客户端也可以发布待办任务和查看推送的代办事项</p>
<h4 id="获取待办事项">获取待办事项</h4><p>Cicada通过搜索邮件特定邮件解析成XML数据格式通过Adapter绑定到RecyclerView上实现将邮件解析成可操作的数据，可以实现任务的紧急的排序，任务的搜索，加入tag，时间提醒，代办实现的广播等操作</p>
<h4 id="共享代办事项">共享代办事项</h4><p>Cicada通过解析器将事项信息封装成HTML格式的邮件，通过邮件服务器发到各成员的邮箱，如果有安装客户端则用客户端进行解析，否则则按照正常邮件存在。</p>
<h2 id="类MVC模型">类MVC模型</h2><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/业务逻辑.PNG" alt="MVC模型"><br>MVC模式（Model-View-Controller）将软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）</p>
<p>MVC模式的目的是实现一种动态的程序设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式通过对复杂度的简化，使程序结构更加直观。软件系统通过对自身基本部分分离的同时也赋予了各个基本部分应有的功能：</p>
<pre><code>（控制器 Controller）-负责转发请求，对请求进行处理
（视图 <span class="keyword">View</span>）-图形界面设计
（模型 Model） -数据库数据管理和数据库设计
</code></pre><p>Cicada将业务逻辑打包为Model，UI层设计使用Material Design进行呈现，Controller通过Activity，Service，Broadcast 和 Receiver 等等机制将用户请求转向Model层</p>
<h3 id="View层">View层</h3><p>View层是采用XML文件进行界面的描述，包括各种界面组件、动画、交互的设计，分辨率、语言支持，UI遵循Material Design<br><img src="http://7nar5o.com1.z0.glb.clouddn.com/cicada002.png" alt=""></p>
<h3 id="Controller层">Controller层</h3><p>Android的控制层的重任通常落在了众多的Acitvity的肩上，这句话也就暗含了不要在Acitivity中写代码，Acitivity负责对UI进行控制，要通过Activity交割Model业务逻辑层处理，这样做的另外一个原因是Android中的Acitivity的响应时间是5s，如果耗时的操作放在这里，程序就很容易被回收掉，Controller可以通过Activity，Service，Broadcast 和 Receiver 等等机制将用户请求转向Model层</p>
<h3 id="Model层">Model层</h3><p>Model层用于对数据库的操作、对网络等的操作，Cicada的Model层包括K-9Mail库，包括TCP，Socket连接管理，邮件数据的封装，数据库的操作，IMAP服务器响应类，搜索功能及添加的数据解析模块，Group用户模块，响应来自Controller的请求</p>
<h1 id="交互设计">交互设计</h1><h2 id="完成任务">完成任务</h2><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/done.PNG" alt="完成任务"><br>当任务的时间到达TimeLine后，这个任务会从主清单中消失，消失过程为该TextView由长方形缩小为一个逐渐缩小旋转着的的圆，最后消失</p>
<p>用户可以选择Doned该任务，长按改TextView，这个Item会Float起来，阴影范围扩大，此时处于可上下移动的状态，若移动下边的Item会跑上来以便改Item的插入，等待5000ms，若Item不发生移动，着产生水波的动画，将Item标绿然后消失</p>
<h2 id="新建任务">新建任务</h2><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/new.PNG" alt="新建任务"><br>用户点击FAB，由FAB的位置出现黄色水波填充整个长方形最后出现整个新建任务的Activity，该层下方的区域为不可编辑状态，FAB变为分享状态，点击后编辑区域向上滑动，下方出现添加分享人的区域，可以输入邮箱地址或用户名进行添加，添加分享人时，右边的Button为Add，若为空则该按钮变为Done，点击Done则新建任务界面打钩变绿，向下滑出，返回主清单列表，任务出现动画与消失时相反</p>
<h2 id="查看详细任务">查看详细任务</h2><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/scale.PNG" alt="查看详细任务"><br>点击该Item，改Item向四周展开覆盖全页，同时底部Item消失，同时处于可编辑状态，点击Back Button这返回</p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：Cicada中文名「蝉」，是我的第一款Android应用，它是基于开源软件K-9 Mail库开发的TO-DO应用，它的特点在于其基于E-Mail协议，支持跨平台，无需注册即可实现任务的共享，即使没有安装APP，也可以通过邮件来实现大部分功能。本篇为概览，介绍软件的实现的功能，系统架构，UI及交互。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://masukio.tk/tags/Android/"/>
    
      <category term="交互" scheme="http://masukio.tk/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="架构" scheme="http://masukio.tk/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="Cicada" scheme="http://masukio.tk/categories/Cicada/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[定制Android 5.x下Chrome的App Bar颜色]]></title>
    <link href="http://masukio.tk/2015/07/11/Chrome-APP-Bar/"/>
    <id>http://masukio.tk/2015/07/11/Chrome-APP-Bar/</id>
    <published>2015-07-11T02:43:11.000Z</published>
    <updated>2015-07-11T03:34:35.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：在 Android 5.0 中, 原先的最近任务(Recents)界面被概览(Overview)界面替换了,同时新的 Chrome 支持通过读取网页的某个HTML标签来改变 Overview 界面里 App Bar  的颜色，同时影响了 Chrome 内的<code>toolbar/statusbar</code>颜色。<br><a id="more"></a></p>
<h1 id="Overview">Overview</h1><p>Overview是Android 4.0时代提供的API，overview screen通常也指最近画面，最近任务表，或者是最近app，它是一个显示最近使用的activitys和tasks的系统级UI。用户可以通过它进行应用导航，或者是选择一个task进行resume，当然也可以将一个task或者是activity从该列表中移除，通常一个activity里面会包含多个事件，故一个Activity中会有多个文件（document）以task的形式出现在overview screen中</p>
<p><img src="http://www.phonekr.com/wp-content/uploads/2014/12/2014-12-12-03.33.29_framed.png" alt=""></p>
<p>在 Android L 中，系统将直接开启 Overview（概览）菜单，该页面不仅显示最近使用的应用程序，还包括浏览器标签，用户可以直接进入某一个特定标签，而无需打开浏览器再来选择标签，</p>
<h2 id="Overview_对比_Recent">Overview 对比 Recent</h2><p>1.Android 5.0 的 Material Design 引入了深度的的感念，通过纸张在background上阴影范围的改变，表现出纸张在Z轴上的深度，纸与纸之间在Z轴空间上可以产生重叠，在Overview中通过字的层叠可以展现出更多的内容。</p>
<p>2.Overview中卡片的App Bar可以跟随应用改变颜色增加了应用的识别度. 而 4.X Recents 界面里的缩略图识别度其实很低, 的大部分时候还是要靠图标和标题。</p>
<p>3.在 5.0 中, 卡片的存在使得整个多任务列表可以被拉到屏幕2/3高度,最上面的一张卡片可以触及的范围甚至达到了屏幕的下半部分,可以直接单手触到</p>
<h2 id="新特性">新特性</h2><p>1.同时在 5.0 中, Document UI 允许一个应用同时显示多个界面在 Overview 中 (如 Chrome 的多个标签页),如下图：Google Drive 中多个 document 组成一个task呈现在 overview screen中</p>
<p><img src="http://img.blog.csdn.net/20150218120906042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGxwMTk5Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>2.新的 Chrome 和 Chrome Beta 都支持通过读取网页的某个 HTML 标签来改变 Overview 界面里 App Bar 的颜色，这对于增加网页/Web App 的辨识度而言产生了极大的帮助</p>
<p>3, 如果你细心的话, 会注意到知乎 Alpha 和 Google Wallet 在 Overview 里显示的图标和他们的应用图标不一样. 这就是 Overview 的一个新特性, 我们可以自定义显示在 Overview 里的图标</p>
<p>4.可以修改在 Overview 中显示不同的 Title —— 比如说,在知乎中 当你在阅读答案时, 进入 Overview 界面, 知乎显示的标题就是 回答, 如果你在某个人的个人主页,那么在 Overview 里知乎的标题就是这个人的名字</p>
<h1 id="修改网页App_Bar颜色">修改网页App Bar颜色</h1><p>只要满足以下条件，即可定义 Overview App Bar 颜色，同时也影响了 Chrome 内的 toolbar / statusbar 颜色。</p>
<pre><code>1.系统要求 Android 5.0 以上
2.未开启“合并标签页和应用” 的 Chrome 39 以上
3.在网站<span class="tag">&lt;<span class="title">head</span>&gt;</span>中添加自定义主题颜色<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"theme-color"</span> <span class="attribute">content</span>=<span class="value">"#262a30"</span>&gt;</span>
</code></pre><p><img src="http://engineering-blog-2bab.qiniudn.com/theme-color-others.jpg" alt=""></p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：在 Android 5.0 中, 原先的最近任务(Recents)界面被概览(Overview)界面替换了,同时新的 Chrome 支持通过读取网页的某个HTML标签来改变 Overview 界面里 App Bar  的颜色，同时影响了 Chrome 内的<code>toolbar/statusbar</code>颜色。<br>]]>
    
    </summary>
    
      <category term="App Bar" scheme="http://masukio.tk/tags/App-Bar/"/>
    
      <category term="Color" scheme="http://masukio.tk/tags/Color/"/>
    
      <category term="前端设计" scheme="http://masukio.tk/categories/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发新技能]]></title>
    <link href="http://masukio.tk/2015/07/10/Android-Lasted-Technology/"/>
    <id>http://masukio.tk/2015/07/10/Android-Lasted-Technology/</id>
    <published>2015-07-10T12:26:02.000Z</published>
    <updated>2015-07-10T13:01:35.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：从Google发布Android 1.5（Cupcake 纸杯蛋糕）已经7年过去了，当初Geek们的玩具已经成为大众消费产品的一员，移动应用的开发已成为不可阻挡的趋势，那么近些年来Android开发又有哪些新的技术出现，这些改变会给我们的开发带了怎样的便利？<br><a id="more"></a></p>
<blockquote>
<p>知乎吴晶的回答：<br><a href="http://www.zhihu.com/question/32037895/answer/54486823" target="_blank" rel="external">http://www.zhihu.com/question/32037895/answer/54486823</a></p>
</blockquote>
<h1 id="开发工具">开发工具</h1><h2 id="Android_Studio">Android Studio</h2><p>Google 官方放弃 Eclipse 和 Android Studio 普及。AS 虽然不算新，但是对 Android Studio 这个软件的更新速度快的惊人，有大量的新功能发布。例如支持很多注解代码提示注解、Live code template、支持自动生成 Parcelable 实现等等，作为开发者，持续关注这个更新列表 <a href="http://tools.android.com/recent" target="_blank" rel="external">Recent Changes</a> ，一定会让你的写代码的生活更加美好。</p>
<hr>
<h1 id="编程“语言”">编程“语言”</h1><h2 id="Kotlin">Kotlin</h2><p>作为 Android 领域的 Swift，绝对让你如沐新风。抛弃沉重的 Java 语法，Kotlin 融入了很多现代编程语言的思想，作为开发者，接受新的语言，了解新语言的发展趋势，更有利于开阔你的思路和加深对语言的理解。在 Android 开发上，使用 Kotlin 并不会让你付出什么代价，为什么不来试试？<br><a href="http://ragnraok.github.io/using-kotlin-to-write-android-app.html" target="_blank" rel="external">使用Kotlin进行Android开发</a></p>
<h2 id="React_Native">React Native</h2><p>跨平台一直是程序员的梦想，而且移动应用的跨平台解决方案也很多，因为 Facebook 的参与和力推，让这个解决方案带上了光环。第一个用 React Native 开发的 App 已经在 Google Play 上架 <a href="https://play.google.com/store/apps/details?id=com.facebook.adsmanager" target="_blank" rel="external">Facebook 广告管理工具</a>，听说 Android 的 SDK 也马上会到来，<a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a>。<br>Sky: 与 React Native 类似，使用 Web 开发语言来做移动平台的开发，虽然这个只是一个尝试，但是这是 Google 自身推出的，特别是在 Java 语言的使用上败诉之后，这可能会有一些作为呢?<br><a href="https://github.com/domokit/sky_sdk" target="_blank" rel="external">domokit/sky_sdk · GitHub</a></p>
<hr>
<h1 id="开发模式">开发模式</h1><p>Dagger 2：依赖注入并不是什么新技术，但是使用在 Android 确实一个新的尝试。Android App 越来越被当成严肃的大型项目来构建，很多在以前大型服务器开发上使用的技术都被应用到了移动开发。Android 开发分模块开发，使用 Dagger 来松耦合模块。特别值得一体的是，Dagger 2 现在由 Google 亲自接管。<br><a href="http://google.github.io/dagger/" target="_blank" rel="external">Dagger ‡ A fast dependency injector for Android and Java</a></p>
<h2 id="MVP">MVP</h2><p>因为 Android 并没有严格的业务和界面区分，项目一复杂，就很容易使代码陷入混乱。现在 Android 开发社区对 MVP 模式讨论越来越热，觉得 MVP 是非常适合 Android APP 开发。<a href="http://antonioleiva.com/mvp-android/" target="_blank" rel="external">MVP for Android: how to organize the presentation layer</a></p>
<h2 id="RxAndroid">RxAndroid</h2><p>函数响应式编程（Functional Reactive Programming）也不是新内容，RxAndroid 把 RxJava 带到 Android 环境中。很多时候，编写 Android 程序，你也可以看成是数据的处理和流动，换一种思想编程，曾经看起来很棘手的问题，瞬间就很优雅的解决了：<a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">ReactiveX/RxAndroid · GitHub</a></p>
<h2 id="MVVM">MVVM</h2><p>这是因为开始官方支持 DataBinding，把 MVVM 直接带到 Android 中。数据绑定在 Windows WPF 和 Web 已经非常常见，它非常高效的开发效率，让你只关心你的数据和业务。这也对 Android 开发来说，无疑是一个非常重大的影响：<a href="http://www.zhihu.com/question/30976423/answer/50224601" target="_blank" rel="external">android UI设计MVVM设计模式讨论？ - M.A.G.I 的回答</a></p>
<h2 id="插件化">插件化</h2><p>针对大型 Android 项目，很多 App 开始使用插件来分模块构建相对独立的功能。<br>Hybrid：完全使用 HTML 5 开发 App，目前还不成熟。但是折中方案在很多情况下是非常适合的，典型的就是微信，大部分信息展示都是通过 H5 来完成，同时通过 Hybird 方式，把 Web 和 Native 打通，提供给网页访问本地资源的能力。</p>
<hr>
<h1 id="UI设计">UI设计</h1><h2 id="Material_Design">Material Design</h2><p>已经红遍了大江南北，这方面的讨论实在太多了，而且各种支持库都有了，特别是 Google 官方出了一个支持库 [Android Design Support Library}(<a href="http://android-developers.blogspot.hk/2015/05/android-design-support-library.html)。" target="_blank" rel="external">http://android-developers.blogspot.hk/2015/05/android-design-support-library.html)。</a></p>
<h2 id="Sketch_3">Sketch 3</h2><p>这是一个专为设计移动端 UI 的设计工具，作为开发者，不用懂那么复杂的 PS 使用，也可以做非常专业设计：<a href="https://designcode.io/sketch" target="_blank" rel="external">https://designcode.io/sketch</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：从Google发布Android 1.5（Cupcake 纸杯蛋糕）已经7年过去了，当初Geek们的玩具已经成为大众消费产品的一员，移动应用的开发已成为不可阻挡的趋势，那么近些年来Android开发又有哪些新的技术出现，这些改变会给我们的开发带了怎样的便利？<br>]]>
    
    </summary>
    
      <category term="Android学习笔记" scheme="http://masukio.tk/categories/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Openwrt文件系统]]></title>
    <link href="http://masukio.tk/2015/07/10/Openwrt-File-System/"/>
    <id>http://masukio.tk/2015/07/10/Openwrt-File-System/</id>
    <published>2015-07-10T07:09:31.000Z</published>
    <updated>2015-07-11T02:22:11.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：Openwrt使用的是mini_fo文件系统，从用户的角度看，会觉得整个文件系统都是可写的，用户可以任意增加删减修改，这种文件系统可以认为是squash fs和jffs2的文件系统上实现了一个符号连接，如果用户读取只读文件，则链接到squash文件系统，如果对只读文件进行修改，将修改的文件放到Jffs2文件系统上，并修改链接。<br><a id="more"></a></p>
<h1 id="系统结构">系统结构</h1><p>Openwrt进行首次启动时会格式化了它的”可写”分区。那么在设备里分区到底是怎么样进行的呢？我们首先需要知道：不同的处理器下Openwrt分区是略微有所区别，不是所有的分区都完全相同的。在路由器的FLASH上，内核中所使用的驱动是MTD设备驱动。</p>
<p>MTD（Memory Technology Devices，内存技术设备）是用于访问内存类设备(ROM、FLASH)的Linux驱动子系统。它的主要目的使FLASH类设备更加容易被访问，为此它在硬件和上层提供了一个抽象的接口，使得在操作系统下我们可以像操作硬盘一样操作这个设备。Linux启动信息看到这么一段话：</p>
<pre><code>[ <span class="number">0.690000</span>] <span class="number">5</span> <span class="atom">tp</span>-<span class="atom">link</span> <span class="atom">partitions</span> <span class="atom">found</span> <span class="atom">on</span> <span class="name">MTD</span> <span class="atom">device</span> <span class="atom">spi0</span>.0
[ <span class="number">0.700000</span>] <span class="name">Creating</span> <span class="number">5</span> <span class="name">MTD</span> <span class="atom">partitions</span> <span class="atom">on</span> <span class="string">"spi0.0"</span>:
[ <span class="number">0.700000</span>] <span class="number">0x000000000000</span>-<span class="number">0x000000020000</span> : <span class="string">"u-boot"</span>
[ <span class="number">0.710000</span>] <span class="number">0x000000020000</span>-<span class="number">0x00000012a290</span> : <span class="string">"kernel"</span>
[ <span class="number">0.730000</span>] <span class="number">0x00000012a290</span>-<span class="number">0x0000007f0000</span> : <span class="string">"rootfs"</span>
[ <span class="number">0.760000</span>] <span class="number">0x000000300000</span>-<span class="number">0x0000007f0000</span> : <span class="string">"rootfs_data"</span>
[ <span class="number">0.760000</span>] <span class="number">0x0000007f0000</span>-<span class="number">0x000000800000</span> : <span class="string">"art"</span>
[ <span class="number">0.770000</span>] <span class="number">0x000000020000</span>-<span class="number">0x0000007f0000</span> : <span class="string">"firmware"</span>
</code></pre><p>这些信息表示当前系统识别到的FLASH分区。我们可以用电脑中的计算器计算一下，打开计算器，选择科学型、十六进制，输入名为art的分区容量用(800000-7f0000)结果为10000(十六进制)，这个时候点击十进制，系统会自动将结果转换为十进制，再除以1024结果为64(K)表示这个分区容量为64k。在openwrt的系统中现在对atheros方案实现了自动查找分区结尾。</p>
<p>上面的几个分区，我来说明下（分区名称、分区容量、分区作用）：</p>
<pre><code><span class="string">"u-boot"</span>：<span class="number">128</span>KB，设备初始化程序+引导程序代码本身
<span class="string">"kernel"</span> ：<span class="number">1</span>MB，存放系统内核的二进制代码，按照x86下的讲法是<span class="keyword">Raw</span>分区，就是这里只有内核的二进制，不存在文件系统。
<span class="string">"rootfs"</span>：<span class="number">6.7</span>MB，完整的系统文件包含只读和可写
<span class="string">"rootfs_data"</span>：<span class="number">4.9</span>MB，在rootfs中的可写部分的位置
<span class="string">"art"</span>：<span class="number">64</span>KB，EEPROM分区，在Atheros的方案中这个分区保存了无线的硬件参数
<span class="string">"firmware"</span>：<span class="number">7.9</span>MB，完整的固件位置包含了除<span class="string">"u-boot"</span>和<span class="string">"art"</span>之外全部的内容
</code></pre><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/filesys.PNG" alt=""></p>
<hr>
<h1 id="mini_fo文件系统">mini_fo文件系统</h1><p>在传统的嵌入式Linux里，固件是静态的，对系统做任何一点与可运行程序相关的变动，比如增加一个模块，删除一个应用程序，都要重新编译全部固件，并重新刷写，就好比你一个Android手机要升级程序就要重新刷机。这种反人类的传统文件系统完全阻挡了非专业爱好者进入嵌入式Linux这一领域。</p>
<p>Openwrt采用的是mini_fo文件系统文件系统，Openwrt启动之后，Linux内核加载squash文件系统，是只读的； openwrt在初始化时，会以mini_fo的文件系统类型重新Mount整个文件系统，整个过程在/etc/preinit/的脚本中实现，有一行代码实现：</p>
<pre><code><span class="title">mount</span> -t mini_fo -o base=/,sto=<span class="variable">$1</span> “mini_fo:<span class="variable">$1</span>” /mnt <span class="number">2</span>&gt;&amp;- &amp;&amp; root=/mnt
</code></pre><p>jffs2文件系统格式适合于断电系统，不像FAT那样容易丢失文件，官方的jffs2格式刷到路由器就是一个jffs2分区，ROM本身和以后安装的软件都在这个区里可以读写；</p>
<p>squashfs是把rom压缩到一个文件刷进路由器，然后剩下的空间格式化成jffs2并且优于ROM文件，rom的只读分区挂载到/rom下，另一个读写jffs2分区挂到/overlay,当两个目录下有同名文件就优先读这个，相当于覆盖了rom文件，实际并没有覆盖，这种情况的优点是rom压缩率高，可写分区就大一些，其次只要备份/overlay就可以把rom以为的所有文件备份下来，以后可以全部还原不用配置了，格式化/overlay分区就相当于恢复Openwrt出厂设置了；</p>
<p>官方推荐squafs，因为这种格式就算配置乱了还可以恢复刷机后的出厂设置，二是压缩后节省空间。jffs2格式搞乱了就只能重刷了；</p>
<h1 id="squashfs和jffs2">squashfs和jffs2</h1><p>官方下载的都分jffs2和squafs两种格式</p>
<p>squashfs和jffs2区别是，squashfs本身会占用1M空间存放系统必要的文件，并且这些文件是只读的，当系统损坏时，可以执行firstboot恢复初始状态。jffs2，虽然剩余空间仍然为2M，但是openwrt本身占用的空间你也是可以支配的，换句话说系统本身是可以改写的。相对于squashfs方式，你将多出约1M左右的可支配空间，代价是需要删除一些系统的部件，而缺点是一旦系统崩溃，有可能你无法使用firstboot脚本重建初始系统。所以一般都下载squashfs的</p>
<hr>
<h1 id="overlayfs透明挂载">overlayfs透明挂载</h1><p>overlayfs机制是由SquashFS与JFFS2文件系统的整合形成的对用户而言，OpenWrt的整个文件系统是完全动态可读写的，而其中的固件部分是用SquashFS实施的只读压缩文件系统，而用户所有的对文件系统的增删改都是用类似“差值”的形态存储在JFFS2文件系统中的，二者用overlayfs机制黏合，对用户完全透明。因此我们可以在文件系统中肆意发挥、随便折腾，出现任何问题则可像手机一样恢复出厂设置，并提供fail-safe模式帮助用户修复系统。</p>
<p>OpenWRT首先将/rom挂载为/root文件，然后再用/overlay覆盖在/之上，这样，当你进行文件系统的变更，修改，所做的操作将在overlay中记录。rom是不改变的。而最简单的恢复出厂设置方法，即是删除掉/overlay下所有文件。</p>
<h1 id="Openwrt启动过程">Openwrt启动过程</h1><p>1.首先uboot启动了kernel完成之后，由kernel加载ROM分区，就是rootfs减去rootfs_data得到的那一块分区，ROM分区采用的是Linux内核支持的squashFS文件系统(一种压缩只读文件系统)，加载完毕后将其挂载到/rom目录(同时也挂载为根文件系统)<br>2.系统将使用JFFS2文件系统格式化rootfs_data这部分并且将这部分挂载到/overlay目录。<br>3.将/overlay透明挂载为/分区。<br>4.将一部分内存挂载为/tmp目录。</p>
<hr>
<h1 id="挂载分区">挂载分区</h1><p>在系统中，可以执行以下指令查看当前系统分区：</p>
<pre><code>cat /<span class="keyword">proc</span>/mtd <span class="comment">#通过/proc虚拟文件系统读取MTD分区表</span>
</code></pre><p>具体由linux/drivers/mtd下的mtdcore.c文件中的mtd_read_proc函数来实现。</p>
<p>读出来的结果类似如下:</p>
<pre><code><span class="attribute">dev</span>: <span class="string">  size   erasesize  name</span>
<span class="attribute">mtd0</span>: <span class="string">01000000 00020000 "boot"</span>
<span class="attribute">mtd1</span>: <span class="string">01000000 00020000 "setting"</span>
<span class="attribute">mtd2</span>: <span class="string">02000000 00020000 "rootfs"</span>
<span class="attribute">mtd4</span>: <span class="string">00200000 00020000 "storage"</span>
<span class="attribute">mtd5</span>: <span class="string">00040000 00010000 "u-boot"</span>
</code></pre><p>其中size和erasesize的定义在linux/include/linux/mtd下mtd.h文件中的struct mtd_info结构体中。</p>
<p>通过这个结构体可知size是本mtd分区的最大字节数空间 ，erasesize是本分区的最小擦除字节数空间，读出来的信息显示这个erasesize就是一个nand block 。</p>
<p>0x00020000 换算为10进制就是 131072，也就是128K（1 block）</p>
<p>每个分区在flash中的位置是/dev/mtdblockX这样的位置,可以执行命令查看</p>
<pre><code>cat /<span class="keyword">proc</span>/partitions <span class="comment">#通过/proc虚拟文件系统读取系统分区</span>
</code></pre><hr>
<h1 id="扩展存储器容量">扩展存储器容量</h1><p>OpenWrt系统下扩展存储器容量，一般采用两种方式来实现：<br> 1.外部存储器替换rootfs_data分区的可写作用，也就是说替代现在的/overlay，这样凡是被修改的文件都保存在外部磁盘。<br> 2.直接将外部存储器挂载为/mnt/extdisk文件夹，这样就需要自己手工将需要的数据保存在里面。</p>
<h2 id="替换rootfs_data分区">替换rootfs_data分区</h2><p>挂载的作用是将磁盘连接到特定文件夹上，这样就可以对磁盘进行读写操作了。</p>
<p>1.在处理挂载之前，请先重启下设备</p>
<pre><code>root<span class="variable">@OpenWrt</span><span class="symbol">:~</span><span class="comment"># reboot</span>
</code></pre><p>2.rootfs_data数据迁移<br>核对当前存储器的设备符号，防止符号有变化瞎操作</p>
<pre><code>root<span class="variable">@OpenWrt</span><span class="symbol">:/</span><span class="comment"># fdisk -l</span>
</code></pre><p>3.创建临时文件夹</p>
<pre><code>root<span class="variable">@OpenWrt</span><span class="symbol">:~</span><span class="comment"># mkdir /mnt/extdisk</span>
</code></pre><p>4.将/dev/sda2(rootfs_data分区)挂载到临时文件夹</p>
<pre><code>root@<span class="type">OpenWrt</span>:~# mount /dev/sda2 /mnt/extdisk
[  <span class="number">115.750000</span>] <span class="type">EXT4</span>-fs (sda2): couldn't mount <span class="keyword">as</span> ext3 due <span class="keyword">to</span> feature incompatibilities
[  <span class="number">115.750000</span>] <span class="type">EXT4</span>-fs (sda2): couldn't mount <span class="keyword">as</span> ext2 due <span class="keyword">to</span> feature incompatibilities
[  <span class="number">115.950000</span>] <span class="type">EXT4</span>-fs (sda2): mounted filesystem <span class="keyword">with</span> ordered data mode. <span class="type">Opts</span>: (null)
</code></pre><p>5.复制整个/overlay中内容到存储器</p>
<pre><code>root<span class="variable">@OpenWrt</span><span class="symbol">:~</span><span class="comment"># tar -C /overlay -cvf - . | tar -C /mnt/extdisk -xf -</span>
</code></pre><p>6.刷新写入缓存</p>
<p>root@OpenWrt:~# sync</p>
<p>卸载临时挂载，完成这部分流程</p>
<pre><code>root<span class="variable">@OpenWrt</span><span class="symbol">:~</span><span class="comment"># umount /mnt/extdisk</span>
</code></pre><h2 id="存储器UUID">存储器UUID</h2><p>磁盘根据挂载可能存在符号变化，如果要实现自动挂载难免变化，这个时候需要UUID技术。UUID是对设备的一个描述，所有的UUID符号都是唯一的，这样不论设备符号如何变化始终可以找到所对应的磁盘分区。</p>
<p>获得存储器的扩展分区UUID</p>
<pre><code>root<span class="annotation">@OpenWrt</span>:~# blkid <span class="regexp">/dev/</span>sda2
<span class="regexp">/dev/</span><span class="string">sda2:</span> UUID=<span class="string">"61299cb7-035e-4a3c-b686-1257342c8867"</span> TYPE=<span class="string">"ext4"</span> PARTUUID=<span class="string">"000d3889-02"</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：Openwrt使用的是mini_fo文件系统，从用户的角度看，会觉得整个文件系统都是可写的，用户可以任意增加删减修改，这种文件系统可以认为是squash fs和jffs2的文件系统上实现了一个符号连接，如果用户读取只读文件，则链接到squash文件系统，如果对只读文件进行修改，将修改的文件放到Jffs2文件系统上，并修改链接。<br>]]>
    
    </summary>
    
      <category term="文件系统，Openwrt" scheme="http://masukio.tk/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%8COpenwrt/"/>
    
      <category term="Openwrt开发笔记" scheme="http://masukio.tk/categories/Openwrt%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Openwrt Patch制作及打补丁]]></title>
    <link href="http://masukio.tk/2015/07/09/Openwrt-Patches/"/>
    <id>http://masukio.tk/2015/07/09/Openwrt-Patches/</id>
    <published>2015-07-09T12:13:47.000Z</published>
    <updated>2015-07-10T10:13:40.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：Patch是天才程序员、Perl的发明者Larry Wall发明的，它应高效地交流程序源代码之需求而生，随着以Linux为代表的开发源代码运行的蓬勃发展，patch这个概念已经成为开放源代码发起者、贡献者和参与者的集体无意识的一部分。patch只包含了对源代码修改的部分，这对于开放源代码社区的协同开发模式具有重要意义，意味的软件新版本的 发布和对软件的缺陷或改进可以以更小的文件发布，可以减少网络的传输量，方便软件维护者的管理工作。<br><a id="more"></a></p>
<hr>
<p>patch是用来查找文件之间差异的GNU diff命令的一个接口；diff有很多选项，但是该命令最常用的用途是用来生成一个文件，该文件中列出了内容发生改变的行，显示两个原始文件、修改过的行以及由于内容没有变化而忽略掉的行。patch典型地用于把一个目录下的源代码文件更新到新的版本，从而就避免了下载整个新的源代码档案的必要。下载一个有效的patch仅仅需要下载发生变化的那些代码行就可以了。 patch最初源自十年前，那时网络带宽的限制促进了patch的发展，然而和当时的很多Unix工具一样，直到现在，patch还在广泛应用。</p>
<p>在Dr.Dobb之旅的2月份的程序员杂志中，Larry Wall对早期的patch做了一些很有趣的说明：</p>
<blockquote>
<p>DDJ:顺便问一下，patch和diff哪个出现的早？<br>LW:从很长一段时间来说，diff出现地比较早。我想diff大约比patch早10年出现，一回想起来，我就纳闷为什么没有人早些想到使用patch呢？ 但是我想我知道这中间的原因。这很大程度上是心理因素使然。当开发出diff时，程序员增加了一个e选项，我想就是这个选项的原因，该选项后来滋生为一个 ed脚本，因此大家都会对自己说，”嗯，如果我想自动使用diff，那么我就使用这个选项。”因此从来都没有人编写一个计算机程序来获取其它格式的输出并使用这些结果。或者是那些设计diff的人员，或者是那些使用diff格式而受益的人员太沉迷其中了，因为你可以对那些已经修改过的内容使用diff操作并让其正常工作都是很容易的。 </p>
</blockquote>
<hr>
<h1 id="diff和patch的用法">diff和patch的用法</h1><p>diff和patch是一对工具，在数学上来说，diff是对两个集合的差运算，patch是对两个集合的和运算。 diff比较两个文件或文件集合的差异，并记录下来，生成一个diff文件，这也是我们常说的patch文件，即补丁文件。 patch能将diff文件运用于 原来的两个集合之一，从而得到另一个集合。举个例子来说文件A和文件B,经过diff之后生成了补丁文件C,那么着个过程相当于 <code>A-B=C</code>,那么patch的过程就是<code>B+C=A</code> 或<code>A-C=B</code>。因此我们只要能得到A, B, C三个文件中的任何两个，就能用diff和patch这对工具生成另外一个文件。<br>这就是diff和patch的妙处。下面分别介绍一下两个工具的用法:</p>
<p><img src="http://7nar5o.com1.z0.glb.clouddn.com/path.png" alt="Path"></p>
<h2 id="diff的用法">diff的用法</h2><p>diff后面可以接两个文件名或两个目录名。如果是一个目录名加一个文件名，那么只作用在那么个目录下的同名文件。<br>如果是两个目录的话，作用于该目录下的所有文件，不递归。如果我们希望递归执行，需要使用-r参数。<br>命令<code>diff A B &gt; C</code>,一般A是原始文件，B是修改后的文件，C称为A的补丁文件。不加任何参数生成的diff文件格式是一种简单的格式，这种格式只标出了不一样的行数和内容。我们需要一种更详细的格式，可以标识出不同之处的上下文环境，这样更有利于提高patch命令的识别能力。这个时候可以用-c开关。</p>
<h2 id="diff的语法">diff的语法</h2><p>1、diff</p>
<pre><code>－－－－－－－－－－－－－－－－－－－－
NAME
       diff - find differences between <span class="constant">two</span> <span class="built_in">files</span>
SYNOPSIS
       diff [options] <span class="built_in">from</span>-<span class="built_in">file</span> <span class="built_in">to</span>-<span class="built_in">file</span>
－－－－－－－－－－－－－－－－－－－－
</code></pre><p>语法格式：diff [选项] 源文件（夹） 目的文件（夹）<br>常用选项：<br>-r 是一个递归选项，设置了这个选项，diff会将两个不同版本源代码目录中的所有对应文件全部都进行一次比较，包括子目录文件。<br>-N 选项确保补丁文件将正确地处理已经创建或删除文件的情况。<br>-u 选项以统一格式创建补丁文件，这种格式比缺省格式更紧凑些。</p>
<h2 id="patch的用法">patch的用法</h2><p>patch用于根据原文件和补丁文件生成目标文件。还是拿上个例子来说<br>patch A C 就能得到B, 这一步叫做对A打上了B的名字为C的补丁。<br>之一步之后，你的文件A就变成了文件B。如果你打完补丁之后想恢复到A怎么办呢？<br>patch -R B C 就可以重新还原到A了。<br>所以不用担心会失去A的问题。<br>其实patch在具体使用的时候是不用指定原文件的，因为补丁文件中都已经记载了原文件的路径和名称。patch足够聪明可以认出来。但是有时候会有点小问题。比如一般对两个目录diff的时候可能已经包含了原目录的名字，但是我们打补丁的时候会进入到目录中再使用patch,着个时候就需要你告诉patch命令怎么处理补丁文件中的路径。可以利用-pn开关，告诉patch命令忽略的路径分隔符的个数。举例如下：<br>A文件在 DIR_A下，修改后的B文件在DIR_B下，一般DIR_A和DIR_B在同一级目录。我们为了对整个目录下的所有文件一次性diff,我们一般会到DIR_A和DIR_B的父目录下执行以下命令</p>
<pre><code>diff -rc DIR_A DIR_B &gt; <span class="keyword">C</span>
</code></pre><p>这个时候补丁文件C中会记录了原始文件的路径为 DIR_A/A<br>现在另一个用户得到了A文件和C文件，其中A文件所在的目录也是DIR_A。 一般，他会比较喜欢在DIR_A目录下面进行patch操作，它会执行<br><code>patch &lt; C</code><br>但是这个时候patch分析C文件中的记录，认为原始文件是./DIR_A/A，但实际上是./A，此时patch会找不到原始文件。为了避免这种情况我们可以使用-p1参数如下</p>
<pre><code><span class="keyword">patch</span> -p1 &lt; C
</code></pre><p>此时，patch会忽略掉第1个”/”之前的内容，认为原始文件是 ./A，这样就正确了。使用patch<br>patch附带有一个很好的帮助，其中罗列了很多选项，但是99%的时间只要两个选项就能满足我们的需要：</p>
<pre><code><span class="keyword">patch</span> -p1 &lt; [patchfile]
<span class="keyword">patch</span> -R &lt; [patchfile] (used to undo a <span class="keyword">patch</span>)
</code></pre><p>-p1选项代表patchfile中 文件名左边目录的层数，顶层目录在不同的机器上有所不同。要使用这个选项，就要把你的patch放在要被打补丁的目录下，然后在这个目录中运行<code>path -p1 &lt; [patchfile]</code>。</p>
<h2 id="注意">注意</h2><p>最后有以下几点注意：<br>　　1.一次打多个patch的话，一般这些patch有先后顺序，得按次序打才行。<br>　　2.在patch之前不要对原文件进行任何修改<br>　　3.如果patch中记录的原始文件和你得到的原始文件版本不匹配(很容易出现)，那么你可以尝试使用patch, 如果幸运的话，可以成功。大部分情况下，会有不匹配的情况，此时patch会生成rej文件，记录失败的地方，你可以手工修改。</p>
<hr>
<h1 id="diff_pppd_patch">diff pppd patch</h1><p>目录为：<br>目录1 /trunk/build_dir/target-mips_r2_uClibc-0.9.33.2/ppp-default/<br>目录2 /trunk/package/ppp</p>
<p>目录1需要进行一次编译后才会有，且不能运行make clean，不然会被删除。至于为什么要编译之后再制作patch而不是直接用ppp-2.4.5的源码，我是这样想的，在我们制作自己的patch之前，在目录2下面的patch文件夹已经有很多高手们制作的其他patch，制作自己的patch要以他们的为基础，编译过一次的是已经打好了这些补丁的,如果直接用源码修改后制作patch，就等于忽略了其他的patch，这样可能导致自己的patch到后面把别的patch更改的内容给修改了，导致不必要的错误。</p>
<p>步骤（在Ubuntu12.04LTS下）：<br>1.首先到目录1下将文件夹ppp-2.4.5复制一份，命名为ppp-2.4.5.old不做任何修改。</p>
<p>2.修改ppp-2.4.5文件夹下该修改的地方，举个例子，比如431-syncppp.patch里面有这样一段</p>
<pre><code>--- ppp-<span class="number">2.4</span>.<span class="number">5.0</span><span class="regexp">/pppd/</span>chap-<span class="keyword">new</span>.c  表示旧文件
+++ ppp-<span class="number">2.4</span>.<span class="number">5</span><span class="regexp">/pppd/</span>chap-<span class="keyword">new</span>.c   表示修改了的新文件
</code></pre><p><img src="http://www.right.com.cn/forum/forum.php?mod=attachment&amp;aid=NjAyNTR8MTMzZGU2MTV8MTQzNjUwODQ4OHwwfDEwMjgyMA%3D%3D&amp;noupdate=yes" alt="diff"><br>@@那一行的意思是在 ppp-2.4.5/pppd/chap-new.c 文件中从第37行开始算起的后六行中插入绿色的内容（绿色的加号表示要增加内容，同理，减号表示删除），如果该文件不是已经存在的文件，则会自动创建一个文件。当然每个人的trunk版本不同可能导致行数和和位置的不同，但需要增加的内容是一样的，这也是我们自己修改文件后自己生成patch的原因。</p>
<p>修改好ppp-2.4.5里面需要修改的内容就可以生成自己的patch了。</p>
<p>3.生成patch<br>调出终端，cd到ppp-2.4.5所在目录，运行下面的命令：</p>
<pre><code>diff -Naur ppp-<span class="number">2.4</span>.5.old<span class="regexp">/pppd/</span>* ppp-<span class="number">2.4</span>.5<span class="regexp">/pppd/</span>* &gt;&gt; <span class="number">600</span>-syncppp.patch
</code></pre><p>最终就得到了自己的patch，patch的名称无所谓，但要保证它要在其他patch执行完成后再执行，因此编号（即开头的数字比如600，789等等）要是所在patches文件夹下最大的才行。<br>最后来到目录2即/trunk/package/ppp目录下，将得到的patch文件放入patches文件夹即可。<br>最后还要将<code>trunk/package/ppp</code>下的Makefile要将第37行(我的是37行）改为</p>
<pre><code><span class="label">DEPENDS:</span>=+kmod-ppp +libpthread
</code></pre><p>不然编译会出错。<br>   注意：执行make clean将会清空 <code>目录1  /trunk/build_dir/target-mips_r2_uClibc-0.9.33.2/</code>下的所有内容，生成patch后请及时转移到不会被误删文件夹下。</p>
<h1 id="管理工具quilt">管理工具quilt</h1><p>配置完Openwrt后，首次编译时会在编译过程中下载各种源码包，而且解压这些源码包并打上patch。需要对源码进行修改时，可直接修改源码并重新编译，但clean后再次编译时会再次解压源码包，以至所做的修改全部丢失。</p>
<p>安装quilt工具：</p>
<pre><code>apt-<span class="keyword">get</span> intall quilt
</code></pre><p>为了让quilt创建适合OpenWrt格式的patch，需要在本地home目录下创建quilt的配置文件.quiltrc，该配<br>置文件包含diff和patch的选项。使用如下命令可创建quilt的配置文件：</p>
<pre><code>cat&gt; ~/.quiltrc &lt;&lt;EOF
<span class="variable">QUILT_DIFF_ARGS=</span><span class="string">"--no-timestamps--no-index -pab --color=auto"</span>
<span class="variable">QUILT_REFRESH_ARGS=</span><span class="string">"--no-timestamps--no-index -pab"</span>
<span class="variable">QUILT_PATCH_OPTS=</span><span class="string">"--unified"</span>
<span class="variable">QUILT_DIFF_OPTS=</span><span class="string">"-p"</span>
<span class="variable">EDITOR=</span><span class="string">"vim"</span>
EOF
</code></pre><p>EDITOR指定编辑时所用的编辑器，该处使用vim。</p>
<h2 id="package的patch方法">package的patch方法</h2><p>package的patch生成方法以修改tftp-hpa为例进行介绍，修改内容为在tftp的main函数中加入一条打印<br>信息。（进行该操作之前，需要在make menuconfig时选择tftp-hpa包）</p>
<hr>
<h3 id="pactch生成步骤">pactch生成步骤</h3><p>1.准备tftp-hpa源码</p>
<pre><code>make <span class="keyword">package</span><span class="regexp">/feeds/</span>packages<span class="regexp">/tftp-hpa/</span>{clean,prepare} V=s QUILT=<span class="number">1</span>
</code></pre><p>此命令会解压tftp-hpa的源码包并准备patch文件（如果有），通过打印信息可获取解压到的目录路径。</p>
<p>2.进入tftp-hpa源码目录</p>
<pre><code><span class="title">cd</span> build_dir/target-mips_r2_uClibc-<span class="number">0.9.33.2</span>/tftp-hpa-<span class="number">0</span>.<span class="number">48</span>
</code></pre><p>3.安装所有已有patch</p>
<pre><code>quilt push -<span class="literal">a</span>
</code></pre><p>4.创建新patch</p>
<pre><code>quilt <span class="keyword">new</span> <span class="number">001</span>-main_test.patch
</code></pre><p>patch文件名以数字开头，“-”后为patch的描述信息<br>开头的数字必须比已有patch的数字都大，使用命令quilt series查看已有patch的列表</p>
<p>5.修改源码文件</p>
<pre><code>quilt <span class="keyword">edit</span> tftp/main.c
</code></pre><p>该命令将使用在.quiltrc中定义的编辑器打开main.c文件，在main函数中增加一条打印信息。<br>如果还有其他文件需要修改，可继续用此命令进行修改</p>
<p>6.查看修改内容</p>
<pre><code><span class="title">quilt</span> diff
</code></pre><p>7.更新修改到patch文件</p>
<pre><code>quilt <span class="keyword">refresh</span>
</code></pre><p>此命令会将更新的修改保存到当前目录的<code>patches/001-main_test</code>.patch(如果没有patches目录会自动创建)。</p>
<p>8.返回到buildroot目录</p>
<pre><code><span class="built_in">cd</span> ../../../
</code></pre><p>9.保存patch文件到buildroot</p>
<pre><code>makepackage<span class="regexp">/feeds/</span>packages<span class="regexp">/tftp-hpa/u</span>pdate V=s
</code></pre><p>10.重新编译tftp-hpa包以测试修改</p>
<pre><code>make <span class="keyword">package</span><span class="regexp">/feeds/</span>packages<span class="regexp">/tftp-hpa/</span>{clean,<span class="keyword">compile</span>} <span class="keyword">package</span><span class="regexp">/index V=s</span>
</code></pre><p>11.如果有问题，需要编辑patch文件</p>
<hr>
<h3 id="编辑已有patch文件">编辑已有patch文件</h3><p>当需要对patch进行修改时，可使用以下步骤：<br>1.准备tftp-hpa源码</p>
<pre><code>make <span class="keyword">package</span><span class="regexp">/feeds/</span>packages<span class="regexp">/tftp-hpa/</span>{clean,prepare} V=s QUILT=<span class="number">1</span>
</code></pre><p>2.进入tftp-hpa源码目录</p>
<pre><code><span class="title">cd</span> build_dir/ /target-mips_r2_uClibc-<span class="number">0.9.33.2</span>/tftp-hpa-<span class="number">0</span>.<span class="number">48</span>
</code></pre><p>3.列出可用的patch</p>
<pre><code><span class="title">quilt</span> series
</code></pre><p>4.准备要修改的patch</p>
<pre><code>quilt <span class="keyword">push</span> <span class="number">001</span>-main_test.patch
</code></pre><p>此命令会按patch编号顺序打补丁，直到指定的patch（包含）<br>如果当前应用的patch编号已经超过了指定的patch编号，将会按相反顺序移除patch直到指定的patch</p>
<p>5.编辑源码文件</p>
<pre><code>quilt <span class="keyword">edit</span> tftp/main.c
</code></pre><p>6.检查patch中包含的所修改的文件</p>
<pre><code>quilt <span class="built_in">files</span>
</code></pre><p>7.查看修改内容</p>
<pre><code><span class="title">quilt</span> diff
</code></pre><p>8.保存修改到patch</p>
<pre><code>quilt <span class="keyword">refresh</span>
</code></pre><p>9.返回buildroot目录</p>
<pre><code><span class="built_in">cd</span> ../../../
</code></pre><p>10.保存patch文件到buildroot</p>
<pre><code>make <span class="keyword">package</span><span class="regexp">/feeds/</span>packages<span class="regexp">/tftp-hpa/u</span>pdate V=s
</code></pre><p>11.重新编译tftp-hpa包以测试修改</p>
<pre><code>make <span class="keyword">package</span><span class="regexp">/feeds/</span>packages<span class="regexp">/tftp-hpa/</span>{clean,<span class="keyword">compile</span>} <span class="keyword">package</span><span class="regexp">/index V=s</span>
</code></pre><h2 id="platform_patch生成步骤">platform patch生成步骤</h2><p>platform形式的patch生成步骤如下（源码修改mach-ap121.c）:<br>1.准备内核源码树，使用如下命令</p>
<pre><code>make target/linux/{clean,prepare} <span class="variable">V=</span>s <span class="variable">QUILT=</span><span class="number">1</span>
</code></pre><p>2.进入kernel源码树目录</p>
<pre><code>对attitudead justment版本，kernel源码树所在目录为`build_dir/linux-<span class="keyword">*</span>/linux-3.<span class="keyword">*</span>`
</code></pre><p>对本文使用的trunk版本，使用如下命令进入kernel源码树<br>    cd build_dir/target-mips_r2_uClibc-0.9.33.2/linux-ar71xx_generic/linux-3.10.10</p>
<p>3.安装所有已有patch</p>
<pre><code>quilt push -<span class="literal">a</span>
</code></pre><p>4.创建新patch</p>
<pre><code>quilt <span class="built_in">new</span> <span class="built_in">platform</span>/<span class="number">910</span>-MIPS-ath79-ap121-reset-gpio-change.patch
</code></pre><p>patch文件名以数字开头，“-”后为patch的描述信息<br>开头的数字必须比已有patch的数字都大，使用命令quilt series查看已有patch的列表<br>新建platform的patch时需要在patch名前添加“platform/”前缀</p>
<p>5.修改源码文件</p>
<pre><code>quilt <span class="keyword">edit</span> <span class="keyword">arch</span>/mips/ath79/mach-ap121.c
</code></pre><p>该命令将使用在.quiltrc中定义的编辑器打开mach-ap121.c文件，修改对复位GPIO的定义。<br>如果还有其他文件需要修改，可继续用此命令进行修改</p>
<p>6.查看修改内容</p>
<pre><code><span class="title">quilt</span> diff
</code></pre><p>7.更新修改到patch文件</p>
<pre><code>quilt <span class="keyword">refresh</span>
</code></pre><p>此命令会将更新的修改保存到当前目录的<code>patches/platform/910-MIPS-ath79-ap121-reset-gpio-change.patch</code></p>
<p>8.返回到buildroot目录</p>
<p>cd ../../../../</p>
<p>9.保存patch文件到buildroot</p>
<pre><code>make target/linux/<span class="keyword">update</span> V=<span class="literal">s</span>
</code></pre><p>此命令会将<code>910-MIPS-ath79-ap121-reset-gpio-change.patch</code>保存到<code>target/linux/ar71xx/patches-3.10/</code></p>
<h3 id="generic_patch生成步骤">generic patch生成步骤</h3><p>generic形式的patch生成步骤如下（源码修改m25p80.c）:<br>1.准备内核源码树，使用如下命令</p>
<pre><code>make target/linux/{clean,prepare} <span class="variable">V=</span>s <span class="variable">QUILT=</span><span class="number">1</span>
</code></pre><p>2.进入kernel源码树目录<br>对attitude adjustment版本，kernel源码树所在目录为<code>build_dir/linux-*/linux-3.*</code><br>对本文使用的trunk版本，使用如下命令进入kernel源码树</p>
<pre><code><span class="title">cd</span> build_dir/target-mips_r2_uClibc-<span class="number">0.9.33.2</span>/linux-ar71xx_generic/linux-<span class="number">3</span>.<span class="number">10</span>.<span class="number">10</span>
</code></pre><p>3.安装所有已有patch</p>
<pre><code>quilt push -<span class="literal">a</span>
</code></pre><p>4.创建新patch</p>
<pre><code>quilt <span class="built_in">new</span> <span class="number">998</span>-mtd-m25p80-<span class="built_in">add</span>-support-<span class="keyword">for</span>-spansion-s25fl164k1-flash.patch
</code></pre><p>patch文件名以数字开头，“-”后为patch的描述信息<br>开头的数字必须比已有patch的数字都大，使用命令quilt series查看已有patch的列表<br>新建generic的patch时需要在patch名前添加“generic/”前缀</p>
<p>5.修改源码文件</p>
<pre><code>quilt <span class="keyword">edit</span> driver/mtd/devices/m25p80.c
</code></pre><p>该命令将使用在.quiltrc中定义的编辑器打开m25p80.c文件，增加对s25fl164k1的声明。<br>如果还有其他文件需要修改，可继续用此命令进行修改</p>
<p>6.查看修改内容</p>
<pre><code><span class="title">quilt</span> diff
</code></pre><p>7.更新修改到patch文件</p>
<pre><code>quilt <span class="keyword">refresh</span>
</code></pre><p>此命令会将更新的修改保存到当前目录的patches/generic/998-mtd-m25p80-add-support-for-spansion-s25fl164k1-flash.patch。</p>
<p>8.返回到buildroot目录</p>
<pre><code>cd ..<span class="regexp">/../</span>..<span class="regexp">/../</span>
</code></pre><p>9.保存patch文件到buildroot</p>
<pre><code>make target/linux/<span class="keyword">update</span> V=<span class="literal">s</span>
</code></pre><p>此命令会将<code>998-mtd-m25p80-add-support-for-spansion-s25fl164k1-flash.patch</code>保存到<code>target/linux/generic/patches-3.10/</code></p>
<h3 id="更新patches">更新patches</h3><p>当已打补丁的package（或者kernel）更新到新版本时，patch现有补丁时可能不会顺利，出现一些不确定性。<br>可以通过make的refresh target重建整个patch。<br>对package，使用类似如下的命令：</p>
<pre><code>make <span class="keyword">package</span><span class="regexp">/feeds/</span>packages<span class="regexp">/tftp-hpa/</span>refresh V=s
</code></pre><p>对kernel，使用如下命令：</p>
<pre><code>make <span class="literal">target</span>/linux/<span class="literal">refresh</span> <span class="constant">V</span>=s
</code></pre><h2 id="迭代修改patch">迭代修改patch</h2><p>进行新的修改时，可能会对patch进行多次修改。为了加快开发速度，可以在保持源码树的情况下进行修改操作。</p>
<p>1.准备源码树<br>2.进入源码目录<br>3.应用所要打的patch<br>4.编辑源码文件，更新patch<br>5.应用所有patch（quilt push -a）<br>6.返回buildroot目录，运行命令make package/feeds/packages/tftp-hpa/{compile,install}或make target/linux/{compile,install}（对kernel）<br>7.测试固件<br>8.如果需要进一步修改，返回第二步<br>9,使用命令make package/feeds/packages/tftp-hpa/update或make target/linux/update（对kernel）将patches拷贝到buildroot</p>
<hr>
<h1 id="Openwrt新设备支持">Openwrt新设备支持</h1><p>以TL-MR10U为例,TL-MR10U可直接刷WR703N固件, 不过USB 不能供电,网络, LED正常，所以需要修复下</p>
<h2 id="准备工作">准备工作</h2><p>编译过bin, 有完整的<code>.config</code>和<code>toolchain</code><br>1.建立开发 branch</p>
<pre><code>~/openwrt$ git checkout -<span class="tag">b</span> add-tl-mr10u-support
</code></pre><p>2.清理tmp目录，直接删除</p>
<pre><code>~<span class="regexp">/openwrt$ rm -rvf tmp/</span>
</code></pre><p>3.修改 OpenWrt 代码<br>进入设备硬件目录:</p>
<pre><code>~/openwrt$ cd <span class="keyword">target</span>/linux/ar71xx
</code></pre><p>修改以下文件, 里面涉及到 TL-MR10U 固件中设备ID的部分, 是 0x00100101, 这个值从 tp-link 官方网站下载的固件中可以获得</p>
<pre><code>base-files/etc/diag<span class="class">.sh</span>
base-files/etc/uci-defaults/<span class="number">02</span>_network
base-files/lib/ar71xx<span class="class">.sh</span>
base-files/lib/upgrade/platform<span class="class">.sh</span>
config-<span class="number">3.8</span>
generic/profiles/tp-link<span class="class">.mk</span>
image/Makefile
新建文件: files/arch/mips/ath79/mach-tl-mr10u<span class="class">.c</span>
内容参考 TL-WR703N 设备的文件 mach-tl-wr703n<span class="class">.c</span>, 修改所有出现 wr703n, WR703N 等等大小写混合的部分。
</code></pre><p>4.添加 Linux patch<br>这里就完成了OpenWrt的设备支持代码，为了支持我们的设备, Linux代码树的部分文件也需要做改动</p>
<p>回退到根目录 <code>~/openwrt</code></p>
<p>5.清理并准备patch树:</p>
<pre><code>~<span class="regexp">/openwrt$ make target/linux/</span>{clean,prepare}
<span class="comment"># 后面可加 V=s QUILT=1 参数, 表示静默无输出</span>
</code></pre><p>进入内核代码目录(其中版本号可能与你的不一致):</p>
<pre><code><span class="built_in">cd</span> ~/openwrt$ <span class="built_in">cd</span> build_dir/target-mips_r2_uClibc-<span class="number">0.9</span>.<span class="number">33.2</span>/linux-ar71xx_generic/linux-<span class="number">3.8</span>.<span class="number">12</span>/
</code></pre><p>这里就是内核代码树了, 里面的代码是已经打过所有 patch 的, 可以用 quilt push 检查看是不是这样:</p>
<pre><code>$ quilt push
File series fully applied, <span class="operator">ends</span> <span class="keyword">at</span> patch <span class="built_in">platform</span>/<span class="number">902</span>-unaligned_access_hacks.patch
</code></pre><p>这条输入也告诉我们, 当前最顶的 patch 是 platform/902</p>
<p>为TL-MR10U新建个 patch:</p>
<pre><code>$ quilt <span class="built_in">new</span> <span class="built_in">platform</span>/<span class="number">920</span>-<span class="built_in">add</span>-tl-mr10u-support.patch
</code></pre><p>选择的数字需要大于刚才的那个 902, 然后 quilt 会自动把这个patch设置为当前patch,所有的改动都针对这个 patch</p>
<p>6.然后就是增加代码了</p>
<pre><code>$ quilt <span class="keyword">edit</span> <span class="keyword">arch</span>/mips/ath79/Kconfig
$ quilt <span class="keyword">edit</span> <span class="keyword">arch</span>/mips/ath79/Makefile
$ quilt <span class="keyword">edit</span> <span class="keyword">arch</span>/mips/ath79/machtypes.<span class="literal">h</span>
</code></pre><p>参考这些文件里其他硬件的配置, 基本上说copy TL-WR703N 的就可以了，保证不重不漏</p>
<p>然后验证下修改的内容:</p>
<pre><code><span class="variable">$ </span>quilt diff <span class="comment"># 查看 diff</span>
<span class="variable">$ </span>quilt refresh <span class="comment"># 保存所有 diff 到 patch 文件</span>
</code></pre><p>这个时候我们的 patch 文件还在 build_dir 里, 大概位置是 patches/platform/ 下. 需要同步到 OpenWrt 代码树.</p>
<p>7.退回到顶层工作目录, 执行:<br>~/openwrt$ make target/linux/update V=s<br>同步完成后, patch 文件会出现在 target/linux/ar71xx/patches-3.8/ 下.</p>
<p>8.固件工具代码修改<br>OpenWrt 包含一个 TP-LINK 固件小工具, tools/firmware-utils/src/mktplinkfw.c , 里面包含 TP-LINK 固件 bin 文件的结构和 md5 hash 验证算法，修改内容参考 WR703N</p>
<p>这里应该已经完成了所有操作. 可以编译了</p>
<p>9.再次记得, 删除 tmp 目录</p>
<pre><code>~/openwrt<span class="char">$ </span>rm -rvf tmp/
~/openwrt<span class="char">$ </span>make menuconfig
</code></pre><hr>
<h2 id="参考">参考</h2><p>-主要参考OpenWrt的官网对patch的相关开发说明<br>openwrt.org（Documentation-&gt;Developing-&gt;patches）。<br>-Linux初学者Patch使用指南<br><a href="http://harrymao.bokee.com/3354544.html" target="_blank" rel="external">http://harrymao.bokee.com/3354544.html</a><br>-Add New Profile To OpenWrt<br><a href="http://andelf.diandian.com/post/2013-05-22/40050677370" target="_blank" rel="external">http://andelf.diandian.com/post/2013-05-22/40050677370</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：Patch是天才程序员、Perl的发明者Larry Wall发明的，它应高效地交流程序源代码之需求而生，随着以Linux为代表的开发源代码运行的蓬勃发展，patch这个概念已经成为开放源代码发起者、贡献者和参与者的集体无意识的一部分。patch只包含了对源代码修改的部分，这对于开放源代码社区的协同开发模式具有重要意义，意味的软件新版本的 发布和对软件的缺陷或改进可以以更小的文件发布，可以减少网络的传输量，方便软件维护者的管理工作。<br>]]>
    
    </summary>
    
      <category term="Diff" scheme="http://masukio.tk/tags/Diff/"/>
    
      <category term="Openwrt" scheme="http://masukio.tk/tags/Openwrt/"/>
    
      <category term="Patch" scheme="http://masukio.tk/tags/Patch/"/>
    
      <category term="Openwrt开发笔记" scheme="http://masukio.tk/categories/Openwrt%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Openwrt Makefile写作格式]]></title>
    <link href="http://masukio.tk/2015/07/08/Openwrt-New-Makefile/"/>
    <id>http://masukio.tk/2015/07/08/Openwrt-New-Makefile/</id>
    <published>2015-07-08T07:54:42.000Z</published>
    <updated>2015-07-10T10:13:40.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。构建的规则都写在Makefile文件里面，要学会如何Make命令，就必须学会如何编写Makefile文件。<br><a id="more"></a></p>
<blockquote>
<p>Make入门可以参考阮一峰老师的Make 命令教程<br><a href="http://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/02/make.html</a></p>
</blockquote>
<h1 id="Makefile概述">Makefile概述</h1><p>如果打开OpenWrt里的一个软件包的目录(OpenWrt/Package/<em> 或 OpenWrt/feeds/packages/</em>/*)，通常会发现几样东西：</p>
<pre><code><span class="keyword">package</span>/Makefile [必备]
<span class="keyword">package</span><span class="regexp">/patches/</span> [可选]
<span class="keyword">package</span><span class="regexp">/files/</span> [可选]
</code></pre><p>patches目录和files目录都是可选的，pactches目录通常包括bug修复和对可执行文件体积的优化，files目录通常包括配置文件。你也可能看到其它目录，因为只要在Makefile文件中指明，目录名字是可以任取的。前面两个是约定俗成的做法，强烈建议你也这么做。</p>
<p>Makefile文件最为关键，它提供了下载、编译、安装这个软件包的步骤。</p>
<p>当我们打开这里的Makefile文件，很难认出这是一个Makefile。它的格式跟一般的Makefile不一样，因为它的功能跟普通Makefile就是不一样的。它是一种编写方便的模板。</p>
<p>这是一个Makefile文件，内容如下：</p>
<pre><code><span class="keyword">include</span> <span class="variable">$(</span><span class="constant">TOPDIR)</span>/rules.mk

<span class="constant">PKG_NAME:</span>=helloworld
<span class="constant">PKG_RELEASE:</span>=<span class="number">1</span>
<span class="constant">PKG_BUILD_DIR:</span>=<span class="variable">$(</span><span class="constant">BUILD_DIR)</span>/<span class="variable">$(</span><span class="constant">PKG_NAME)</span>

<span class="keyword">include</span> <span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/package.mk

define <span class="constant">Package/</span>helloworld
    <span class="constant">SECTION:</span>=utils
    <span class="constant">CATEGORY:</span>=<span class="constant">Utilities</span>
    <span class="constant">TITLE:</span>=<span class="constant">Helloworld </span>-- prints a snarky message
endef

define <span class="constant">Package/</span>helloworld/description
    <span class="constant">It'</span>s my first package demo.
endef

define <span class="constant">Build/Prepare</span>
    echo <span class="string">"Here is Package/Prepare"</span>
    mkdir -p <span class="variable">$(</span><span class="constant">PKG_BUILD_DIR)</span>
    <span class="variable">$(</span><span class="constant">CP)</span> ./src/* <span class="variable">$(</span><span class="constant">PKG_BUILD_DIR)</span>/
endef

define <span class="constant">Package/</span>helloworld/install
    echo <span class="string">"Here is Package/install"</span>
    <span class="variable">$(</span><span class="constant">INSTALL_DIR)</span> <span class="variable">$(</span><span class="number">1</span>)/bin
    <span class="variable">$(</span><span class="constant">INSTALL_BIN)</span> <span class="variable">$(</span><span class="constant">PKG_BUILD_DIR)</span>/helloworld <span class="variable">$(</span><span class="number">1</span>)/bin/
endef

<span class="variable">$(</span>eval <span class="variable">$(</span>call <span class="constant">BuildPackage,</span>helloworld))
</code></pre><p>大概我们可以将简代为如下的结构：</p>
<pre><code><span class="keyword">include</span> <span class="variable">$(</span><span class="constant">TOPDIR)</span>/rules.mk

<span class="comment"># 这里定义一系列的 PKG_XX </span>

<span class="keyword">include</span> <span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/package.mk

<span class="comment"># 定义各种 Package, Build 宏</span>

<span class="variable">$(</span>eval <span class="variable">$(</span>call <span class="constant">BuildPackage,</span>包名))
</code></pre><h2 id="include_$(TOPDIR)/rules-mk">include $(TOPDIR)/rules.mk</h2><p>首先，include $(TOPDIR)/rules.mk，也就是将 SDK/rules.mk 文件中的内容导入进来。</p>
<p>TOPDIR就是SDK的路径。</p>
<p>在 SDK/rules.mk 文件中，定义了许多变量。<br><img src="http://static.oschina.net/uploads/space/2015/0507/224257_Eljq_243525.png" alt=""></p>
<h2 id="软件包变量">软件包变量</h2><p>建立一个软件包不需要太多工作；大部分工作都隐藏在其它的 makefiles 中，编写工作被抽象成对几个变量的赋值。</p>
<p>PKG<em>NAME -软件包的名字, 在 menuconfig 和 ipkg 显示<br>PKG_VERSION -软件包的版本，主干分支的版本正是我们要下载的<br>PKG_RELEASE -这个 makefile 的版本<br>PKG_BUILD_DIR -编译软件包的目录<br>PKG_SOURCE -要下载的软件包的名字，一般是由 PKG_NAME 和 PKG_VERSION 组成<br>PKG_SOURCE_URL -下载这个软件包的链接<br>PKG_MD5SUM -软件包的 MD5 值<br>PKG_CAT -解压软件包的方法 (zcat, bzcat, unzip)<br>PKG_BUILD_DEPENDS -需要预先构建的软件包，但只是在构建本软件包时，而不是运行的时候。它的语法和下面的DEPENDS一样。<br>PKG</em>*变量定义了从何处下载这个软件包；@SF是表示从sourceforge网站下载的一个特殊关键字。md5sum用来检查从网上下载的软件包是否完好无损。PKG_BUILD_DIR定义了软件包源代码的解压路径。</p>
<h2 id="include_$(INCLUDE_DIR)/package-mk">include $(INCLUDE_DIR)/package.mk</h2><p>注意到上面示例文件底部的最后一行吗？这是最为关键的BuildPackage宏。它是在$(INCLUDE_DIR)/package.mk文件里定义的。BuildPackage宏只要求一个参数，即要编译的软件包名，在本例中是”bridge”。所有其他信息都通过宏来获得，这提供了一种内在的简洁性。比如BuildPackage需要软件包的一大串描述信息，我们并不要向它传递冗长的参数，因为我们已经约定描述信息定义在DESCRIPTION宏，BuildPackage从里面读取就可以了。</p>
<blockquote>
<p>详细参考OpenWRT开发之——研究包的Makefile<br><a href="http://my.oschina.net/hevakelcj/blog/411942#OSC_h2_3" target="_blank" rel="external">http://my.oschina.net/hevakelcj/blog/411942#OSC_h2_3</a></p>
</blockquote>
<h2 id="BuildPackage相关的宏">BuildPackage相关的宏</h2><p>Package/</p>
<p>描述软件包在menuconfig和ipkg中的信息，可以定义如下变量：</p>
<pre><code>SECTION - 软件包类型 (尚未使用)
CATEGORY - menuconfig中软件包所属的一级目录，如Network
SUBMENU - menuconfig中软件包所属的二级目录，如dial-<span class="type">in</span>/up
TITLE - 软件包标题
DESCRIPTION - 软件包的详细说明
URL - 软件的原始位置，一般是软件作者的主页
MAINTAINER - (<span class="type">optional</span>) 软件包维护人员
DEPENDS - (<span class="type">optional</span>) 依赖项，运行本软件依赖的其他包
Package/conffiles (可选)
</code></pre><p>软件包需要复制的配置文件列表，一个文件占一行</p>
<p>Build/Prepare (可选)</p>
<p>一组解包源代码和打补丁的命令，一般不需要。</p>
<p>Build/Configure (可选)</p>
<p>如果源代码编译前需要configure且指定一些参数，就把这些参数放在这儿。否则可以不定义。</p>
<p>Build/Compile (可选)</p>
<p>编译源代码命令。</p>
<p>Package/install</p>
<p>软件安装命令，主要是把相关文件拷贝到指定目录，如配置文件。</p>
<p>Package/preinst</p>
<p>软件安装之前被执行的脚本，别忘了在第一句加上#!/bin/sh。如果脚本执行完毕要取消安装过程，直接让它返回false即可。</p>
<p>Package/postinst</p>
<p>软件安装之后被执行的脚本，别忘了在第一句加上#!/bin/sh。</p>
<p>Package/prerm</p>
<p>软件删除之前被执行的脚本，别忘了在第一句加上#!/bin/sh。如果脚本执行完毕要取消删除过程，直接让它返回false即可。</p>
<p>Package/postrm</p>
<p>软件删除之后被执行的脚本，别忘了在第一句加上#!/bin/sh。</p>
<p>为什么一些定义是”Package/“前缀，另一些定义却是”Build”前缀？这是因为我们支持一个特性：从单个源代码构建多个软件包。OpenWrt工作在一个Makefile对应一个源代码的假设之上，但是你可以把编译生成的程序分割成任意多个软件包。因为编译只要一次，所以使用全局的”Build”定义是最合适的。然后你可以增加很多“Package/“定义，为各软件包分别指定安装方法。建议你去看看dropbear包，这是一个很好的示范。</p>
<blockquote>
<p>提示：对于所有在pre/post, install/removal脚本中使用的变量，都应该使用”$$”代替”$”。这是告诉make暂时不要解析这个变量，而是把它当成普通字符串以及用”$”代替”$$”。 – 更多信息</p>
</blockquote>
<p>在编辑好Makefile文件，并放到指定目录后，这个新的软件包将在下次执行make menuconfig时出现，你可以选择这个软件包，保存退出，用make编译。现在就把一个软件成功移植到OpenWrt中了！</p>
<h2 id="创建内核模块软件包">创建内核模块软件包</h2><p>内核模块是一类扩展Linux内核功能的可安装程序。内核模块的加载发生在内核加载之后，（比如使用insmod命令）。</p>
<p>Linux源代码包含了很多内核应用程序。在menuconfig时有3种选择，</p>
<p>编译进内核；<br>编译成可加载的内核模块；<br>不编译。<br>参看FIX:Customizingthekerneloptions customizing the kernel options</p>
<p>要包含这些内核模块，只要make menuconfig选择相应的内核模块选项。（参看Build Configuration）。如果在make menuconfig时没有发现想要的内核模块，必须添加一个stanza到package/kernel/modules目录的一个文件中。下面是一个从package/kernel/modules/other.mk提取出来的例子。</p>
<pre><code><span class="title">define</span> <span class="type">KernelPackage</span>/loop
  <span class="type">TITLE</span>:=<span class="type">Loopback</span> device support
  <span class="type">DESCRIPTION</span>:=<span class="type">Kernel</span> <span class="module"><span class="keyword">module</span> for loopback device support
  KCONFIG:=$<span class="container">(<span class="type">CONFIG_BLK_DEV_LOOP</span>)</span>
  SUBMENU:=$<span class="container">(<span class="type">EMENU</span>)</span>
  AUTOLOAD:=$<span class="container">(<span class="title">call</span> <span class="type">AutoLoad</span>,30,<span class="title">loop</span>)</span>
  FILES:=$<span class="container">(<span class="type">MODULES_DIR</span>)</span>/kernel/drivers/block/loop.$<span class="container">(<span class="type">LINUX_KMOD_SUFFIX</span>)</span>
endef
$<span class="container">(<span class="title">eval</span> $(<span class="title">call</span> <span class="type">KernelPackage</span>,<span class="title">loop</span>)</span>)</span>
</code></pre><p>此外，你还可以添加不属于Linux源码包的内核模块。在这种情况下，内核模块放在package/目录，跟通常的软件包是一样的。package/Makefile文件使用KernelPackage/xxx定义代替Package/xxx。</p>
<h1 id="编写测试程序">编写测试程序</h1><h2 id="生成SDK">生成SDK</h2><p>make menuconfig 选上 “Build the OpenWRT SDK”，在 trunk目录下，执行：</p>
<pre><code><span class="variable">$ </span>make menuconfig
</code></pre><p>选择对应的”Target System”与”Target Profile”，并选上”Build the OpenWrt SDK”。</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0504/222654_hnQ4_243525.png" alt=""></p>
<p>然后 Save，退出。再make一次。</p>
<pre><code><span class="variable">$ </span>make <span class="constant">V=</span><span class="number">99</span>
</code></pre><p>make 完成之后，在 bin/ar71xx/ 目录下会生成SDK的压缩文件：</p>
<pre><code>OpenWrt-SDK-ar71xx-generic_gcc-<span class="number">4.8</span>-linaro_uClibc-<span class="number">0.9</span>.<span class="number">33.2</span><span class="class">.Linux-i686</span><span class="class">.tar</span><span class="class">.bz2</span>
</code></pre><h2 id="安装SDK">安装SDK</h2><p>将上面所生成的 OpenWrt-SDK-ar71xx-generic_gcc-4.8-linaro_uClibc-0.9.33.2.Linux-i686.tar.bz2 复制到其它路径下（指可以不在OpenWrt的源码路径下），再解压出来。</p>
<p>比如我将其放到 ～/Workspace/OpenWRT/ 路径下：</p>
<pre><code>$ cp bin/ar71xx/OpenWrt-SDK-ar71xx-generic_gcc-<span class="number">4.8</span>-linaro_uClibc-<span class="number">0.9</span>.<span class="number">33.2</span><span class="class">.Linux-i686</span><span class="class">.tar</span><span class="class">.bz2</span> ~/Workspace/OpenWRT
$ cd ~/Workspace/OpenWRT
$ tar jxvf OpenWrt-SDK-ar71xx-generic_gcc-<span class="number">4.8</span>-linaro_uClibc-<span class="number">0.9</span>.<span class="number">33.2</span><span class="class">.Linux-i686</span><span class="class">.tar</span><span class="class">.bz2</span>
</code></pre><p>在 ~/Workspace/OpenWRT/ 路径下就生成了 OpenWrt-SDK-ar71xx-generic_gcc-4.8-linaro_uClibc-0.9.33.2.Linux-i686 目录。</p>
<p>为了方便，我将这个长长的目录名简化为：OpenWrt-SDK。修改后，完整的路径是：~/Workspace/OpenWRT/OpenWrt-SDK </p>
<p>据说这个目录结构跟 OpenWrt的源码目录结构差不多。</p>
<h2 id="创建helloworld项目">创建helloworld项目</h2><p>其实，这里可以是任意我们想要加入的程序，库等。这里就以helloword为例。</p>
<p>在任意路径下，创建helloword项目。比如这里还是在 ~/Workspace/OpeWRT 目录下。</p>
<pre><code><span class="variable">$ </span>cd ~<span class="regexp">/Workspace/</span><span class="constant">OpenWRT</span>
<span class="variable">$ </span>mkdir helloword
<span class="variable">$ </span>cd helloword
<span class="variable">$ </span>touch helloword.c <span class="constant">Makefile</span>
</code></pre><p>在 ~/Workspace/OpenWRT/ 目录下创建了 helloword 目录，并生成 helloword.c与Makefile文件。</p>
<p>如下为 helloworld.c的内容：</p>
<pre><code><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span>

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>
</span>{
    <span class="built_in">printf</span>(<span class="string">"This is my hello word!\n"</span>);
    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><p>Makefile的内容：</p>
<pre><code>helloworld : helloworld<span class="class">.o</span>
    $(CC) $(LDFLAGS) helloworld<span class="class">.o</span> -o helloworld

helloworld<span class="class">.o</span> : helloworld<span class="class">.c</span>
    $(CC) $(CFLAGS) -c helloworld<span class="class">.c</span>

clean :
    rm *<span class="class">.o</span> helloworld
</code></pre><p>首先，确保在程序没问题，在本地能正常编过。为了检验一下，可以就地 make 一下，看程序本身有没有问题。</p>
<p>这个程序都如些之简单了，本人自己了make了一下，OK，再run了一下，正常。</p>
<h2 id="创建helloworld包">创建helloworld包</h2><p>进入 OpenWrt/Packages/ 并在该目录下创建 helloworld 目录，并进入该目录。</p>
<pre><code><span class="variable">$ </span>cd ~<span class="regexp">/Workspace/</span><span class="constant">OpenWrt/OpenWrt-SDK/</span>package
<span class="variable">$ </span>mkdir helloworld
<span class="variable">$ </span>cd helloworld
</code></pre><p>将我们第三步写的程序复制到这个目录下来，更名为src。再新建一个 Makefile 文件。</p>
<pre><code><span class="variable">$ </span>cp -r ../../../helloworld src
<span class="variable">$ </span>touch <span class="constant">Makefile</span>
</code></pre><p>整个过程下来，package目录结构如下：</p>
<pre><code><span class="built_in">package</span>
|<span class="comment">-- helloworld</span>
|   |<span class="comment">-- Makefile</span>
|   `<span class="comment">-- src</span>
|       |<span class="comment">-- helloworld.c</span>
|       `<span class="comment">-- Makefile</span>
`<span class="comment">-- Makefile</span>
</code></pre><p>package/Makefile 不要去修改它。</p>
<p>我们要编写的是 package/helloworld/Makefile 这个文件,Makefile 文件如下：</p>
<pre><code><span class="keyword">include</span> <span class="variable">$(</span><span class="constant">TOPDIR)</span>/rules.mk

<span class="constant">PKG_NAME:</span>=helloworld
<span class="constant">PKG_RELEASE:</span>=<span class="number">1</span>

<span class="constant">PKG_BUILD_DIR:</span>=<span class="variable">$(</span><span class="constant">BUILD_DIR)</span>/<span class="variable">$(</span><span class="constant">PKG_NAME)</span>

<span class="keyword">include</span> <span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/package.mk

define <span class="constant">Package/</span>helloworld
    <span class="constant">SECTION:</span>=utils
    <span class="constant">CATEGORY:</span>=<span class="constant">Utilities</span>
    <span class="constant">TITLE:</span>=<span class="constant">Helloworld </span>-- prints a snarky message
endef

define <span class="constant">Package/</span>helloworld/description
    <span class="constant">It'</span>s my first package demo.
endef

define <span class="constant">Build/Prepare </span>  <span class="comment">#已修正</span>
    echo <span class="string">"Here is Package/Prepare"</span>
    mkdir -p <span class="variable">$(</span><span class="constant">PKG_BUILD_DIR)</span>
    <span class="variable">$(</span><span class="constant">CP)</span> ./src/* <span class="variable">$(</span><span class="constant">PKG_BUILD_DIR)</span>/
endef

define <span class="constant">Package/</span>helloworld/install
    echo <span class="string">"Here is Package/install"</span>
    <span class="variable">$(</span><span class="constant">INSTALL_DIR)</span> <span class="variable">$(</span><span class="number">1</span>)/bin
    <span class="variable">$(</span><span class="constant">INSTALL_BIN)</span> <span class="variable">$(</span><span class="constant">PKG_BUILD_DIR)</span>/helloworld <span class="variable">$(</span><span class="number">1</span>)/bin/
endef

<span class="variable">$(</span>eval <span class="variable">$(</span>call <span class="constant">BuildPackage,</span>helloworld))
<span class="comment">#已去除逗号后面的空格</span>
</code></pre><p>这次 make -j1 V=s 成功了。生成了 helloworld_1_ar71xx.ipk 。find 一下，看在哪里。</p>
<pre><code>$ <span class="keyword">find</span> -name helloworld*.ipk
.<span class="regexp">/bin/</span>ar71xx<span class="regexp">/packages/</span>base<span class="regexp">/helloworld_1_ar71xx.ipk</span>
</code></pre><h2 id="试验helloworld">试验helloworld</h2><p>将刚生成的 helloworld_1_ar71xx.ipk 文件用 scp 传到目标路由上。本人的路由IP为：192.168.1.2</p>
<p>$ scp bin/ar71xx/packages/base/helloworld_1_ar71xx.ipk root@192.168.1.2:<br>root@192.168.1.2’s password:<br>helloworld_1_ar71xx.ipk                 100% 1993     2.0KB/s   00:00<br>SSH登陆路由器，并安装 helloworld_1_ar71xx.ipk包。</p>
<pre><code>$ ssh root@192.168.1.2
root@192.168.1.2's password: 

BusyBox v1.23.2 (2015-05-03 12:46:04 CST) built-<span class="keyword">in</span> <span class="keyword">shell</span> (ash)
  _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R <span class="keyword">E</span> <span class="keyword">L</span> <span class="keyword">E</span> S S   F R <span class="keyword">E</span> <span class="keyword">E</span> <span class="keyword">D</span> O <span class="literal">M</span>
 -----------------------------------------------------
 CHAOS CALMER (Bleeding Edge, r45594)
 -----------------------------------------------------
<span class="comment">  * 1 1/2 oz Gin            Shake with a glassful</span>
<span class="comment">  * 1/4 oz Triple Sec       of broken ice and pour</span>
<span class="comment">  * 3/4 oz Lime Juice       unstrained into a goblet.</span>
<span class="comment">  * 1 1/2 oz Orange Juice</span>
<span class="comment">  * 1 tsp. Grenadine Syrup</span>
 -----------------------------------------------------
root@OpenWrt:~# <span class="keyword">ls</span>
helloworld_1_ar71xx.ipk
root@OpenWrt:~# opkg install helloworld_1_ar71xx.ipk 
Installing helloworld (1) to root...
Configuring helloworld.
root@OpenWrt:~#
</code></pre><p>安装完成后，执行一下试试看。</p>
<pre><code>root@OpenWrt:~<span class="comment"># helloworld </span>
This <span class="keyword">is</span> <span class="keyword">my</span> hello <span class="property">word</span>!
</code></pre><p>用which命令查看 helloworld 安装的路径：</p>
<p>root@OpenWrt:~# which helloworld<br>    /bin/helloworld<br>在 /bin/ 路径下。</p>
<h2 id="参考来源">参考来源</h2><p>-Openwrt官方Wiki-创建软件包<br><a href="http://wiki.openwrt.org/zh-cn/doc/devel/packages" target="_blank" rel="external">http://wiki.openwrt.org/zh-cn/doc/devel/packages</a><br>-OpenWRT开发之——创建软件包<br><a href="http://my.oschina.net/hevakelcj/blog/410633" target="_blank" rel="external">http://my.oschina.net/hevakelcj/blog/410633</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：代码变成可执行文件，叫做编译（compile）；先编译这个，还是先编译那个（即编译的安排），叫做构建（build）。Make是最常用的构建工具，诞生于1977年，主要用于C语言的项目。但是实际上 ，任何只要某个文件有变化，就要重新构建的项目，都可以用Make构建。构建的规则都写在Makefile文件里面，要学会如何Make命令，就必须学会如何编写Makefile文件。<br>]]>
    
    </summary>
    
      <category term="Makefile" scheme="http://masukio.tk/tags/Makefile/"/>
    
      <category term="Openwrt" scheme="http://masukio.tk/tags/Openwrt/"/>
    
      <category term="Openwrt开发笔记" scheme="http://masukio.tk/categories/Openwrt%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Openwrt编译过程]]></title>
    <link href="http://masukio.tk/2015/07/08/Openwrt-Makefile/"/>
    <id>http://masukio.tk/2015/07/08/Openwrt-Makefile/</id>
    <published>2015-07-07T16:36:24.000Z</published>
    <updated>2015-07-10T10:13:41.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：本篇通过分析Makefile,了解Openwrt编译过程，包括（1）Openwrt目录结构（2）主Makefile的解析过程，各子目录的目标生成。（3）kernel编译过程（4）firmware的生成过程（5）软件包的编译过程<br><a id="more"></a><br>从github上clone了openwrt的代码仓库。</p>
<pre><code>git clone <span class="string">https:</span><span class="comment">//github.com/openwrt-mirror/openwrt.git</span>
</code></pre><h1 id="Openwrt目录结构">Openwrt目录结构</h1><p><img src="http://images.cnitblog.com/blog/563391/201409/141300297779715.png" alt=""></p>
<p>上图是openwrt目录结构，其中第一行是原始目录，第二行是编译过程中生成的目录。各目录的作用是：</p>
<pre><code>tools - 编译时需要一些工具， tools里包含了获取和编译这些工具的命令。里面是一些<span class="constant">Makefile</span>，有的可能还有patch。每个<span class="constant">Makefile</span>里都有一句:$(eval $(call <span class="constant">Host</span>Build))，表示编译这个工具是为了在主机上使用的。
toolchain - 包含一些命令去获取<span class="built_in">kernel</span> headers, <span class="constant">C</span> library, bin-utils, compiler, debugger
<span class="literal">target</span> - 各平台在这个目录里定义了firmware和<span class="built_in">kernel</span>的编译过程。
<span class="keyword">package</span> - 包含针对各个软件包的<span class="constant">Makefile</span>。openwrt定义了一套<span class="constant">Makefile</span>模板，各软件包参照这个模板定义了自己的信息，如软件包的版本、下载地址、编译方式、安装地址等。
<span class="literal">include</span> - openwrt的<span class="constant">Makefile</span>都存放在这里。
scripts - 一些perl脚本，用于软件包管理。
dl - 软件包下载后都放到这个目录里
build_dir - 软件包都解压到build_dir/里，然后在此编译
staging_dir - 最终安装目录。tools, toolchain被安装到这里，rootfs也会放到这里。
feeds - feeds.conf订阅的软件下载目录。
bin - 编译完成之后，firmware和各ipk会放到此目录下。
</code></pre><h1 id="Openwrt编译过程">Openwrt编译过程</h1><h2 id="main_Makefile">main Makefile</h2><p>openwrt根目录下的Makefile是执行make命令时的入口。从这里开始分析。</p>
<pre><code>world:

ifndef ($(OPENWRT_BUILD),<span class="number">1</span>)
  <span class="comment"># 第一个逻辑</span>
   <span class="keyword">...</span>
<span class="keyword">else</span>
  <span class="comment"># 第二个逻辑</span>
   <span class="keyword">...</span>
endif
</code></pre><p>上面这段是主Makefile的结构，可以得知：</p>
<p>执行make时，若无任何目标指定，则默认目标是world<br>执行make时，无参数指定，则会进入第一个逻辑。如果执行命令make OPENWRT_BUILD=1，则直接进入第二个逻辑。</p>
<p>编译时一般直接使用<code>make V=s -j 5</code>这样的命令，不会指定OPENWRT_BUILD变量，显然这里OPENWRT_BUILD用于标记当前openwrt BSP是否已经编译过，因此第一次编译当然应该执行第一个逻辑，同时令OPENWRT_BUILD为1，标示openwrt BSP已经编译过了。</p>
<h2 id="第一个逻辑">第一个逻辑</h2><pre><code>override OPENWRT_B<span class="built_in">UILD</span>=<span class="number">1</span>
<span class="keyword">export</span> OPENWRT_B<span class="built_in">UILD</span>
</code></pre><p>更改了OPENWRT_BUILD变量的值。这里起到的作用是下次执行make时，因为已经编译过，会进入到第二逻辑中。</p>
<p>第一个逻辑中会include toplevel.mk，该文件中的 “%::” 用于解释world目标的规则：</p>
<pre><code>prereq:: prepare-tmpinfo .config
    <span class="variable">@+</span><span class="variable">$(</span>MAKE) -r -s tmp/.prereq-build <span class="variable">$(</span>PREP_MK)
    <span class="variable">@+</span><span class="variable">$(</span>NO_TRACE_MAKE) -r -s <span class="variable">$@</span>

<span class="variable">%:</span>:
    <span class="variable">@+</span><span class="variable">$(</span>PREP_MK) <span class="variable">$(</span>NO_TRACE_MAKE) -r -s prereq
    <span class="variable">@(</span> \
        cp .config tmp/.config; \
        ./scripts/config/conf --defconfig=tmp/.config -w tmp/.config Config.<span class="keyword">in</span> &gt; /dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span>; \
        <span class="keyword">if</span> ./scripts/kconfig.pl <span class="string">'&gt;'</span> .config tmp/.config | grep -q CONFIG; then \
            printf <span class="string">"$(_R)WARNING: your configuration is out of sync. Please run make menuconfig, oldconfig or defconfig!$(_N)\n"</span> &gt;&amp;<span class="number">2</span>; \
        fi \
    )
    <span class="variable">@+</span><span class="variable">$(</span>ULIMIT_FIX) <span class="variable">$(</span>SUBMAKE) -r <span class="variable">$@</span>
</code></pre><p>执行 make V=s 时，上面这段规则简化为：</p>
<pre><code>prereq<span class="type-annotation">::</span> prepare-tmpinfo .config
    <span class="macrocall">@make</span> -r -s tmp/.prereq-build
    <span class="macrocall">@make</span> V=ss -r -s prereq

%<span class="type-annotation">::</span>
    <span class="macrocall">@make</span> V=s -r -s prereq
    <span class="macrocall">@make</span> -w -r world
</code></pre><p>可见其中最终又执行了prereq和world目标，这两个目标都会进入到第二逻辑中。</p>
<h2 id="第二逻辑">第二逻辑</h2><p>首先就引入了target, package, tools, toolchain这四个关键目录里的Makefile文件</p>
<pre><code><span class="literal">include</span> <span class="literal">target</span>/<span class="constant">Makefile</span>
<span class="literal">include</span> <span class="keyword">package</span>/<span class="constant">Makefile</span>
<span class="literal">include</span> tools/<span class="constant">Makefile</span>
<span class="literal">include</span> toolchain/<span class="constant">Makefile</span>
</code></pre><p>这些子目录里的Makefile使用include/subdir.mk里定义的两个函数来动态生成规则，这两个函数是subdir和stampfile</p>
<h2 id="stampfile">stampfile</h2><p>拿target/Makefile举例：</p>
<pre><code><span class="list">(<span class="keyword"><span class="built_in">eval</span></span><span class="list">(<span class="keyword">call</span> stampfile,$<span class="list">(<span class="keyword">curdir</span>)</span>,target,prereq,.config)</span>)</span>
</code></pre><p>会生成规则：</p>
<pre><code>target/stamp-<span class="symbol">prereq:</span>=<span class="variable">$(</span><span class="constant">STAGING_DIR</span>)/stamp/.target_prereq

<span class="variable">$$</span>(target/stamp-prereq)<span class="symbol">:</span> <span class="variable">$(</span><span class="constant">TMP_DIR</span>)/.build .config
  @+<span class="variable">$(</span><span class="constant">SCRIPT_DIR</span>)/timestamp.pl -n <span class="variable">$$</span>(target/stamp-prereq) target .config || \
      make <span class="variable">$$</span>(target/flags-prereq) target/prereq
  <span class="variable">@mkdir</span> -p <span class="variable">$$</span><span class="variable">$$</span>(dirname <span class="variable">$$</span>(target/stamp-prereq))
  <span class="variable">@touch</span> <span class="variable">$$</span>(target/stamp-prereq)

<span class="variable">$$</span>(<span class="keyword">if</span> <span class="variable">$(</span>call debug,target,v),,.<span class="constant">SILENT</span><span class="symbol">:</span> <span class="variable">$$</span>(target/stamp-prereq))

.<span class="constant">PRECIOUS</span><span class="symbol">:</span> <span class="variable">$$</span>(target/stamp-prereq) <span class="comment"># work around a make bug</span>

target/<span class="regexp">/clean:=target/stamp</span>-prereq/clean
target/stamp-prereq/<span class="symbol">clean:</span> <span class="constant">FORCE</span>
  <span class="variable">@rm</span> -f <span class="variable">$$</span>(target/stamp-prereq)
</code></pre><p>所以可以简单的看作：(eval(call stampfile,(curdir),target,prereq,.config))生成了目标(target/stamp-prereq)</p>
<pre><code>对于<span class="keyword">target</span>分别生成了：(<span class="keyword">target</span>/stamp-preq)，(<span class="keyword">target</span>/stamp-copile)， $(<span class="keyword">target</span>/stamp-install)
toolchain : $(toolchain/stamp-install)
<span class="keyword">package</span> : (<span class="keyword">package</span>/stamp-preq),(<span class="keyword">package</span>/stamp-cleanup), (<span class="keyword">package</span>/stamp-compile),(<span class="keyword">package</span>/stamp-install)
tools : $(tools/stamp-install)
</code></pre><h2 id="OpenWrt的主Makefile工作过程">OpenWrt的主Makefile工作过程</h2><h2 id="subdir">subdir</h2><p>subdir这个函数写了一大堆东西，看起来很复杂 。</p>
<p>$(call subdir, target) 会遍历下的子目录，执行 make -C 操作。这样就切入子目录中去了。</p>
<h2 id="目录变量">目录变量</h2><p>几个重要的目录路径：</p>
<p>KERNEL_BUILD_DIR</p>
<pre><code>build_dir/<span class="keyword">target</span>-mipsel_24kec+dsp_uClibc-<span class="number">0.9</span>.33.2/linux-ramips_mt7620a/linux-<span class="number">3.14</span>.18
</code></pre><p>LINUX_DIR</p>
<pre><code>build_dir/<span class="keyword">target</span>-mipsel_24kec+dsp_uClibc-<span class="number">0.9</span>.33.2/linux-ramips_mt7620a/linux-<span class="number">3.14</span>.18
</code></pre><p>KDIR</p>
<pre><code>build_dir/<span class="keyword">target</span>-mipsel_24kec+dsp_uClibc-<span class="number">0.9</span>.33.2/linux-ramips_mt7620a
</code></pre><p>BIN_DIR</p>
<pre><code>bin/ramips
Makefile中包含了rules.<span class="keyword">mk</span>, target.<span class="keyword">mk</span>等.<span class="keyword">mk</span>文件，这些文件中定义了许多变量，有些是路径相关的，有些是软件相关的。这些变量在整个Makefile工程中经常被用到，
</code></pre><p>TARGET_ROOTFS_DIR</p>
<pre><code>build_dir/<span class="keyword">target</span>-mipsel_24kec+dsp_uClibc-<span class="number">0.9</span>.33.2
</code></pre><p>BUILD_DIR</p>
<pre><code>build_dir/<span class="keyword">target</span>-mipsel_24kec+dsp_uClibc-<span class="number">0.9</span>.33.2
</code></pre><p>STAGING_DIR_HOST</p>
<pre><code>staging_dir/toolchain-mipsel_24kec+dsp_gcc-4.8-linaro_uClibc-0.9.33.2
</code></pre><p>TARGET_DIR</p>
<pre><code>build_dir/<span class="literal">target</span>-mipsel_24kec+dsp_uClibc-<span class="number">0</span>.<span class="number">9.33</span>.<span class="number">2</span>/<span class="literal">root</span>-ramips
</code></pre><h2 id="kernel_编译：">kernel 编译：</h2><p>target/linux/ramips/Makefile: <code>$(eval $(call BuildTarget))</code></p>
<p>target/linux/Makefile : <code>export TARGET_BUILD=1</code></p>
<pre><code>根目录中<span class="constant">Makefile：</span><span class="keyword">include</span> target/<span class="constant">Makefile </span>--&gt;
target/<span class="constant">Makefile中</span>：<span class="variable">$(</span>curdir)/<span class="symbol">builddirs:</span>=linux sdk imagebuilder toolchain --&gt;
target/linux中<span class="constant">Makefile:</span> @+<span class="variable">$(</span><span class="constant">NO_TRACE_MAKE)</span> -<span class="constant">C </span><span class="variable">$(</span><span class="constant">BOARD)</span> <span class="variable">$@</span>  --&gt;显然这里<span class="constant">BOARD是</span>ramips
target/linux/ramips中<span class="constant">Makefile:</span>    <span class="keyword">include</span> <span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/target.mk
</code></pre><p>include/target.mk中如下内容:</p>
<pre><code>ifeq (<span class="variable">$(</span><span class="constant">TARGET_BUILD)</span>,<span class="number">1</span>)
  <span class="keyword">include</span> <span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/kernel-build.mk
  <span class="constant">BuildTarget?</span>=<span class="variable">$(</span><span class="constant">BuildKernel)</span>
endif
<span class="constant">BuildKernel是</span><span class="keyword">include</span>/kernel-build.
</code></pre><p>mk定义的一个多行变量，其中描述了如何编译内核, 主要关注其中install规则的依赖链：</p>
<pre><code>  <span class="variable">$(</span><span class="constant">KERNEL_BUILD_DIR)</span>/symtab.<span class="symbol">h:</span> <span class="constant">FORCE</span>
    rm -f <span class="variable">$(</span><span class="constant">KERNEL_BUILD_DIR)</span>/symtab.h
    touch <span class="variable">$(</span><span class="constant">KERNEL_BUILD_DIR)</span>/symtab.h
    +<span class="variable">$(</span><span class="constant">MAKE)</span> <span class="variable">$(</span><span class="constant">KERNEL_MAKEOPTS)</span> vmlinux
    ...

  <span class="variable">$(</span><span class="constant">LINUX_DIR)</span>/.<span class="symbol">image:</span> <span class="variable">$(</span><span class="constant">STAMP_CONFIGURED)</span> <span class="variable">$(</span>if <span class="variable">$(</span><span class="constant">CONFIG_STRIP_KERNEL_EXPORTS)</span>,<span class="variable">$(</span><span class="constant">KERNEL_BUILD_DIR)</span>/symtab.h) <span class="constant">FORCE</span>
    <span class="variable">$(</span><span class="constant">Kernel/CompileImage)</span>
    <span class="variable">$(</span><span class="constant">Kernel/CollectDebug)</span>
    touch <span class="variable">$$</span>@


  <span class="symbol">install:</span> <span class="variable">$(</span><span class="constant">LINUX_DIR)</span>/.image
    +<span class="variable">$(</span><span class="constant">MAKE)</span> -<span class="constant">C </span>image compile install <span class="constant">TARGET_BUILD=</span>
<span class="number">1</span>. 触发make vmlinux命令生成vmlinux： install --&gt; <span class="variable">$(</span><span class="constant">LINUX_DIR)</span>/.image --&gt; <span class="variable">$(</span><span class="constant">KERNEL_BUILD_DIR)</span>/symtab.h --&gt; `<span class="variable">$(</span><span class="constant">MAKE)</span> <span class="variable">$(</span><span class="constant">KERNEL_MAKEOPTS)</span> vmlinux`

<span class="number">2</span>. 对vmlinux做objcopy, strip操作<span class="symbol">:</span> <span class="variable">$(</span><span class="constant">LINUX_DIR)</span>/.image --&gt; <span class="variable">$(</span><span class="constant">Kernel/CompileImage)</span> --&gt; <span class="variable">$(</span>call <span class="constant">Kernel/CompileImage/Default)</span> --&gt; <span class="variable">$(</span>call <span class="constant">Kernel/CompileImage/Default)</span>

    <span class="variable">$(</span><span class="constant">KERNEL_CROSS)</span>objcopy -<span class="constant">O </span>binary <span class="variable">$(</span><span class="constant">OBJCOPY_STRIP)</span> -<span class="constant">S </span><span class="variable">$(</span><span class="constant">LINUX_DIR)</span>/vmlinux <span class="variable">$(</span><span class="constant">LINUX_KERNEL)</span><span class="variable">$(</span><span class="number">1</span>)
        --&gt; build_dir/target-mipsel_24kec+dsp_uClibc-<span class="number">0</span>.<span class="number">9.33</span>.<span class="number">2</span>/linux-ramips_mt7620a/vmlinux

    <span class="variable">$(</span><span class="constant">KERNEL_CROSS)</span>objcopy <span class="variable">$(</span><span class="constant">OBJCOPY_STRIP)</span> -<span class="constant">S </span><span class="variable">$(</span><span class="constant">LINUX_DIR)</span>/vmlinux <span class="variable">$(</span><span class="constant">KERNEL_BUILD_DIR)</span>/vmlinux<span class="variable">$(</span><span class="number">1</span>).elf
        --&gt; build_dir/target-mipsel_24kec+dsp_uClibc-<span class="number">0</span>.<span class="number">9.33</span>.<span class="number">2</span>/linux-ramips_mt7620a/vmlinux.elf

    <span class="variable">$(</span><span class="constant">CP)</span> <span class="variable">$(</span><span class="constant">LINUX_DIR)</span>/vmlinux <span class="variable">$(</span><span class="constant">KERNEL_BUILD_DIR)</span>/vmlinux.debug
        --&gt; build_dir/target-mipsel_24kec+dsp_uClibc-<span class="number">0</span>.<span class="number">9.33</span>.<span class="number">2</span>/linux-ramips_mt7620a/vmlinux.debug
</code></pre><h2 id="生成firmware">生成firmware</h2><p>firmware由kernel和rootfs两个部分组成，要对两个部分先分别处理，然后再合并成一个.bin文件。先看一下这个流程。</p>
<p>“target/linux/ramips/image/Makefile” 文件中的最后一句：$(eval $(call BuildImage))，将BuildImage展开在这里。BuildImage定义在 include/image.mk 文件中，其中定义了数个目标的规则。</p>
<pre><code>define BuildImage

    compile: compile-targets FORCE
        **$(<span class="operator"><span class="keyword">call</span> Build/Compile)**

    <span class="keyword">install</span>: compile <span class="keyword">install</span>-targets <span class="keyword">FORCE</span>
        ...
        $(<span class="keyword">call</span> Image/BuildKernel) ## 处理vmlinux
        ...
        $(<span class="keyword">call</span> Image/mkfs/squashfs) ## 生成squashfs，并与vmlinux合并成一个.<span class="keyword">bin</span>文件
        ...

endef</span>
</code></pre><h2 id="处理vmlinux:_Image/BuildKernel">处理vmlinux: Image/BuildKernel</h2><p>target/linux/ramips/image/Makefile:</p>
<pre><code>define <span class="constant">Image/BuildKernel</span>
    cp <span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux.elf <span class="variable">$(</span><span class="constant">BIN_DIR)</span>/<span class="variable">$(</span><span class="constant">VMLINUX)</span>.elf
    cp <span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux <span class="variable">$(</span><span class="constant">BIN_DIR)</span>/<span class="variable">$(</span><span class="constant">VMLINUX)</span>.bin
    <span class="variable">$(</span>call <span class="constant">CompressLzma,</span><span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux,<span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux.bin.lzma)
    <span class="variable">$(</span>call <span class="constant">MkImage,</span>lzma,<span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux.bin.lzma,<span class="variable">$(</span><span class="constant">KDIR)</span>/uImage.lzma)
    cp <span class="variable">$(</span><span class="constant">KDIR)</span>/uImage.lzma <span class="variable">$(</span><span class="constant">BIN_DIR)</span>/<span class="variable">$(</span><span class="constant">UIMAGE)</span>.bin
ifneq (<span class="variable">$(</span><span class="constant">CONFIG_TARGET_ROOTFS_INITRAMFS)</span>,)
    cp <span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux-initramfs.elf <span class="variable">$(</span><span class="constant">BIN_DIR)</span>/<span class="variable">$(</span><span class="constant">VMLINUX)</span>-initramfs.elf
    cp <span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux-initramfs <span class="variable">$(</span><span class="constant">BIN_DIR)</span>/<span class="variable">$(</span><span class="constant">VMLINUX)</span>-initramfs.bin
    <span class="variable">$(</span>call <span class="constant">CompressLzma,</span><span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux-initramfs,<span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux-initramfs.bin.lzma)
    <span class="variable">$(</span>call <span class="constant">MkImage,</span>lzma,<span class="variable">$(</span><span class="constant">KDIR)</span>/vmlinux-initramfs.bin.lzma,<span class="variable">$(</span><span class="constant">KDIR)</span>/uImage-initramfs.lzma)
    cp <span class="variable">$(</span><span class="constant">KDIR)</span>/uImage-initramfs.lzma <span class="variable">$(</span><span class="constant">BIN_DIR)</span>/<span class="variable">$(</span><span class="constant">UIMAGE)</span>-initramfs.bin
endif
    <span class="variable">$(</span>call <span class="constant">Image/Build/Initramfs)</span>
endef
</code></pre><h2 id="lzma压缩内核">lzma压缩内核</h2><pre><code>build_dir/target-mipsel_24kec+dsp_uClibc-<span class="number">0.9</span>.<span class="number">33.2</span>/linux-ramips_mt7620a/ 目录中:

lzma e vmlinux -lc1 -lp2 -pb2 vmlinux<span class="class">.bin</span><span class="class">.lzma</span>
</code></pre><h2 id="MkImage">MkImage</h2><pre><code>build_dir/target-mipsel_24kec+dsp_uClibc-<span class="number">0.9</span>.<span class="number">33.2</span>/linux-ramips_mt7620a/ 目录中：

mkimage -A mips -O linux -T  kernel -C lzma -<span class="tag">a</span> <span class="number">0</span>x80000000 -e <span class="number">0</span>x80000000 -n <span class="string">"MIPS OpenWrt Linux-3.14.18"</span> -d vmlinux<span class="class">.bin</span><span class="class">.lzma</span> uImage<span class="class">.lzma</span>
copy
VMLINUX:=$(IMG_PREFIX)-vmlinux --&gt; openwrt-ramips-mt7620a-vmlinux
UIMAGE:=$(IMG_PREFIX)-uImage --&gt; openwrt-ramips-mt7620a-uImage
cp $(KDIR)/uImage<span class="class">.lzma</span> $(BIN_DIR)/$(UIMAGE)<span class="class">.bin</span>
把uImage.lzma复制到bin/ramips/目录下：
cp $(KDIR)/uImage<span class="class">.lzma</span> bin/ramips/openwrt-ramips-mt7620a-uImage
</code></pre><h2 id="制作squashfs，生成-bin:_$(call_Image/mkfs/squashfs)">制作squashfs，生成.bin: $(call Image/mkfs/squashfs)</h2><pre><code>define <span class="constant">Image</span>/mkfs/squashfs
    <span class="variable">@mkdir</span> -p <span class="variable">$(</span><span class="constant">TARGET_DIR</span>)/overlay
    <span class="variable">$(</span><span class="constant">STAGING_DIR_HOST</span>)/bin/mksquashfs4 <span class="variable">$(</span><span class="constant">TARGET_DIR</span>) <span class="variable">$(</span><span class="constant">KDIR</span>)/root.squashfs -nopad -noappend -root-owned -comp <span class="variable">$(</span><span class="constant">SQUASHFSCOMP</span>) <span class="variable">$(</span><span class="constant">SQUASHFSOPT</span>) -processors <span class="variable">$(</span><span class="keyword">if</span> <span class="variable">$(</span><span class="constant">CONFIG_PKG_BUILD_JOBS</span>),<span class="variable">$(</span><span class="constant">CONFIG_PKG_BUILD_JOBS</span>),<span class="number">1</span>)
    <span class="variable">$(</span>call <span class="constant">Image</span>/<span class="constant">Build</span>,squashfs)
endif
</code></pre><h2 id="mkdir_-p_$(TARGET_DIR)/overlay">mkdir -p $(TARGET_DIR)/overlay</h2><pre><code><span class="title">mkdir</span> -p build_dir/target-mipsel_24kec+dsp_uClibc-<span class="number">0.9.33.2</span>/root-ramips/overlay
</code></pre><h2 id="mksquashfs4">mksquashfs4</h2><pre><code><span class="variable">$(</span><span class="constant">STAGING_DIR_HOST</span>)/bin/mksquashfs4 <span class="variable">$(</span><span class="constant">TARGET_DIR</span>) <span class="variable">$(</span><span class="constant">KDIR</span>)/root.squashfs -nopad -noappend -root-owned -comp <span class="variable">$(</span><span class="constant">SQUASHFSCOMP</span>) <span class="variable">$(</span><span class="constant">SQUASHFSOPT</span>) -processors <span class="variable">$(</span><span class="keyword">if</span> <span class="variable">$(</span><span class="constant">CONFIG_PKG_BUILD_JOBS</span>),<span class="variable">$(</span><span class="constant">CONFIG_PKG_BUILD_JOBS</span>),<span class="number">1</span>)
</code></pre><h2 id="制作squashfs文件系统，生成root-squashfs:">制作squashfs文件系统，生成root.squashfs:</h2><pre><code>mksquashfs4 root-ramips root<span class="class">.squashfs</span> -nopad -noappend -root-owned -comp gzip -<span class="tag">b</span> <span class="number">256</span>k -<span class="tag">p</span> <span class="string">'/dev d 755 0 0'</span> -<span class="tag">p</span> <span class="string">'/dev/console c 600 0 0 5 1'</span> -processors <span class="number">1</span>
$(call Image/Build,squashfs)
</code></pre><p>在 target/linux/ramips/image/Makefile 中：</p>
<pre><code>define Image/Build
    $(call Image/Build/$(<span class="number">1</span>))
    dd <span class="keyword">if</span>=$(KDIR)/root.$(<span class="number">1</span>) <span class="keyword">of</span>=$(BIN_DIR)/$(IMG_PREFIX)-root.$(<span class="number">1</span>) bs=<span class="number">128</span>k conv=sync
    $(call Image/Build/Profile/$(PROFILE),$(<span class="number">1</span>))
endef
</code></pre><p>dd if=(KDIR)/root.squashfsof=(BIN_DIR)/$(IMG_PREFIX)-root.squashfs bs=128k conv=sync<br>dd if=build_dir/target-mipsel_24kec+dsp_uClibc-0.9.33.2/linux-ramips_mt7620a/root.squashfs of=bin/ramips/openwrt-ramips-mt7620-root.squashfs bs=128k conv=sync</p>
<p>(callImage/Build/Profile/(PROFILE),squashfs)<br>target/linux/ramips/mt7620a/profiles/00-default.mk, 中调用 Profile 函数：<code>$(eval $(call Profile,Default))</code></p>
<p>include/target.mk 中定义了 Profile 函数， 其中令 PROFILE=Default</p>
<pre><code><span class="class"><span class="keyword">define</span> <span class="title">Image</span>/<span class="title">Build</span>/<span class="title">Profile</span>/<span class="title">Default</span>
    $</span>(call Image/Build/Profile/MT7620a,$(<span class="number">1</span>))
    <span class="attribute">...</span>
endef
</code></pre><p>规则依赖序列如下：</p>
<pre><code>$<span class="function"><span class="params">(call Image<span class="pi">/Build/Profile/</span>$(PROFILE),squashfs)</span>
  --&gt;</span> $<span class="function"><span class="params">(call BuildFirmware/Default8M/squashfs,squashfs,mt7620a,MT7620a)</span>
      --&gt;</span> $<span class="function"><span class="params">(call BuildFirmware/OF,squashfs,mt7620a,MT7620a,<span class="number">8060928</span>)</span>
          --&gt;</span> $<span class="function"><span class="params">(call MkImageLzmaDtb,mt7620a,MT7620a)</span>
              --&gt;</span> $<span class="function"><span class="params">(call PatchKernelLzmaDtb,mt7620a,MT7620a)</span>
              --&gt;</span> $<span class="function"><span class="params">(call MkImage,lzma,$(KDIR)/vmlinux-mt7620a.bin.lzma,$(KDIR)/vmlinux-mt7620a.uImage)</span>
      --&gt;</span> $(call MkImageSysupgrade/squashfs,squashfs,mt7620a,<span class="number">8060928</span>)
</code></pre><p>其中的主要步骤：</p>
<ul>
<li>复制： cp (KDIR)/vmlinux(KDIR)/vmlinux-mt7620a</li>
<li>生成dtb文件：(LINUXDIR)/scripts/dtc/dtc-Odtb-o(KDIR)/MT7620a.dtb ../dts/MT7620a.dts</li>
<li>将内核与dtb文件合并：(STAGINGDIRHOST)/bin/patch-dtb(KDIR)/vmlinux-mt7620a $(KDIR)/MT</li>
<li><p>使用lzma压缩：(callCompressLzma,(KDIR)/vmlinux-mt7620a,$(KDIR)/vmlinux-mt7620a.bin.lzma)<br>将lzma压缩后的文件经过mkimage工具处理，即在头部添加uboot可识别的信息。<br>接下来就是合并生成firmware固件了：</p>
<p>  MkImageSysupgrade/squashfs, squashfs, mt7620a,8060928</p>
<p>  cat vmlinux-mt7620a.uImage root.squashfs &gt; openwrt-ramips-mt7620-mt7620a-squashfs-sysupgrade.bin<br>  —&gt; 制作squashfs bin文档, 并确认它的大小 &lt; 8060928 才是有效的，否则报错。</p>
</li>
</ul>
<p>总结： 整个流程下来，其实最烦索的还是对内核生成文件vmlinux的操作，经过了objcopy, patch-dtb, lzma, mkimage 等过程生成一个uImage，再与mksquashfs工具制作的文件系统rootfs.squashfs合并。</p>
<h1 id="主MakeFile文件">主MakeFile文件</h1><p>OpenWrt的主Makefile文件只有100行，可以简单分为三部分，1~17行为前导部分，19~31为首次执行部分，33~101为再次执行部分。</p>
<h2 id="前导部分">前导部分</h2><pre><code><span class="constant">CURDIR为</span>make默认变量，默认值为当前目录。
前导部分主要把变量<span class="constant">TOPDIR赋</span>值为当前目录，把变量<span class="constant">LC_ALL、LANG赋</span>值为<span class="constant">C，</span>并使用变量延伸指示符export，把上述三个变量延伸到下层<span class="constant">Makefile。</span>

使用文件使用指示符<span class="keyword">include</span>引入<span class="variable">$(</span><span class="constant">TOPDIR)</span>/<span class="keyword">include</span>/host.mk。在<span class="constant">OpenWrt的</span>主<span class="constant">Makefile文</span>件使用了多次<span class="keyword">include</span>指示符，说明主<span class="constant">Makefile文</span>件被拆分成多个文件，被拆分的文件放在不同的目录。拆分的目的是明确各部分的功能，而且增加其灵活性。
在前导部分比较费解的是使用world目标，在makefile中基本规则为：
<span class="constant">TARGETS </span><span class="symbol">:</span> <span class="constant">PREREQUISITES</span>
<span class="constant">COMMAND</span>
...

即makefile规则由目标、依赖、命令三部分组成，在<span class="constant">OpenWrt的</span>主<span class="constant">Makefile文</span>件的第一个目标world没有依赖和命令。它主要起到指示当make命令不带目标时所要执行的目标，没有设定依赖和命令部分表明此目标在此后将会有其他依赖关系或命令。world目标的命令需要进一步参考<span class="variable">$(</span><span class="constant">TOPDIR)</span>/<span class="keyword">include</span>/toplevel.mk和主<span class="constant">Makefile文</span>件的再次执行部分。

<span class="comment">##首次执行部分</span>
<span class="constant">OPENWRT_BUILD是</span>区分首次执行与再次执行的变量。在首次执行时使用强制赋值指示符override把<span class="constant">OPENWRT_BUILD赋</span>值为<span class="number">1</span>，并使用变量延伸指示符export把<span class="constant">OPENWRT_BUILD延</span>伸。在<span class="constant">OPENWRT_BUILD使</span>用强制赋值指示符override意味着make命令行可能引入<span class="constant">OPENWRT_BUILD参</span>数。

引入<span class="variable">$(</span><span class="constant">TOPDIR)</span>/<span class="keyword">include</span>/debug.mk、<span class="variable">$(</span><span class="constant">TOPDIR)</span>/<span class="keyword">include</span>/depends.mk、<span class="variable">$(</span><span class="constant">TOPDIR)</span>/<span class="keyword">include</span>/toplevel.mk三个文件，由于<span class="constant">TOPDIR是</span>固定的，所以三个文件也是固定的。其中<span class="variable">$(</span><span class="constant">TOPDIR)</span>/<span class="keyword">include</span>/toplevel.mk的<span class="number">135</span>行%<span class="symbol">:</span><span class="symbol">:</span>有效解释首次执行时world目标的规则。
</code></pre><h2 id="再次执行部分">再次执行部分</h2><pre><code>引入rules.mk、<span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/depends.mk、<span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/subdir.mk、target/<span class="constant">Makefile、</span>package/<span class="constant">Makefile、</span>tools/<span class="constant">Makefile、</span>toolchain/<span class="constant">Makefile七</span>个文件，rules.mk没有目录名，即引入与主<span class="constant">Makefile文</span>件目录相同的rules.mk。在rules.mk定义了<span class="constant">INCLUDE_DIR为</span><span class="variable">$(</span><span class="constant">TOPDIR)</span>/<span class="keyword">include</span>，所以<span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/depends.mk实际上与首次执行时引入的<span class="variable">$(</span><span class="constant">TOPDIR)</span>/<span class="keyword">include</span>/depends.mk是同一个文件。

四个子目录下的<span class="constant">Makefile实</span>际上是不能独立执行。主要利用<span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/subdir.mk动态建立规则，诸如<span class="variable">$(</span>toolchain/stamp-install)目标是靠<span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/subdir.mk的stampfile函数动态建立。在package/<span class="constant">Makefile动</span>态建立了<span class="variable">$(</span>package/ stamp-prereq)、<span class="variable">$(</span>package/ stamp-cleanup)、<span class="variable">$(</span>package/ stamp-compile)、<span class="variable">$(</span>package/ stamp-install)、<span class="variable">$(</span>package/ stamp-rootfs-prepare)目标。

定义一些使用变量命名的目标，其变量的赋值位置在<span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/subdir.mk的stampfile函数中。目标只有依赖关系，可能说明其工作顺序，在<span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/subdir.mk的stampfile函数中有进一步说明其目标执行的命令，并为目标建立一个空文件，即使用变量命名的目标为真实的文件。
</code></pre><h2 id="定义一些使用固定的目标规则">定义一些使用固定的目标规则</h2><pre><code>其中：clean是清除编译结果的目标，清除<span class="variable">$(</span><span class="constant">BUILD_DIR)</span> <span class="variable">$(</span><span class="constant">BIN_DIR)</span> <span class="variable">$(</span><span class="constant">BUILD_LOG_DIR)</span>三个目录的用意是十分明确。暂时不知道为什么执行make target/linux/clean。

dirclean是删除所有编译过程产生的目录和文件的目标，执行dirclean目标依赖于clean，因此将执行clean目标所执行的命令，然后删除<span class="variable">$(</span><span class="constant">STAGING_DIR)</span> <span class="variable">$(</span><span class="constant">STAGING_DIR_HOST)</span> <span class="variable">$(</span><span class="constant">STAGING_DIR_TOOLCHAIN)</span> <span class="variable">$(</span><span class="constant">TOOLCHAIN_DIR)</span> <span class="variable">$(</span><span class="constant">BUILD_DIR_HOST)</span> <span class="variable">$(</span><span class="constant">BUILD_DIR_TOOLCHAIN)</span>目录，以及删除<span class="variable">$(</span><span class="constant">TMP_DIR)</span>目录。上述目录的变量均在rules.mk定义。好像删除staging_dir目录就意味着删除staging_dir目录下的所有子目录，不知道为什么要强调删除<span class="variable">$(</span><span class="constant">STAGING_DIR_HOST)</span> <span class="variable">$(</span><span class="constant">STAGING_DIR_TOOLCHAIN)</span> <span class="variable">$(</span><span class="constant">TOOLCHAIN_DIR)</span>目录。同样删除builde_dir目录就意味着删除builde_dir目录下的所有子目录，不知道为什么要强调删除<span class="variable">$(</span><span class="constant">BUILD_DIR_TOOLCHAIN)</span>目录。

tmp/.prereq_packages目标是对所需软件包的预处理。目标依赖于.config，即执行make menuconfig后将会进行一次所需软件包的预处理。不知什么原因在编译前删除tmp目录，执行时无法建立tmp/.prereq_packages文件。

prereq应该是预请求目标，在<span class="constant">OpenWrt执</span>行<span class="constant">Makefile时</span>好像都要先执行prereq目标。

prepare应该是准备目标，是world依赖的一个伪目标。依赖于文件.config和<span class="variable">$(</span>tools/stamp-install) <span class="variable">$(</span>toolchain/stamp-install)目标。

world就是编译的目标。依赖于prepare为目标和前面提到的变量命名目标。采用取消隐含规则方式执行package/index目标。package/index目标在package/<span class="constant">Makefile的</span><span class="number">92</span>行定义。

package/symlinks和package/symlinks-install是更新或安装软件包来源的目标，使用<span class="variable">$(</span><span class="constant">SCRIPT_DIR)</span>/feeds脚本文件完成。

package/symlinks-clean是清除软件包来源的目标，也是使用<span class="variable">$(</span><span class="constant">SCRIPT_DIR)</span>/feeds脚本文件完成。

最后使用伪目标.<span class="constant">PHONY说</span>明clean dirclean prereq prepare world package/symlinks package/symlinks-install package/symlinks-clean属于伪目标。通过伪目标说明可以知道可以执行的目标。
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：本篇通过分析Makefile,了解Openwrt编译过程，包括（1）Openwrt目录结构（2）主Makefile的解析过程，各子目录的目标生成。（3）kernel编译过程（4）firmware的生成过程（5）软件包的编译过程<br>]]>
    
    </summary>
    
      <category term="Makefile" scheme="http://masukio.tk/tags/Makefile/"/>
    
      <category term="Openwrt" scheme="http://masukio.tk/tags/Openwrt/"/>
    
      <category term="Openwrt开发笔记" scheme="http://masukio.tk/categories/Openwrt%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用Image Builder编译Openwrt固件]]></title>
    <link href="http://masukio.tk/2015/07/07/Image-Builder/"/>
    <id>http://masukio.tk/2015/07/07/Image-Builder/</id>
    <published>2015-07-07T11:04:22.000Z</published>
    <updated>2015-07-10T10:13:45.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：Image Builder（Image Generator）是Openwrt官方提供的用来快捷生成所需固件的工具包，这个工具包已经包含并配置好了所有编译需要的东西，一条命令即可生成所需的固件，并且可以通过修改Makefile和一些配置文件来生成自定义的固件，是相对简洁易用的方式。<br><a id="more"></a></p>
<h1 id="使用Image_Builder编译自定义OpenWrt固件">使用Image Builder编译自定义OpenWrt固件</h1><h2 id="下载适合自己无线路由器的Image_Builder">下载适合自己无线路由器的Image Builder</h2><p>从 <a href="http://downloads.openwrt.org/snapshots/trunk/" target="_blank" rel="external">http://downloads.openwrt.org/snapshots/trunk/</a> 选择适合自己的目录，比如我选的是:<a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/" target="_blank" rel="external">http://downloads.openwrt.org/snapshots/trunk/ar71xx/</a></p>
<pre><code>cd /opt
wget http:<span class="comment">//downloads.openwrt.org/snapshots/trunk/ar71xx/OpenWrt-ImageBuilder-ar71xx_generic-for-linux-x86_64.tar.bz2</span>
tar -xjf  OpenWrt-ImageBuilder-ar71xx_generic-<span class="keyword">for</span>-linux-x86_64<span class="class">.tar</span><span class="class">.bz2</span>
</code></pre><h2 id="确定OpenWrt无线路由器的PROFILE值">确定OpenWrt无线路由器的PROFILE值</h2><pre><code><span class="keyword">cd</span> OpenWrt-ImageBuilder-ar71xx_generic-<span class="keyword">for</span>-linux-x86_64
make <span class="keyword">info</span>
</code></pre><p>找到自己固件的型号，比如我的是 <code>TP-LINK TL-WR2543N/ND</code>,它的PROFILE值是TLWR2543。</p>
<h2 id="找出默认应该包含进OpenWrt固件的包">找出默认应该包含进OpenWrt固件的包</h2><p>对于TP-LINK WR2543无线路由器来说，可以这样获取：</p>
<pre><code>echo <span class="variable">$(</span>wget -qO - <span class="symbol">http:</span>/<span class="regexp">/downloads.openwrt.org/snapshots</span><span class="regexp">/trunk/ar</span>71xx/config | sed -ne <span class="string">'s/^CONFIG_PACKAGE_\([a-z0-9-]*\)=y/\1/ip'</span>)
</code></pre><blockquote>
<p>base-files busybox dnsmasq dropbear firewall fstools jsonfilter libc libgcc mtd netifd opkg procd swconfig ubox ubus ubusd uci kmod-crypto-aes kmod-crypto-arc4 kmod-crypto-core kmod-ledtrig-usbdev kmod-lib-crc-ccitt kmod-nls-base kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-nathelper kmod-ipv6 kmod-ppp kmod-pppoe kmod-pppox kmod-slhc kmod-gpio-button-hotplug kmod-usb-core kmod-usb-ohci kmod-usb2 kmod-ath kmod-ath9k kmod-ath9k-common kmod-cfg80211 kmod-mac80211 libip4tc libip6tc libxtables libblobmsg-json libiwinfo libjson-c libnl-tiny libubox libubus libuci ip6tables iptables hostapd-common iw odhcp6c odhcpd ppp ppp-mod-pppoe wpad-mini iwinfo jshn libjson-script uboot-envtools</p>
</blockquote>
<p>以上默认包，我们要包含在PACKAGES命令行参数中，并再加上必要的包：wget shadowsocks-libev-polarssl，如果你需要网页管理界面，可以再加上luci-ssl。     注意，在编译前要把 shadowsocks-libev-polarssl_1.x.x_ar71xx.ipk 放到 OpenWrt-ImageBuilder-ar71xx_generic-for-linux-x86_64/packages/base/ 目录下。</p>
<p>如果你的openWrt版本是 ATTITUDE ADJUSTMENT，可能要加上iptables-mod-nat-extra包，如果没安装的话iptables的端口转发会不支持。</p>
<h2 id="OpenWrt_Image_Builder的三个命令行参数">OpenWrt Image Builder的三个命令行参数</h2><ul>
<li>PROFILE    指定设备类型，此处是　TLWR2543</li>
<li>PACKAGES    指定要编译进固件的包</li>
<li>FILES        指定要编译进固件的自定义文件，如网络有关配置文件, /opt/openwrt-wr2543</li>
</ul>
<h2 id="开始编译OpenWrt自动翻墙固件">开始编译OpenWrt自动翻墙固件</h2><pre><code><span class="keyword">cd</span> /<span class="keyword">opt</span>/OpenWrt-ImageBuilder-ar71xx_generic-<span class="keyword">for</span>-linux-x86_64
<span class="keyword">make</span> image PROFILE=TLWR2543 PACKAGES=<span class="string">"base-files busybox dnsmasq dropbear firewall fstools jsonfilter libc libgcc mtd netifd opkg procd swconfig ubox ubus ubusd uci kmod-crypto-aes kmod-crypto-arc4 kmod-crypto-core kmod-ledtrig-usbdev kmod-lib-crc-ccitt kmod-nls-base kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-nathelper kmod-ipv6 kmod-ppp kmod-pppoe kmod-pppox kmod-slhc kmod-gpio-button-hotplug kmod-usb-core kmod-usb-ohci kmod-usb2 kmod-ath kmod-ath9k kmod-ath9k-common kmod-cfg80211 kmod-mac80211 libip4tc libip6tc libxtables libblobmsg-json libiwinfo libjson-c libnl-tiny libubox libubus libuci ip6tables iptables hostapd-common iw odhcp6c odhcpd ppp ppp-mod-pppoe wpad-mini iwinfo jshn libjson-script uboot-envtools ipset wget shadowsocks-libev-polarssl luci-ssl"</span> FILES=/<span class="keyword">opt</span>/openwrt-wr2543
</code></pre><p>编译好的的固件在 /opt/OpenWrt-ImageBuilder-ar71xx_generic-for-linux-x86_64/bin/ar71xx/目录，升级固件要用到的是　openwrt-ar71xx-generic-tl-wr2543-v1-squashfs-sysupgrade.bin</p>
<h1 id="Image_Builder命令参数">Image Builder命令参数</h1><h2 id="编译命令">编译命令</h2><pre><code>make image <span class="variable">PROFILE=</span>XXX <span class="variable">PACKAGES=</span><span class="string">"pkg1 pk2 -pkg3 -pkg4"</span> <span class="variable">FILES=</span>files/
</code></pre><p>共有三个传递的参数：PROFILE PACKAGES FILES</p>
<p>PROFILE=XXX是指预定义的Profile，对应你的路由型号，使用一下命令查看所有的PROFILE：</p>
<pre><code><span class="title">make</span> <span class="built_in">info</span>
</code></pre><p>PAKAGES后面罗列出需要添加到固件中的额外的包，不填写的话只包含预定义的需要的最少的包，如果前面以”-“符号开头的表示不不含这个包，比如说：PACKAGES=”luci luci-i18n-chinese -pppox”</p>
<p>而我们希望耍好的固件默认安装luci并开启相关服务以便我们刷机或者重置后直接通过网页访问luci界面配置路由等等 此时我们可以添加以下几个包，有其他需求可自己添加比如说DDNS SAMBA等等：</p>
<pre><code><span class="title">luci</span>
luci-i18n-chinese    <span class="comment"># 中文支持</span>
luci-sgi-uhttpd      <span class="comment"># 默认开启utttpd，刷机后可直接网页访问luci</span>
luci-app-qos         <span class="comment"># QOS</span>
luci-app-upnp        <span class="comment"># UPNP</span>
luci-proto-ipv6      <span class="comment"># 向luci添加ipv6相关协议的完整支持</span>
</code></pre><p>而我们还希望，刷机后可以默认开启无线（OpenWRT官方固件默认是不开启的） 配置好无线和WAN的相关设置 刷完省心 无需再改配置，此时就需要第三个传递的参数FILES</p>
<p>可以通过scp命令从当前配置好的路由上下载相关的配置文件，添加至固件中来达成，在终端中：</p>
<pre><code>mkdir -p files/etc/config
scp root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">1</span><span class="symbol">:/etc/config/network</span> files/etc/config/
scp root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">1</span><span class="symbol">:/etc/config/wireless</span> files/etc/config/
scp root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">1</span><span class="symbol">:/etc/config/firewall</span> files/etc/config/
</code></pre><p>期间需要输入路由器密码，下载完成后在files文件夹下查看下载到的文件</p>
<p>如果需要添加其他的配置文件，自行执行scp命令即可，格式为：<br>    scp root@路由器IP:配置文件位置 保存位置</p>
<p>最后，需要修改ROM大小，在解压的目录下，找到:</p>
<p>target/linux/ar71xx(此处替换成自己芯片信号)/image/Makefile</p>
<p>用文本编辑器打开Makefile，查找自己的路由型号，以TPLINK WR720N为例找到以下一行：</p>
<pre><code>$(<span class="built_in">eval</span> $(call SingleProfile,TPLINK-LZMA,<span class="number">64</span>kraw,TLWR720NV3,tl-wr720n-v3,TL-WR720N-v3,ttyATH0,<span class="number">115200</span>,<span class="number">0x07200103</span>,<span class="number">1</span>,<span class="number">4</span>Mlzma))
</code></pre><p>将结尾处的4Mlzma改为8Mlzma保存即可，即：</p>
<pre><code>$(<span class="built_in">eval</span> $(call SingleProfile,TPLINK-LZMA,<span class="number">64</span>kraw,TLWR720NV3,tl-wr720n-v3,TL-WR720N-v3,ttyATH0,<span class="number">115200</span>,<span class="number">0x07200103</span>,<span class="number">1</span>,<span class="number">8</span>Mlzma))
</code></pre><p>完成以上步骤后可以回到终端，执行make命令生成固件，如：</p>
<pre><code>make image <span class="variable">PROFILE=</span>WL500GP <span class="variable">PACKAGES=</span><span class="string">"luci luci-i18n-chinese luci-proto-ipv6 luci-sgi-uhttpd"</span> <span class="variable">FILES=</span>files/
</code></pre><p>如果没有出现错误，就可以在/bin/ar71xx/下找到你相应的bin文件了</p>
<h1 id="参考：">参考：</h1><ul>
<li><a href="http://wiki.openwrt.org/doc/howto/obtain.firmware.generat" target="_blank" rel="external">http://wiki.openwrt.org/doc/howto/obtain.firmware.generat</a></li>
<li>OpenWRT：利用Image Builder编译生成自定义ROM<br><a href="https://cokebar.info/archives/90" target="_blank" rel="external">https://cokebar.info/archives/90</a></li>
<li>使用Image Builder编译自动翻墙OpenWrt固件<br><a href="http://softwaredownload.gitbooks.io/openwrt-fanqiang/content/ebook/04.3.html" target="_blank" rel="external">http://softwaredownload.gitbooks.io/openwrt-fanqiang/content/ebook/04.3.html</a></li>
</ul>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：Image Builder（Image Generator）是Openwrt官方提供的用来快捷生成所需固件的工具包，这个工具包已经包含并配置好了所有编译需要的东西，一条命令即可生成所需的固件，并且可以通过修改Makefile和一些配置文件来生成自定义的固件，是相对简洁易用的方式。<br>]]>
    
    </summary>
    
      <category term="Image Builder" scheme="http://masukio.tk/tags/Image-Builder/"/>
    
      <category term="Openwrt" scheme="http://masukio.tk/tags/Openwrt/"/>
    
      <category term="Openwrt开发笔记" scheme="http://masukio.tk/categories/Openwrt%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[民间H3C inode客户端黑历史]]></title>
    <link href="http://masukio.tk/2015/07/07/H3C-inode-Linux/"/>
    <id>http://masukio.tk/2015/07/07/H3C-inode-Linux/</id>
    <published>2015-07-07T01:57:12.000Z</published>
    <updated>2015-07-10T10:13:42.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：iNode协议本是个集成的软件产品，其所设计的校园网认证机制是各项基础协议的组合。本文要谈及的内容有以下几点：（1）介绍构成iNode认证框架的一些基本协议；（2）介绍iNode逆向工作的研究进展，iNode客户端的前世今生，哪些人正在做该协议分析研究，有哪些软件或者代码可以成为替代品；（3）根据iNode在实际环境下的工作状态与协议内容，并作出逆向实践。<br><a id="more"></a></p>
<h1 id="802-1x认证机制及相关协议">802.1x认证机制及相关协议</h1><p>802.1x认证机制及相关协议iNode协议的基础构架实际由802.1x协议认证机制组成，其中认证过程又采用EAPOLRADIUS方式。</p>
<h2 id="缩略语">缩略语</h2><pre><code><span class="number">802.1</span>X 本文专指IEEE <span class="number">802.1</span>X 标准
RADIUS 远程用户拨入认证服务 (Remote Authentication Dial <span class="keyword">In</span> User Service）
PAP 密码验证协议 (Password Authentication Protocol）
CHAP 质询握手验证协议 (Challenge Handshake Authentication Protocol）
EAP 扩展验证协议 (Extensible Authentication Protocol）
EAPOL 基于局域网的EAP (EAP over LAN）
MD5 消息摘要算法<span class="number">5</span>版本 (Message-Digest Algorithm <span class="number">5</span>）
PAE 端口认证实体 (<span class="keyword">Port</span> Authentication <span class="keyword">Entity</span>）
</code></pre><h2 id="认证起源和作用">认证起源和作用</h2><p>IEEE802 LAN/WAN委员会为解决无线局域网网络安全问题，提出了802.1X协议。后来，802.1X协议作为局域网端口的一个普通接入控制机制在以太网中被广泛应用，主要解决以太网内认证和安全方面的问题。</p>
<p>802.1X协议是一种基于端口的网络接入控制协议（port based network access control protocol）。“基于端口的网络接入控制”是指在局域网接入设备的端口这一级对所接入的用户设备进行认证和控制。连接在端口上的用户设备如果能通过认证，就可以访问局域网中的资源；如果不能通过认证，则无法访问局域网中的资源。</p>
<h2 id="802-1X的体系结构">802.1X的体系结构</h2><p>802.1X系统为典型的Client/Server结构，包括三个实体：客户端（Client）、设备端（Device）和认证服务器（Server）。</p>
<p><img src="http://www.h3c.com.cn/res/200905/20/20090520_766382_image001_624138_30003_0.png" alt=""></p>
<p>1.客户端是位于局域网段一端的一个实体，由该链路另一端的设备端对其进行认证。客户端一般为一个用户终端设备，用户可以通过启动客户端软件发起802.1X认证。客户端必须支持EAPOL（Extensible Authentication Protocol over LAN，局域网上的可扩展认证协议）。</p>
<p>2.设备端是位于局域网段一端的另一个实体，对所连接的客户端进行认证。设备端通常为支持802.1X协议的网络设备，它为客户端提供接入局域网的端口，该端口可以是物理端口，也可以是逻辑端口。</p>
<p>3.认证服务器是为设备端提供认证服务的实体。认证服务器用于实现对用户进行认证、授权和计费，通常为RADIUS（Remote Authentication Dial-In User Service，远程认证拨号用户服务）服务器。</p>
<p>下图为福建农林大学的校园网拓扑图<br><img src="http://7nar5o.com1.z0.glb.clouddn.com/FAFU.PNG" alt=""><br>1.未认证的计算机不分配IP地址，可以在局域网内访问校内网站<br>2.认证的免费校内域可以访问教育网网段<br>3.认证的收费宿舍网可以访问所有网段</p>
<h2 id="802-1X的认证方式">802.1X的认证方式</h2><p>802.1X认证系统使用EAP（Extensible Authentication Protocol，可扩展认证协议），来实现客户端、设备端和认证服务器之间认证信息的交换。</p>
<p>1.在客户端与设备端之间，EAP协议报文使用EAPOL封装格式，直接承载于LAN环境中。</p>
<p>2.在设备端与RADIUS服务器之间，可以使用两种方式来交换信息。一种是EAP协议报文由设备端进行中继，使用EAPOR（EAP over RADIUS）封装格式承载于RADIUS协议中；另一种是EAP协议报文由设备端进行终结，采用包含PAP（Password Authentication Protocol，密码验证协议）或CHAP（Challenge Handshake Authentication Protocal，质询握手验证协议）属性的报文与RADIUS服务器进行认证交互。</p>
<h2 id="802-1X的基本概念">802.1X的基本概念</h2><h3 id="受控/非受控端口">受控/非受控端口</h3><p>设备端为客户端提供接入局域网的端口，这个端口被划分为两个逻辑端口：受控端口和非受控端口。任何到达该端口的帧，在受控端口与非受控端口上均可见。</p>
<p>1.非受控端口始终处于双向连通状态，主要用来传递EAPOL协议帧，保证客户端始终能够发出或接收认证报文。</p>
<p>2.受控端口在授权状态下处于双向连通状态，用于传递业务报文；在非授权状态下禁止从客户端接收任何报文。</p>
<h3 id="授权/非授权状态">授权/非授权状态</h3><p>设备端利用认证服务器对需要接入局域网的客户端执行认证，并根据认证结果（Accept或Reject）对受控端口的授权/非授权状态进行相应地控制。</p>
<p>图中显示了受控端口上不同的授权状态对通过该端口报文的影响。图中对比了两个802.1X认证系统的端口状态。系统1的受控端口处于非授权状态（相当于端口开关打开），系统2的受控端口处于授权状态（相当于端口开关关闭）。<br><img src="http://www.h3c.com.cn/res/200905/20/20090520_766383_image002_624138_30003_0.png" alt=""></p>
<p>用户可以通过在端口下配置的接入控制的模式来控制端口的授权状态。端口支持以下三种接入控制模式：<br>1.强制授权模式（authorized-force）：表示端口始终处于授权状态，允许用户不经认证授权即可访问网络资源。<br>2.强制非授权模式（unauthorized-force）：表示端口始终处于非授权状态，不允许用户进行认证。设备端不对通过该端口接入的客户端提供认证服务。<br>3.自动识别模式（auto）：表示端口初始状态为非授权状态，仅允许EAPOL报文收发，不允许用户访问网络资源；如果认证通过，则端口切换到授权状态，允许用户访问网络资源。这也是最常见的情况。</p>
<h3 id="受控方向">受控方向</h3><p>在非授权状态下，受控端口可以被设置成单向受控和双向受控。<br>1.实行双向受控时，禁止帧的发送和接收；<br>2.实行单向受控时，禁止从客户端接收帧，但允许向客户端发送帧。</p>
<h2 id="802-1X的认证触发方式">802.1X的认证触发方式</h2><p>802.1X的认证过程可以由客户端主动发起，也可以由设备端发起。设备支持的认证触发方式包括以下两种：<br>1.客户端主动触发方式<br>客户端主动向设备端发送EAPOL-Start报文来触发认证，该报文目的地址为IEEE 802.1X协议分配的一个组播MAC地址：01-80-C2-00-00-03。<br>另外，由于网络中有些设备不支持上述的组播报文，使得认证设备无法收到客户端的认证请求，因此设备端还支持广播触发方式，即，可以接收客户端发送的目的地址为广播MAC地址的EAPOL-Start报文。这种触发方式需要H3C iNode的802.1X客户端的配合。<br>2.设备端主动触发方式<br>设备会每隔N秒（例如30秒）主动向客户端发送EAP-Request/Identity报文来触发认证，这种触发方式用于支持不能主动发送EAPOL-Start报文的客户端，例如Windows XP自带的802.1X客户端。</p>
<h2 id="802-1X的认证过程">802.1X的认证过程</h2><p>802.1X系统支持EAP中继方式和EAP终结方式与远端RADIUS服务器交互完成认证。以下关于两种认证方式的过程描述，都以客户端主动发起认证为例。</p>
<h3 id="EAP中继方式">EAP中继方式</h3><p>这种方式是IEEE 802.1X标准规定的，将EAP（可扩展认证协议）承载在其它高层协议中，如EAP over RADIUS，以便扩展认证协议报文穿越复杂的网络到达认证服务器。一般来说，EAP中继方式需要RADIUS服务器支持EAP属性：EAP-Message和Message-Authenticator，分别用来封装EAP报文及对携带EAP-Message的RADIUS报文进行保护。</p>
<p><img src="http://www.h3c.com.cn/res/200905/20/20090520_766389_image008_624138_30003_0.png" alt=""></p>
<p>认证过程如下：<br>(1)当用户有访问网络需求时打开802.1X客户端程序，输入已经申请、登记过的用户名和密码，发起连接请求（EAPOL-Start报文）。此时，客户端程序将发出请求认证的报文给设备端，开始启动一次认证过程。<br>(2)设备端收到请求认证的数据帧后，将发出一个请求帧（EAP-Request/Identity报文）要求用户的客户端程序发送输入的用户名。<br>(3)客户端程序响应设备端发出的请求，将用户名信息通过数据帧（EAP-Response/Identity报文）发送给设备端。设备端将客户端发送的数据帧经过封包处理后（RADIUS Access-Request报文）送给认证服务器进行处理。<br>(4)RADIUS服务器收到设备端转发的用户名信息后，将该信息与数据库中的用户名表对比，找到该用户名对应的密码信息，用随机生成的一个加密字对它进行加密处理，同时也将此加密字通过RADIUS Access-Challenge报文发送给设备端，由设备端转发给客户端程序。<br>(5)客户端程序收到由设备端传来的加密字（EAP-Request/MD5 Challenge报文）后，用该加密字对密码部分进行加密处理（此种加密算法通常是不可逆的），生成EAP-Response/MD5 Challenge报文，并通过设备端传给认证服务器。<br>(6)RADIUS服务器将收到的已加密的密码信息（RADIUS Access-Request报文）和本地经过加密运算后的密码信息进行对比，如果相同，则认为该用户为合法用户，反馈认证通过的消息（RADIUS Access-Accept报文和EAP-Success报文）。<br>(7)设备收到认证通过消息后将端口改为授权状态，允许用户通过端口访问网络。在此期间，设备端会通过向客户端定期发送握手报文的方法，对用户的在线情况进行监测。缺省情况下，两次握手请求报文都得不到客户端应答，设备端就会让用户下线，防止用户因为异常原因下线而设备无法感知。<br>(8)客户端也可以发送EAPOL-Logoff报文给设备端，主动要求下线。设备端把端口状态从授权状态改变成未授权状态，并向客户端发送EAP-Failure报文。</p>
<h3 id="EAP终结方式">EAP终结方式</h3><p>这种方式将EAP报文在设备端终结并映射到RADIUS报文中，利用标准RADIUS协议完成认证、授权和计费。设备端与RADIUS服务器之间可以采用PAP或者CHAP认证方法。</p>
<p><img src="http://www.h3c.com.cn/res/200905/20/20090520_766390_image009_624138_30003_0.png" alt=""></p>
<p>EAP终结方式与EAP中继方式的认证流程相比，不同之处在于用来对用户密码信息进行加密处理的随机加密字由设备端生成，之后设备端会把用户名、随机加密字和客户端加密后的密码信息一起送给RADIUS服务器，进行相关的认证处理。</p>
<h2 id="802-1X的接入控制方式">802.1X的接入控制方式</h2><p>设备不仅支持协议所规定的基于端口的接入认证方式，还对其进行了扩展、优化，支持基于MAC的接入控制方式。</p>
<p>1.当采用基于端口的接入控制方式时，只要该端口下的第一个用户认证成功后，其它接入用户无须认证就可使用网络资源，但是当第一个用户下线后，其它用户也会被拒绝使用网络。</p>
<p>2.采用基于MAC的接入控制方式时，该端口下的所有接入用户均需要单独认证，当某个用户下线时，也只有该用户无法使用网络。</p>
<h2 id="802-1X的定时器">802.1X的定时器</h2><p>802.1X认证过程中会启动多个定时器以控制接入用户、设备以及RADIUS服务器之间进行合理、有序的交互。802.1X的定时器主要有以下几种<br>：<br>1.用户名请求超时定时器（tx-period）：该定时器定义了两个时间间隔。其一，当设备端向客户端发送EAP-Request/Identity请求报文后，设备端启动该定时器，若在tx-period设置的时间间隔内，设备端没有收到客户端的响应，则设备端将重发认证请求报文；其二，为了兼容不主动发送EAPOL-Start连接请求报文的客户端，设备会定期组播EAP-Request/Identity请求报文来检测客户端。tx-period定义了该组播报文的发送时间间隔。</p>
<p>2.客户端认证超时定时器（supp-timeout）：当设备端向客户端发送了EAP-Request/MD5 Challenge请求报文后，设备端启动此定时器，若在该定时器设置的时长内，设备端没有收到客户端的响应，设备端将重发该报文。</p>
<p>3.认证服务器超时定时器（server-timeout）：当设备端向认证服务器发送了RADIUS Access-Request请求报文后，设备端启动server-timeout定时器，若在该定时器设置的时长内，设备端没有收到认证服务器的响应，设备端将重发认证请求报文。</p>
<p>4.握手定时器（handshake-period）：此定时器是在用户认证成功后启动的，设备端以此间隔为周期发送握手请求报文，以定期检测用户的在线情况。如果配置发送次数为N，则当设备端连续N次没有收到客户端的响应报文，就认为用户已经下线。</p>
<p>5.静默定时器（quiet-period）：对用户认证失败以后，设备端需要静默一段时间（该时间由静默定时器设置），在静默期间，设备端不处理该用户的认证请求。</p>
<p>6.周期性重认证定时器（reauth-period）：如果端口下开启了周期性重认证功能，设备端以此定时器设置的时间间隔为周期对该端口在线用户发起重认证。</p>
<h2 id="EAPOL消息的封装">EAPOL消息的封装</h2><p>1.EAPOL数据包的格式<br>EAPOL是802.1X协议定义的一种报文封装格式，主要用于在客户端和设备端之间传送EAP协议报文，以允许EAP协议报文在LAN上传送。</p>
<p><img src="http://www.h3c.com.cn/res/200905/20/20090520_766384_image003_624138_30003_0.png" alt=""></p>
<p>PAE Ethernet Type：表示协议类型，为0x888E。<br>Protocol Version：表示EAPOL帧的发送方所支持的协议版本号。<br>Type：表示EAPOL数据帧类型，目前设备上支持的数据类型见下表。</p>
<p><img src="http://7nar5o.com1.z0.glb.clouddn.com/EAPOL数据类型.PNG" alt=""></p>
<p>Length：表示数据长度，也就是“Packet Body”字段的长度，单位为字节。如果为0，则表示没有后面的数据域。<br>Packet Body：表示数据内容，根据不同的Type有不同的格式。</p>
<p>2.EAP数据包的格式<br>802.1x定义了接入设备与介入端口间点到点的连接方式，为了建立点与点之间的连接通信，PPP协议必须要发送LCP数据包来对该数据链路进行配置。而EAPOL就是PPP的一个扩展认证协议。所以该协议的格式规范必须了解，那么EAPOL协议的格式规范在下面介绍。<br>典型的PPP协议帧格式为下图：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741000732040.png" alt=""></p>
<p>当PPP帧protocol字段域填充类型表明C227类型时，即表明封装的是PPP EAP数据包，也应用着扩展认证协议EAP。所以在information字段域内是封装的EAP报文格式。一个典型的EAP认证报文过程分为request，response，success或failure阶段。每个阶段报文传送都由information域所携带的EAP报文来承担。</p>
<p>当EAPOL数据包格式Type域为EAP-Packet时，Packet Body为EAP数据包结构</p>
<p><img src="http://www.h3c.com.cn/res/200905/20/20090520_766385_image004_624138_30003_0.png" alt=""></p>
<p>EAP报文的格式为：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741009954954.png" alt=""></p>
<p>1.Code：指明EAP包的类型，共有4种：Request、Response、Success、Failure。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741015261284.png" alt=""></p>
<p>Code=1和2的情形下，Type又有多种选择:</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741015261284.png" alt=""></p>
<p>Code=3和4的情形下，只回答成功或失败。</p>
<p>2.Identifier字段域<br>主要完成request和response的匹配，即一对正确配对的request和response的识别字段域是标号相同的。</p>
<p>3.Length字段域<br>Length域为两个字节，表明EAP数据包从头到尾的所有长度，超出Length域的字节应视为数据链路层填充，在接受时被忽略到。这个信息很重要！</p>
<p>4.Data字段域<br>    1.Success和Failure类型的包没有Data域，相应的Length域的值为4。<br>    2.Request和Response类型数据包的Data域的格式如图 所示。Type为EAP的认证类型，Type data的内容由类型决定。例如，Type值为1时代表Identity，用来查询对方的身份；Type值为4时，代表MD5-Challenge，类似于PPP CHAP协议，包含质询消息。</p>
<p><img src="http://www.h3c.com.cn/res/200905/20/20090520_766386_image005_624138_30003_0.png" alt=""></p>
<p>Identifier：用于匹配Request消息和Response消息。<br>Length：EAP包的长度，包含Code、Identifier、Length和Data域，单位为字节。<br>Data：EAP包的内容，由Code类型决定。</p>
<h2 id="EAP属性的封装">EAP属性的封装</h2><p>RADIUS为支持EAP认证增加了两个属性：EAP-Message（EAP消息）和Message-Authenticator（消息认证码）。</p>
<ol>
<li>EAP-Message<br>这个属性用来封装EAP数据包，类型代码为79，String域最长253字节，如果EAP数据包长度大于253字节，可以对其进行分片，依次封装在多个EAP-Message属性中。</li>
</ol>
<p><img src="http://www.h3c.com.cn/res/200905/20/20090520_766387_image006_624138_30003_0.png" alt=""></p>
<ol>
<li>Message-Authenticator<br>如图 7所示，这个属性用于在使用EAP、CHAP等认证方法的过程中，避免接入请求包被窃听。在含有EAP-Message属性的数据包中，必须同时也包含Message-Authenticator，否则该数据包会被认为无效而被丢弃。</li>
</ol>
<p><img src="http://www.h3c.com.cn/res/200905/20/20090520_766388_image007_624138_30003_0.png" alt=""></p>
<h1 id="各类型EAPOL结构">各类型EAPOL结构</h1><h2 id="EAPOL-Start">EAPOL-Start</h2><table>
<thead>
<tr>
<th>字节</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>6字节</td>
<td style="text-align:center">组播地址：01 80 c2 00 00 03</td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">源MAC</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">协议：88 8e</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">版本：01</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">包类型：01表示请求连接，02表示请求断开</td>
</tr>
</tbody>
</table>
<h2 id="交换机请求用户名（或维持链路请求包，1包/15秒）">交换机请求用户名（或维持链路请求包，1包/15秒）</h2><table>
<thead>
<tr>
<th>字节</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>6字节</td>
<td style="text-align:center">目标MAC（主机）</td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">源MAC（交换机）</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">协议：88 8e</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">版本：01</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">包类型：00</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 05</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Code：01：请求，02：回复，03：成功，04：失败</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">标识：从01开始，每成功收发一次，自动加一，到FF后清零重新开始</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 05</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Type：14</td>
</tr>
</tbody>
</table>
<h2 id="响应请求用户名">响应请求用户名</h2><table>
<thead>
<tr>
<th>字节</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>6字节</td>
<td style="text-align:center">目标MAC（交换机）</td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">源MAC（主机）</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">协议：88 8e</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">版本：01</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">包类型：00</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 1a</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Code：01：请求，02：回复，03：成功，04：失败</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">标识：从01开始，每成功收发一次，自动加一，到FF后清零重新开始</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 1a</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Type：01 (identifier)</td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">IP：15 04  +  IP （10.7.2.75—0a 07 02 4b）</td>
</tr>
<tr>
<td>n字节（n为用户名长度）</td>
<td style="text-align:center">用户名：lgh@0806.com.cn—6c 67 68 40 30 38 30 36 2e 63 6f 6d 2e 63 6e</td>
</tr>
</tbody>
</table>
<h2 id="交换机请求密码">交换机请求密码</h2><table>
<thead>
<tr>
<th>字节</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>6字节</td>
<td style="text-align:center">目标MAC（主机）</td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">源MAC（交换机）</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">协议：88 8e</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">版本：01</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">包类型：00</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 16</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Code：01：请求，02：回复，03：成功，04：失败</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">标识：从01开始，每成功收发一次，自动加一，到FF后清零重新开始</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 16</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Type：04 （MD5-Challenge）</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">数据长度：10</td>
</tr>
<tr>
<td>16字节</td>
<td style="text-align:center">数据：MD5要用到的16个字节数据（命名为Data_md5），交换机随机生成的</td>
</tr>
</tbody>
</table>
<h2 id="响应请求密码">响应请求密码</h2><table>
<thead>
<tr>
<th>字节</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>6字节</td>
<td style="text-align:center">目标MAC（交换机）</td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">源MAC（主机）</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">协议：88 8e</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">版本：01</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">包类型：00</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：10（16个字节的MD5校验码） + n（用户名长度）+ 06</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Code：01：请求，02：回复，03：成功，04：失败</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">标识：从01开始，每成功收发一次，自动加一，到FF后清零重新开始</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：10（16个字节的MD5校验码） + n（用户名长度）</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Type：04 （MD5-Challenge）</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">MD5校验码长度：10</td>
</tr>
<tr>
<td>16字节</td>
<td style="text-align:center">MD5校验码：（标识＋密码＋Data_md5）的MD5校验</td>
</tr>
<tr>
<td>ｎ字节</td>
<td style="text-align:center">用户名</td>
</tr>
</tbody>
</table>
<h2 id="Success">Success</h2><table>
<thead>
<tr>
<th>字节</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>6字节</td>
<td style="text-align:center">目标MAC（主机）</td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">源MAC（交换机）</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">协议：88 8e</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">版本：01</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">包类型：00</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 04</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Code：01：请求，02：回复，03：成功，04：失败</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">标识：从01开始，每成功收发一次，自动加一，到FF后清零重新开始</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 04</td>
</tr>
</tbody>
</table>
<h2 id="Failure">Failure</h2><table>
<thead>
<tr>
<th>字节</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>6字节</td>
<td style="text-align:center">目标MAC（主机）</td>
<td></td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">源MAC（交换机）</td>
<td></td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">协议：88 8e</td>
<td></td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">版本：01</td>
<td></td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">包类型：00</td>
<td></td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 07</td>
<td></td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Code：01：请求，02：回复，03：成功，04：失败</td>
<td></td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">标识：从01开始，每成功收发一次，自动加一，到FF后清零重新开始</td>
<td></td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 07</td>
<td></td>
</tr>
<tr>
<td>3字节</td>
<td style="text-align:center">08 01 08（08 01 00）</td>
</tr>
</tbody>
</table>
<h2 id="响应维持链路包">响应维持链路包</h2><table>
<thead>
<tr>
<th>字节</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>6字节</td>
<td style="text-align:center">目标MAC（交换机）</td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">源MAC（主机）</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">协议：88 8e</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">版本：01</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">包类型：00</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 1b</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Code：01：请求，02：回复，03：成功，04：失败</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">标识：从01开始，每成功收发一次，自动加一，到FF后清零重新开始</td>
</tr>
<tr>
<td>2字节</td>
<td style="text-align:center">包长度：00 1b</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">Type：14 (generic token_card type)</td>
</tr>
<tr>
<td>1字节</td>
<td style="text-align:center">00</td>
</tr>
<tr>
<td>6字节</td>
<td style="text-align:center">IP：15 04  +  IP （10.7.2.75—0a 07 02 4b）</td>
</tr>
<tr>
<td>n字节(n为用户名长度)</td>
<td style="text-align:center">用户名：lgh@0806.com.cn—6c 67 68 40 30 38 30 36 2e 63 6f 6d 2e 63 6e</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="校园网认证的研究现状">校园网认证的研究现状</h1><h2 id="清华的802-1x校园网认证">清华的802.1x校园网认证</h2><p>802.1x校园网认证年初，清华大学做了一个校园网运行与管理的相关报告，其中指出该校想采取802.1x接入，但是选择何种具体实现方式需要考虑。如使用触发方式，但流量不易通过，启动过程比较慢。使用不加修改的阀门端，也正是我上章节所说的，只要搞定了RADIUS自动地帮你处理后续事情，也就是阀门端只起到代理传递的作用，没有做安全管理。<br><img src="http://images.cnitblog.com/blog/613080/201501/161741029799527.png" alt=""></p>
<h2 id="北大的802-1x校园网认证">北大的802.1x校园网认证</h2><p>该校也在2008年初的校园网认证论坛提出基于IP控制网关的认证，基于透明网关的思路，北京大学自行开发了千兆的控制网关，简称工作在千兆网络中，年在北大部署，后在中国农业大学和北京地质大学等十多所高校实际运行。虽然该通过软件实现，适应于通用开放平台，但是我在年末在北大登陆账号时，听同学说过有客户端，但也可以通过网页登陆，想必现在的认证方式更加复杂和多元了。</p>
<p>802.1x系统是两者相结合的，同时运行在校园网内，主要框架结构为下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741039487456.png" alt=""></p>
<p>两者结合的目的在于用户只需”一次认证”就能够进行802.1x认证，完成校内资源和校外资源的透明过渡，用户察觉不到内网和外网的分别。</p>
<h2 id="iNode校园网认证">iNode校园网认证</h2><p>上述各类认证在吐槽和破解的程度上都不如iNode，大家搜搜iNode，就看到百度贴吧里面的题目是有多么恨这个软件了，还有的发了邮件到工信部投诉区投诉去了。也可以认为iNode几乎在东南方高校市场很常见，当然了西安电子科大，财经院校也用这个，很多院校都采用iNode客户端。想必是这个软件引起了很多同学的不舒服，难怪激起了那么多人的逆向工作，此消彼长的升级和破解对抗，促成了如今的局面。</p>
<p>iNode智能客户端是一款强大的windows多业务接入客户端软件。该软件为用户提供802.1xPortal等多种认证方式，可以与以太网交换机、路由器、网关等网络设备共同组网，实现对宽带接入、接入和无线接入的用户认证，从而大幅度提高网络的整体安全。</p>
<h1 id="iNode协议逆向实践">iNode协议逆向实践</h1><p>iNode逆向工作研究现状各校应该联合最广大的程序员阶级，对本校的校园网客户端作出研究分析，同时向他们和它们致敬，他们是攻击者，它们是防御者，没有了对手何来斗争的快乐。现最为著名者，为南京工程学院802.1x项目，该项目目的为逆向分析iNode客户端认证过程，重新编写相关程序，往好了说就是写一个替代品程序，以便实现计算机的其他功能，如双网卡或开等。往坏了说就是做了一个程序欺骗认证服务器。网址参见资料项目引用了sourceforgegithub项目分支，其中下图我截屏了github上的代码分支，显示了部分人员的参与代码修改工作，大约几十人参与到其中。<br><img src="http://images.cnitblog.com/blog/613080/201501/161741065587387.png" alt=""></p>
<h2 id="iNode协议的实际过程">iNode协议的实际过程</h2><p>在实际情况中，首先我们打开计算机，接通电缆，然后打开iNode运行客户端，通过认证之后，服务器授权，最后我们可以连接互联网。此时我们再次把前面的那幅图搬过来，放在了本段落的上面，因为这很重要。根据上面这幅图，虽然为802.1x的标准体系，华为iNode认证过程也遵循着主要流程，但是在具体处理和报文细节上有所不同，有它独特的地方。<br>抓包分析，对应上面红色区域的包情形如下图所示。<br><img src="http://images.cnitblog.com/blog/613080/201501/161741091989860.png" alt=""></p>
<p>上图红色区域的编号为恰好对应着802.1x体系的基本流程。那么我们针对这几个流程包作深入分析。我们将此划分为三个部分，第一个部分是55start64success部分，第二个是56request57response部分，第三个是编号部分。</p>
<h2 id="StartSuccess数据包部分">StartSuccess数据包部分</h2><p>该两个数据包标志着认证开始和结束。这里是本机用广播方式呼叫边缘路由器，即呼叫阀门端，当阀门端听见后，随即响应本机。广播方式的开始包内容如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741091989860.png" alt=""><br>结束成功标志包内容如下：<br><img src="http://images.cnitblog.com/blog/613080/201501/161741091989860.png" alt=""></p>
<p>对照一下上图可以看到，例如success<br>START包，观察红色方框围住的区域，是以太网封装EAPOL的类型，后面紧接着的是版本号，再后面的，指的是发起帧，最后两个是长度字段域，指明后面还有没有负载。既然长度字段域为，则表明后面负载没有东西。<br><img src="http://images.cnitblog.com/blog/613080/201501/161741140585679.png" alt=""><br>success包，红色框围住的部分前面内容是<code>01 00 00 04</code>就是标志着后面封装内容有个字节。那么红色框围住的部分就是封装的<code>f0 de f1</code>和后面三个字节被红色抹除的六个字节为本机<code>0c da 41</code>及其后面三个字节被红色抹除的六个字节为阀门端的<code>03 02 00 04</code>包的内容。域为成功，编号，最后标志着包长度为个字节。说明整个认证过程内的数据包认为是的数据流，以便同者进行统一处理。而包后还有填充零，可以参看文献资料，以太网协议标准规定对于10Mbps以太网的一帧最小发送时间必须为51.2us，被称为以太网时隙，转换为最小长度则为字节。因此若包长不足，则填充填充符补齐。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741148087308.png" alt=""></p>
<h2 id="请求认证和认证响应">请求认证和认证响应</h2><p>由于我们本机在呼叫阀门端，阀门端听到后，则阀门端响应本机，响应本机的内容就是阀门端的请求包，该请求包内容细节如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741155892479.png" alt=""><br>上图红色框围住部分是封装的数据包，封装含义可以看上图中含有。该请求帧的发出，标志着我们服务器开始让我们填写”申请表”，准备连接互联网。<br>我们填写好”申请表”后，则进行响应，这是最为关键和重要的一步。在这里华为作出了他自己的改动和变化，以太网的控制信息细节一般都不敢改动，因为企业设备如果具备良好的市场推广，首先要符合广大协议标准。而后封装的控制信息头也不敢改动，所以改动的文章只能作在后面的有效载荷上，在有效载荷上使用解析重构，匹配是否符合自己的规则，达到认证目的。那么响应包细节如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741164019594.png" alt=""><br>上图蓝色围住的部分就是封装的包，其中控制信息头有02 01 00 32 01，标志着全体从头到尾有个字节的长度。而这个字节的长度包含了控制信息头个字节，剩下的个字节究竟封装了什么？上图看不清，我截了一个清晰的图。<br><img src="http://images.cnitblog.com/blog/613080/201501/161741168088652.png" alt=""><br>红色框围住部分不清楚，蓝色围住部分也不清楚，黑色围住部分还是不清楚，就是最后个字符很清楚因为那是我的姓名全拼，该死的校园网宁愿对某些东西加密，居然连账户名都不愿加密，竟然明文传输？（当然说句公道话，上网密码还是加密了。）所以这个工作要交给软件逆向工程的童鞋去完成，发现这些字节的含义。当然了观察黑色框围住的编码模式，可以猜出是做了某些编码（黑色框围住部分最后出现的等号或许是一个特征），只不过通过软件逆向工程可以更加清晰和有效地发现编码模式，因为该编码模式与互联网上公开的编码模式还不太一样，是华为自己设计的一些加密模式。这部分内容会在iNode逆向分析章节，即小节详细论述，基本是前辈先驱的工作成果，小子只是当个传声筒。</p>
<h2 id="MD5加密请求和响应">MD5加密请求和响应</h2><p>上面请求认证和认证响应的称谓不准确，实际上一小节的两个小包是版本查询包（所以上一小节的最后一张图黑色编码是对此类的加密），验证正确后，则进行本MD5的请求和响应操作，主要验证的是上网密码是否正确。一旦密码正确，则可获得认证授权。</p>
<p>MD5援引百度百科，它是让大容量信息在用数字签名软件签署私人密匙前，被”压缩”成一种保密的格式（就是把一个任意长度的字节串变换成一定长的大整数）。不管是MD2、MD4还是MD5，它们都需要获得一个随机长度的信息并产生一个128位的信息摘要。虽然这些算法的结构或多或少有些相似，但MD2的设计与MD4和MD5完全不同，那是因为MD2是为8位机器做过设计优化的，而MD4和MD5却是面向32位的电脑。</p>
<p>MD5是一个安全的散列算法。通过输入两个不同的明文，经过MD5算法处理后，不会得到相同的输出值，并且输出值不能返回头得到原始的明文，即其过程不可逆；所以要解密MD5没有现成的算法，只能用穷举法，把可能出现的明文，用MD5算法散列之后，把得到的散列值和原始的数据形成一个一对一的映射表，通过比在表中比破解密码的MD5算法散列值，通过匹配从映射表中找出破解密码所对应的原始明文。这是目前的穷举法。</p>
<p>下图为阀门端向本机的请求MD5验证的请求包。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741175428809.png" alt=""></p>
<p>为后续iNode的逆向分析做准备，首先我们要了解MD5加密算法的原理，其原理过程为：</p>
<p>（1）算法输入：是一个字节串，即每8bit的串。</p>
<p>（2）算法第一步：先对输入数据补位，使得数据长度对64字节求余结果是56个字节。补位方法是先补一个置位为1的单比特内容，然后继续填充置位为0的比特序列。</p>
<p>（3）算法第二步：在完成上述数据补位操作后满足第一步的数据求余标准，再对该数据附加一个额外序列，即还要在补一些东西。该额外序列的长度为64bit长。</p>
<p>小结：经过第一步和第二步，我们可以发现最终的数据长度可以被表达为：</p>
<p>数据长度 = (N <em> 64Bytes) + 56Bytes + 8Bytes = (N + 1) </em> 64Bytes</p>
<p>即长度最终是64字节的整数倍，这样做的原因时满足后续处理的需要和要求。</p>
<p>（4）算法第三步：定义算法的四个条件变量，分别为A，B，C，D四个字变量。其中四个变量为：</p>
<p>A = 0x01234567 B = 0x89abcedf C = 0xfedcba98 D = 0x76543210</p>
<p>看到这里是不是有一些iNode（或称华为公司）在版本号上处理的影子？也是正反双序的初始化。</p>
<p>部分文章提醒注意这里的变量是低位在前，高位在后。故在写程序的时候不是上面这样的写法。</p>
<p>（5）算法第四步：定义算法的四个转换函数，分别为F函数，G函数，H函数，I函数，XYZ分别为三个4字节整数。下面是四个非线性的转换函数，可能是造成不可逆的重要原因。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741181365923.png" alt=""></p>
<p>（6）算法第五步：主要是做变换。我们输入的数据通过我们补齐成为(N+1)64Bytes长度，所以一定是64个字节的倍数。我们将补齐后的数据以64字节为单位划分为组，肯定有N+1组。每组做一次循环，每次循环做四轮操作。我们先讨论第一组，因为后面第二组，直到N+1组处理方式是一样的。</p>
<p>第一组64字节内容，分成16个4字节的数组M[0]到M[15]表示，每个M单元存储4个字节，即存着输入后被补齐的数据的第一组32bit内容。然后定义常数T，如何取常数，算法定义为T[i]=2^32 * abs(sin(i))，其中前面是2的32次方，后面是正弦函数的取值，i是弧度，取值从1到64选择。最后的T[i]取32bit长度的整数部分，去掉小数。定义变换算子如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741187454510.png" alt=""></p>
<p>以第一组的16个4字节M组为例，做第一轮变换，变换步骤如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741191513568.png" alt=""></p>
<p>第二轮变换步骤如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741195895167.png" alt=""></p>
<p>第三轮变换步骤如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741200736483.png" alt=""></p>
<p>第四轮变换步骤如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741210424412.png" alt=""></p>
<p>最后做合并操作如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741224796885.png" alt=""></p>
<p>在以第一组得到了AA，BB，CC，DD内容（请注意AA不是指A与A连接，它只是个变量名称而已），以DD’CC’BB’AA的顺序连接起来，输出的则为第一组的结果内容，显然长度为32bit×4=128bit。以上部分递归细节由于网络上有些不清楚，我自己重新写了一些，细节上可能不同，但是意思本质是一样的。</p>
<h2 id="版本查询包的解密工作">版本查询包的解密工作</h2><p>上节已提及，版本查询包黑色方框围住的部分，产生了如下的编码和我的上网帐户名：<br>    bGBeTUpXN3cuTEgycQV5foKo5pw=’\space\space’t<em>*s</em>y*<br>观察等号猜测可能为base64编码，具体如何编码可能与公开标准不同，这里thorqqAGanNo2做了大量的反编译工作，没有他们在反编译层次的观察和解析，是不可能分析加密编码的，并且两位先驱在不同版本号的情形下做了大量工作，bitdust则他们的工作后发现了版本下的版本号加密密钥。<br>观察等号猜测可能为base64编码，具体如何编码可能与公开标准不同，这里thorqq和AGanNo2做了大量的反编译工作，没有他们在反编译层次的观察和解析，是不可能分析加密编码的，并且两位先驱在不同版本号的情形下做了大量工作，bitdust则他们的工作后发现了v5版本下的版本号加密密钥。</p>
<p>有前辈做了反编译工作，分析了两类数据包的大概结构，一个是response的版本号加密，还有一个是心跳包在线检测结构。心跳包为检测用户是否在线，时不时来一个包探测一下，PC再答复以表明在线。</p>
<p>下面为response版本号查询包结构</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct UsernameFrm</span><br><span class="line">&#123;</span><br><span class="line">PKTHDR Hdr;</span><br><span class="line">u_char8 Unknown1<span class="attr_selector">[2]</span>; <span class="comment">//0x15,0x04</span></span><br><span class="line">u_char8 Ip<span class="attr_selector">[4]</span>;</span><br><span class="line">u_char8 Unknown2<span class="attr_selector">[2]</span>; <span class="comment">//0x06,0x07</span></span><br><span class="line">u_char8 Base64<span class="attr_selector">[30]</span>;</span><br><span class="line">u_char8 Username<span class="attr_selector">[20]</span>;<span class="comment">//假定用户名不会超过</span></span><br><span class="line">&#125;USERNAMEFRM, *PUSERNAMEFRM;</span><br></pre></td></tr></table></figure>
<p>对照下面的response查询包内部细节图</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741233702557.png" alt=""><br>由前辈的反编译工作可知红色框围住的部分为<code>15 04 0a 68 7e 3c</code>，其中<code>15 04</code>是固定字段，说明是华为自定义设计的，该指令污点执行也没能获得其语义。<code>0a 68 7e 3c</code>则是ip地址，也就是我们打开iNode运行连接，通过验证之后，iNode提示你的：您当前地址是多少多少。如果是0a 68 7e 3c则表明当时抓包ip地址为局域网10.104.126.60。于是陷入了一个新的问题，也和bitdust讨论了，ip怎么会在接入认证就已经有了的问题，果然是我没有学好计算机网络知识，通过请教M老师，DHCP进程自设备启动便可以启动服务，如果要抓这个DHCP，时机和骨干节点镜像很重要。</p>
<p>蓝色方框围住的部分为06 07，根据结构体可知为固定字节，语义则也未知，猜测有两种情况，一是反编译得到了结果，但是前辈不敢发，否则侵权，界限很微妙，不允许提供反编译细节，可以提供作明显公开工具可以获得的信息，二是反编译没有得到语义信息结果。随后有30字节的base64编码，20字节的账户名字。先来吐槽一下30字节的base64编码，抓了几次包，发现都是28字节，然后两个空格补齐凑成30字节。看来还是要学习反编译的研究成果。再吐槽一下账户名20个字节一般是够用，他算准了双字复姓的每个字拼音也不会超过5个字母，不过在脑洞大开的时候，取个”仲长霜庄”这名字不行吗？拼音超过20字节了(=。=)(←_←) 查询一下12306的真实姓名填充，使用国内字符标准，以字符集表达姓名，12306提供20字节应该对于中国人是够了，20个汉字的中国名字毕竟是少之又少，但没有考虑到国外友人英文名字的感受[5]，那这就是你12306的字符边界不足了。既然被加密的部分是base64编码，则重点放在base64编码的解析上。</p>
<h2 id="Base64">Base64</h2><p>上节已指出由AGanNo2等众多前辈反编译工作，发现了base64编码，有必要涉及到base64编码的基础引入。</p>
<p>首先什么是base64编码，为什么要用这个编码？在七角WB老师的课程上曾经讲到过Base64的编码知识，该编码使用64个明文来编码任意的二进制文件。在链路层或物理层等比特流透明传输特点下，部分二进制流内的填充序列因与控制信息命令内容重复，可能会导致解包冲突，因此此类协议要么使用透明传输方法，即硬件上只要发现5个连续1，则立即填入一个0。或在软件上控制信息使用独立编码，并在有效载荷上作转义字符处理。早期的问题已经不是现在的问题，base64编码可以认为是历史的产物。早期处理透明传输的方式就有base64编码，既能够实现加密处理，当然了防君子不防小人，只是看不出内容，base64编码仍是可解的；又能够在早期Email处理问题上解决传输及效率问题，早期Email允许传送ASCII字符，但只是低七位，如果带有非ASCII字符，很有可能被网关强制置最高为0，导致解包产生问题。</p>
<p>综上所述正是如此，才引入了base64编码加密，既能够很好保护邮件内容，又能够处理好控制信息与邮件内容不被设备的误处理。其主要原理为将每三个8bit字节转换为四个6bit字节，最后添加两位高位0补齐成为四个8bit字节内容。举个例子：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">转换前：aaaaaabb ccccdddd eeffffff </span><br><span class="line">转换后：<span class="number">00</span>aaaaaa <span class="number">00</span>bbcccc <span class="number">00</span>ddddee <span class="number">00</span>ffffff</span><br><span class="line">转换前的三个字节是原文，下面四个字节是转换后的内容。这里的abcdef请看成未知数，看成比特值，不是字符的意思。下面就做一个真实的表达（援引百度百科例子）：</span><br><span class="line">转换前：<span class="number">10101101</span> <span class="number">10111010</span> <span class="number">01110110</span></span><br><span class="line">转换后：<span class="number">00101011</span> <span class="number">00011011</span> <span class="number">00101001</span> <span class="number">00110110</span> （r <span class="tag">b</span> <span class="tag">q</span> <span class="number">2</span>）</span><br></pre></td></tr></table></figure>
<p>请注意转换前的原文内容不一定是字符，可以是二进制文件，反复讲明的。Base64编码有自己的一套码表，转换后独立编码即可，根据独立编码可知转换后为的字符时rbq2。独立编码表如下：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741241369956.png" alt=""><br>当每三个字节补成四个字节，肯定是每三个去数，若三个一组不够的时候，余数肯定剩下一个或两个字节，如何处理？如果剩下一个字节，则为8bit，一般补上4个0即可，凑成了两个6bit。如果剩下两个字节，则为16bit，一般补上2个0即可，凑成了三个6bit。为表明是补齐的0，前者在翻译完独立码表后补上两个等号”=”，后者在翻译完独立码表后补上一个等号”=”表明自身的特殊情况。所以等号”=”一度成为base64的招牌动作。</p>
<p>最后介绍iNode使用哪些要素参数来进行base64编码加密，iNode Base64编码过程如下图所示：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741248862586.png" alt=""><br>iNodebase64编码使用了几个要素（根据前人反编译工作得出，一开始时是不知道的）：<br>（1）随机数<br>（2）版本号<br>运算是异或逻辑运算。而异或运算的细节如下图所示：<br><img src="http://images.cnitblog.com/blog/613080/201501/161741248862586.png" alt=""><br>那么认证服务器是怎么解码的呢？如下图所示进行解码：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741255899200.png" alt=""></p>
<p>首先要感谢A，T，刘群等几位前辈的反汇编工作才能得到这样的解密过程。然后要声明随机数由程序生成，我们实际使用的版本号肯定也不会是V2.40，因为每一个学校使用的客户端版本都可能不太一样，至少我们使用的iNode客户端是定制版的，连某某序号都要认证，看来是完整版，因为很多地方不需要某某序号认证。在我们软件版本号未知下，bitdust率先开辟地解出我校版本号密文，在他的指导下那么根据我自己的抓包结果，或许可以试试，我们既然已经获得我们的base64编码，则为bGBeTUpXN3cuTEgycQV5foKo5pw=，那么我们先做解码工作，看看版本号是多少，考虑该版本号已在网络上公开且流传很广，只是我们不知道恰恰是这个版本号成为了我们的使用版本，其中部分其他研究者都已经出具软件产品，甚至iNode的最新版已经高出我们使用版本很多了版次了，故可以公开讨论。下面我仅作解码工作，以验证和挖掘真正的固定密钥是什么，我使用的是python编程语言验证。</p>
<p>在bitdust的多次建议下使用python做一下解码工作，正好加强python的学习。通过import base64的python模块得到了初步解码的序列，如下图所示（没截取完整，保证十六进制序列是完整的）：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741273084460.png" alt=""></p>
<p>我们可以通过两个方面简单验证一下：</p>
<p>（1）头三个\x6c \x60 \x5e的二进制序列如下：</p>
<p><code>01101100``01100000``01011110</code></p>
<p>转换为base64的头4个字节内容为：</p>
<p><code>00011011``00000110``00000001``00011110</code></p>
<p>翻译成base64独立码表字符为b G B e</p>
<p>（2）按照每三个字节数，剩下0xe6，0x9c，故补齐一个等号即可。</p>
<p>然后进行与公共密钥”HuaWei3COM1X”异或（此处正式声明HuaWei3COM1X密钥适用版本2.4，而非其他版本密钥，这里我使用的是符合我实际情况的版本号密钥，此密钥如何得来，也是反编译工作所得，本文考虑到某些因素，确实不便公开，网上实际上是有的，大神bitdust在其github源代码中给出了具体密钥，若想要可进入github。其他论坛中可以通过百度关键词搜索得到，本文也没有必要提供。），根据实际密钥做三次异或得到下面序列，如下图所示第[4]个输出，最后使用竖线隔开的最后四个字节是随机数。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741281363645.png" alt=""></p>
<p>根据解密过程可知最后四个字节是生成的随机数，即0xce 0x某某 0xce 0x某某。</p>
<p>为了验证正确性，只要做最后一步，与随机数作异或就可以得到版本号字符串了。首先提取出随机数，然后注意随机数转成字符，此时的转化与一般意义不同，具体细节可自行体会，编程过程中我绕了一个小时在这里，最后想明白了。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741285739946.png" alt=""></p>
<p>待转随机数是十六进制序列，但是需要将十六进制下的表达符号一模一样地转化为字符，我的python编程方式是设置了字典，将0到f的十六进制一一对应转化。观察了大神的写法以后，python一句话格式化操作解决，佩服佩服！最后做完异或就得到了符合我实际使用的版本号，如下图所示。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741292459317.png" alt=""></p>
<p>上述图片做了一些处理，若想知道全部版本号请参看github代码托管网站，liuqun及bitdust的分支，本博文因某些问题，不予提供，本文通过编写python脚本，验证版本号为CH V5.20-0407。通过查看软件帮助可知，恰好为版本号。（当然在逆向破解之前，不知道这个是版本查询包，直到破解出这个序列才明白原来response是为了加密版本号，以便查询之用。我在前面一节就引用了这个术语，是不妥的，有些误导，有些先入为主。）</p>
<p>4.3.3MD5验证的解密工作</p>
<p>若版本号查询包的交互状态结果，后面是进行MD5的验证工作，里面有什么参数，在一开始逆向分析时不清楚的。根据802.1x认证体系（不是实际情况，这里介绍一般情形），接下来出现的MD5过程主要是：</p>
<p>认证服务器收到交换机转发上来的用户名信息后，将该信息与数据库中的用户名表相比对，找到该用户名对应的口令信息，认证服务器使用随机生成的加密字段对口令进行加密处理，返回MD5密文。</p>
<p>我们的客户端收到后，使用加密字对口令部分进行MD5加密，响应认证服务器。服务器收到我们客户端的响应后，将送上来的加密后口令和服务器自己经过加密运算后的口令信息相比较，判断用户是否合法，回应认证成功或失败报文到接入设备。</p>
<p>可以看到MD5加密使用的参数大致有：</p>
<p>（1）口令信息（注：这里的口令不仅有上网账户名，也有上网密码）</p>
<p>（2）随机数</p>
<p>MD5先由认证服务器及阀门端发起请求request，然后我们个人客户端发起响应，过程如下图所示。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741300117718.png" alt=""></p>
<p>然后我们查看服务器那边过来的请求包具体内容，如下图：</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741306363076.png" alt=""></p>
<p>根据网上802.1x体系说明，按照一般情形是需要MD5加密，并携带加密密钥，以便对比。而实际情形援引前辈的文章总结，EAP-MD5是一种单向认证机制，即认证过程没有加密密钥的生成，则request数据包既是要求我们认证密码，并且里面的challenge字段是接头的暗号，我们使用上网和密码和challenge一起做MD5后响应即可。</p>
<p>还有一张图是我们客户端响应服务器的数据包，由下图可见，我的上网账户名是明文传输，附在了密文后面，说明上网密码是被MD5加密了。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741315111976.png" alt=""></p>
<p>在具体的逆向工作上，此时较为幸运，因为我们没有必要去破解MD5密钥，（因为我们没有必要偷别人的上网账号和密码），我们只要自己正常自制MD5包，完成与服务器的认证即可，这样替代品客户端既完成了上网连接的任务，又避免了占用大量内存和不能开wifi的问题（iNode原客户端占用内存较大，根据各位前辈写的替代品软件一般大小就只有1兆左右，而且还可以开wifi）。</p>
<p>所以我们验证iNode的MD5过程是否可以有效复制，只需要把challenge的字段和我的上网密码做一下MD5，看得到的是不是这个MD5的response数据包里数值即可。下面是两串密文：</p>
<p>request EAP-MD5 Value: 754865596e324163060723c8640a3b23</p>
<p>response EAP-MD5 Value: 7795dd505a42740888e45866f438c8d4</p>
<p>验证过程则应该将上行密文与上网密码结合，通过MD5则可得到下行密文，若成功得到，则说明可以成功复制数据包。通过Python 编程，可以实现HASH库调用，支持MD5加密操作。通过提取request数据包内value，然后将我的上网密码在前，value在后连在一起做md5，生成了7795开头的加密序列，对照response数据包，发现加密密文是一致的，说明该数据包可以仿制。如下图所示。</p>
<p><img src="http://images.cnitblog.com/blog/613080/201501/161741323239091.png" alt=""></p>
<p>由上图可知，数据包MD5验证成功，所以iNode的逆向编写工作接近尾声，可以开始逆写了。还有最后一个”鸡肋”的部分，就是心跳包部分。</p>
<p>4.3.3心跳包的协议分析</p>
<p>心跳包主要为检测用户是否在线，在2.1.3节或4.2节的经典流程图中的蓝色线框围住的部分，可以观察到心跳包实际上就是一个出出声，讲讲话，透透气的过程。为什么说鸡肋，在于认证服务器可能不管你出的什么声，不管你讲的什么话，没有管你透的什么气。只要是一句话，是一口气，就认为你是在线的。也就是说心跳包的制作可以随便填充什么序列，不管协议机制都可能通过验证。没有验证某某编号的时候，要么一开始就上不了线，要么上线后一直提示验证某某编号。后者现象证明心跳包即使没有验证某某编号也不会踢你下线。即只要通过两道Base64和MD5验证，就基本具备上网资格认定。</p>
<p>当然，心跳包若认真的做认证，还是非常重要的一环节，就看各高校对校园网的认证程度有怎样的政策和态度了。如下图为一个心跳包，当然了服务器向个人PC发过来请求心跳包检测的请求报文我就没有截图了，那个包和success包很像。重点说一下我们iNode客户端如何回复心跳包请求的，即我们是如何发心跳包的。实际上还是做了一个base64编码，只不过有了新的密钥做成，还是相当于验证了一个版本号，没有难度。至于如何验证某某编号的，大家抓一下包就知道了，是否融入到心跳包中也可以做一个简单验证，这里限于已经到了近30页（太长则无法上传博客）的篇幅，就不给编程结果了。<br><img src="http://images.cnitblog.com/blog/613080/201501/161741331513979.png" alt=""></p>
<h1 id="引用文献及网页">引用文献及网页</h1><p>1.本文修改至iNode协议逆向研究初步入门by tsy(<a href="http://www.cnblogs.com/bitpeach/p/4092806.html),作者为Bitpeach" target="_blank" rel="external">http://www.cnblogs.com/bitpeach/p/4092806.html),作者为Bitpeach</a></p>
<p>2.802.1x协议解析，作者未知，猜测为thorqq前辈<br>华为802.1x技术白皮书或参看H3C 802.1x技术介绍的官方主页<br><a href="http://www.h3c.com.cn/Products___Technology/Technology/Security_Encrypt/Other_technology/Technology_recommend/200812/624138_30003_0.htm" target="_blank" rel="external">http://www.h3c.com.cn/Products___Technology/Technology/Security_Encrypt/Other_technology/Technology_recommend/200812/624138_30003_0.htm</a></p>
<p>3.南京工程学院802.1x客户端<br><a href="http://wiki.ubuntu.org.cn/%E5%8D%97%E4%BA%AC%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2802.1X%E5%AE%A2%E6%88%B7%E7%AB%AF#.E5.BC.80.E5.8F.91.E5.9B.A2.E9.98.9F" target="_blank" rel="external">http://wiki.ubuntu.org.cn/%E5%8D%97%E4%BA%AC%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2802.1X%E5%AE%A2%E6%88%B7%E7%AB%AF#.E5.BC.80.E5.8F.91.E5.9B.A2.E9.98.9F</a></p>
<p>4.CSDN博客，为什么以太网帧的长度最短64字节，最长1518字节。<br><a href="http://blog.csdn.net/rainertop/article/details/3020315" target="_blank" rel="external">http://blog.csdn.net/rainertop/article/details/3020315</a></p>
<p>5.老外12306网站购票遇麻烦：名字超20个字符不能有空格<br><a href="http://www.yongshenme.com/zixun/0310/756.html" target="_blank" rel="external">http://www.yongshenme.com/zixun/0310/756.html</a></p>
<p>6.使用xClient代替iNode 突破网卡限制自由分享Wi-Fi – 王谦 I just play主页<br><a href="http://www.ijustplay.cn/xclient/" target="_blank" rel="external">http://www.ijustplay.cn/xclient/</a></p>
<p>7.工具及文档<br>链接: <a href="http://pan.baidu.com/s/1bnwdztH" target="_blank" rel="external">http://pan.baidu.com/s/1bnwdztH</a> 密码: qpuk</p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：iNode协议本是个集成的软件产品，其所设计的校园网认证机制是各项基础协议的组合。本文要谈及的内容有以下几点：（1）介绍构成iNode认证框架的一些基本协议；（2）介绍iNode逆向工作的研究进展，iNode客户端的前世今生，哪些人正在做该协议分析研究，有哪些软件或者代码可以成为替代品；（3）根据iNode在实际环境下的工作状态与协议内容，并作出逆向实践。<br>]]>
    
    </summary>
    
      <category term="Openwrt" scheme="http://masukio.tk/tags/Openwrt/"/>
    
      <category term="编译，H3C inode" scheme="http://masukio.tk/tags/%E7%BC%96%E8%AF%91%EF%BC%8CH3C-inode/"/>
    
      <category term="Openwrt开发笔记" scheme="http://masukio.tk/categories/Openwrt%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[是谁捏造了生命的形状]]></title>
    <link href="http://masukio.tk/2015/07/05/LifeShape/"/>
    <id>http://masukio.tk/2015/07/05/LifeShape/</id>
    <published>2015-07-05T07:29:14.000Z</published>
    <updated>2015-07-06T09:42:29.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：<em>现代生物学最大的革命就是发现了 DNA 的分子结构，这一发现将遗传学变为了化学的一个分支，以生物体的基因为研究的核心。但是，注意力的转移并没有加深我们对生命本质的理解：知道了一只猫是由哪些蛋白质组成的，并不能解答我们关于猫的所有疑问。
</em><br><a id="more"></a></p>
<h1 id="普罗米修斯之手">普罗米修斯之手</h1><p>在古希腊神话中，普罗米修斯是人类的缔造者，他从从河岸抓起一大团泥土，用手在河里捧了些水浇在上面，把它和成软硬适宜的泥巴，然后用这些泥巴根据神的形象便捏出了一个人。</p>
<h1 id="细胞的分型">细胞的分型</h1><p>然而现在我们知道一切的生命都从一个受精卵开始，受精卵的状态就是生命的原始形态，遗传物质通过最初的细胞质计划，开始读取着古老而又新鲜的遗传物质，其中细胞的分化是一串高度耦合的过程，前一个反应的结果直接作用于后一个反应过程的输入，调整着指针在DNA上的读取片段，不断的使反应过程持续下去，同时每个反应的结果都将印刻细胞内，这就是细胞的年龄，随着细胞的不断自我复制，这些细胞也在向着死亡生长，变得更加的成熟与众不同。</p>
<h2 id="干细胞进展">干细胞进展</h2><p>科学家们一直在尝试将干细胞培养成各式各样的特异细胞，并用于干细胞治疗和基因修正，但是直到目前也没有很好的突破，一个很重要的方向就是模拟器官受损恢复的过程，自1981年发现胚胎干细胞以来，还没有实验室成功利用多能干细胞构建能血管化的复杂器官。主流观点认为，要在体外重塑器官发育时的细胞间相互作用是不现实的。然而，日本横滨市立大学的研究小组冲击了这一观点：他们利用人类诱导性多功能干细胞（iPSCs）在体外培育了简单的人类肝脏，移植到小鼠体内后，这些肝脏成功血管化并正常行使功能，研究结果日前发表在《自然》上。</p>
<p>研究者将人体皮肤细胞诱导成多能干细胞，使其分化为早期肝细胞，并与其他两种对肝脏发育极其重要的细胞混合：一种是用于构建血管的人类脐静脉内皮细胞（HUMECs），另一种是用于连接组织的人类间充质干细胞（MSCs）。很快，这些细胞开始自组装成肉眼可见的立体细胞团。5天之后，培养皿里的景象让武部完全惊呆了：细胞团组装成了一个微小的三维结构，像一个缩小版的肝脏一样运作。这种微小的肝脏只有大约5毫米长，却在逐渐形成自己的血管。武部把这个小东西称为“肝芽”（Liver buds）。<br><img src="http://2.im.guokr.com/JElUfjekBuNMFr6qNlpiAZd9_EJxtHfHZb8XaM8d8MwrAwAAHQIAAEpQ.jpg" alt="由人体诱导性多能干细胞（iPSCs）培养而来的人类肝脏。来源：Takanori Takebe"><br>随后，研究者把肝芽异位移植到免疫缺陷的小鼠身上。在48小时之内，肝芽就快速地与小鼠的血管连接。大约10天之后，肝芽开始正常运作。利用基因芯片，研究者分析了83种已知在肝脏发育过程中连续上调的基因，发现在利用诱导性多功能干细胞培育的肝芽中，这些基因的表达谱与在人类胎儿肝细胞发育成的早期肝组织中相近。</p>
<h1 id="夹缝求生">夹缝求生</h1><p>同时细胞是一个开放的系统，一些信息物质可以在人体内到处乱跑，影响着其他细胞的分化过程，而外界环境的变化也影响的DNA指针的读取位置，这些细胞就像往模具中填充尽可能的填充沙子从而塑造我们的形状，这个模型必须在万物的竞争中不断的使得自己得以填充物质世界最为微小的空隙从而必须让生活其中的每个细胞通力合作达到最优性能，这个过程就像是一个充满脂肪的胖子不断的改变着脂肪的位置好让自己从缝隙中通过，正是这些在竞争中获得的“空隙”塑造了我们的形状，生物进化的目标就是不断压缩自己的形状以使得可以适应更小的“缝隙”。</p>
<h1 id="生命中的宇宙规律">生命中的宇宙规律</h1><p>我们现在已经知道了从小到大，生命就是细胞优化组合；从大到小，生命必须不断的适应环境的压力调整自己的形状，然而我们仍然不知道为何生命如此相似而又多彩缤纷与众不同，是什么规律影响使得一粒随风飘荡的种子可以发育为苍天大树，这些细小的细胞又是如何填埋宇宙的空隙的。</p>
<p>从灯塔水母（Turritopsis nutricula）到独角鲸，从藻类到北美巨杉，生命的形状如此令人眼花缭乱，然而我们却对他们熟视无睹觉得一切习以为常，即使我们已经了解了一个细胞的所有生命过程，了解了对应功能在遗传物质中的存储位置，然而我们依旧无从得知为何我们长成这样，为什么自然界中所有的生命都是对称结构，这些细胞直接的交流又是通过怎样的物理通道，为何熊猫斑马会出现如此错落有致的斑纹，即使我们明白了形成黑白毛色的原理，我们依旧无法得知单个细胞基因的表达是通过什么样的规律触发，即使我们能够往农作物产品中转录各种外源基因，我们依然无法了解是什么样的作用让让一个细胞群朝着根，叶，花的方向发展，总的说就是我们即使已经能够谱写万物的天书，但我们依旧无法了解万物是如何创造的。</p>
<p>生物学往往是关于植物、动物和昆虫的研究，但是 5 项创新改变了科学家理解生命的方式：显微镜的发明、对生物的系统分类、演化论、基因和 DNA 双螺旋结构的发现。现在，第 6 种因素也在起着作用——数学。</p>
<p>几个世纪以来，数学在物理学领域中起着主导作用，而在生命科学的发展之中，数学仅仅扮演了分析数据的龙套角色。但是如今，数学为生命的复杂过程提供了新的理解，正逐渐走到舞台的中心。从数学建模到混沌理论，生物中的数学思想多样且新颖。这些思想将不仅帮助我们理解生命的起源，还能帮助我们了解生命的机理，小到分子，大到宇宙。</p>
<blockquote>
<p>现代生物学最大的革命就是发现了 DNA 的分子结构，这一发现将遗传学变为了化学的一个分支，以生物体的基因为研究的核心。但是，注意力的转移并没有加深我们对生命本质的理解：知道了一只猫是由哪些蛋白质组成的，并不能解答我们关于猫的所有疑问。</p>
</blockquote>
<h2 id="斑马的花纹">斑马的花纹</h2><p>一直以来，野生动物无以伦比的美丽吸引了无数画家、音乐家和作家驻足赞美，西伯利亚虎的力量和优雅，大象的体型硕大，长颈鹿的风度翩翩，还有斑马那神秘而美丽的条纹。这些生物都是由一个细胞（受精卵）发育成的，但要把大象浓缩到一个细胞里，可能吗？</p>
<p>答案自然是不行的，你只能将构成大象所需的信息注入一个细胞之中。但是，不是光注入就行了，你还需要将这些信息进行合理的排列组合才行，这就需要用到其他的东西。</p>
<p><img src="http://3.im.guokr.com/gkimage/di/tr/5c/ditr5c.png" alt="计算机科学之父阿兰 · 图灵 1952 年前提出了生物花纹形成理论，并建立了一个简单的数学模型。该模型现已成功用于分析一种非洲凤蝶的翅膀图案。"></p>
<p>因帮助破解恩尼格玛而在二战时期闻名的阿兰 · 图灵（Alan Turing），便对生物的花纹是如何形成的这一问题给出了解释。1952 年，图灵提出，生化过程在正在发育的胚胎中，产出了一些叫做 “前期模式” 的物质，这些物质后来被表达为真实的蛋白质色素样品，比如赋予我们皮肤颜色的黑色素。</p>
<p>但是这些 “前期模式” 是怎样形成的呢？ 图灵认为，它形成于一对 “成形素” 分子，在最后成为皮肤的胚胎部分的每一点上，成形素分子之间的相互反应，形成其他类型的分子。与此同时，这些分子及其反应产物，通过胚胎的相关部位在细胞间扩散。化学信息指引着生成的色素移动到细胞中特定的位置，这个过程导致了 “前期模式” 的形成。当胚胎发育时，动物的花纹图案便呈现出来了。这个过程就像一个数学方程组。</p>
<p>图灵方程最重要的结果是，在任何一个特定的动物体内，特定组合的反应和扩散都可以创造出明显的花纹：斑点、条纹或者其他更多复杂的花纹。该理论能帮助科学家预测猫科动物的条纹和斑点会长成什么样子，果蝇身上有多少根毛，或一片树叶上有多少涡纹。</p>
<h2 id="用数学方程预测生物的花纹图案">用数学方程预测生物的花纹图案</h2><p>图灵的特殊模型过于简单，却简化了问题，抓住了重点，为理论的进一步完善指明了方向。发育生物学家汉斯 · 迈特（Hans Meinhardt）就曾使用图灵方程的变体来研究贝壳的花纹，并且发现了什么样的化学反应会形成哪一类的花纹。顺便指出，虽说是 “哪一类” ，但并不代表规则性。很多贝壳的纹理是复杂且不规则的，有些圆锥形的贝类拥有随机大小的三角形，但是这类纹理在图灵型方程组中是常见的。事实上，它们属于分形。</p>
<p><img src="http://2.im.guokr.com/gkimage/1t/b5/85/1tb585.png" alt="生物花纹形成的模型：A) 斑马的条纹，B) 鱼的皮肤图案，C) 叶序，D) 果蝇腿的分节，E) 心律。"></p>
<p>1995 年，日本科学家近藤茂（Shigeru Kondo）和康喜范（Rihito Asai）将图灵方程组应用于热带鱼——拥有美丽的黄色和紫色条纹的皇帝神仙鱼（ Pomacanthus imperator ）。图灵模型给出了一个惊人的预言： 皇帝神仙鱼的条纹沿着它的身体移动（不像成年斑马的条纹是固定的）。</p>
<p>看起来这一预言实现的可能性不大，但是几个月后，当近藤茂和康喜范拍下样本皇帝神仙鱼的样子之时，他们发现鱼表面的条纹发生迁移，并且变位的条纹也形成了图灵方程预言的那样。条纹之所以会这样，是因为色素蛋白在细胞间扩散，从鱼尾扩散到鱼头。对于条纹固定的动物，不会发生此现象； 但是一旦动物的大小和其他因素已知，则运用数学可以预测出条纹是否会移动。</p>
<h2 id="叶片的形成">叶片的形成</h2><p>在2003年的一项研究中，瑞士伯尔尼大学的克里斯·库勒迈尔（Cris Kuhlemeier）及其同事，在拟南芥的PIN1蛋白上添加了荧光标记。他们发现，这种蛋白在一些细胞的末端聚集成斑块，这些聚集点正是细胞中最靠近后来生长出叶片位置的地方（参见《自然》，第426卷，255页）。这表明，PIN1蛋白分子正在把生长素向应该长叶片的位置输送。</p>
<p>细胞又是怎么知道哪里应该长叶片的呢？库勒迈尔的研究团队认为，它们其实并不知道。PIN1蛋白的运动就像是被磁石吸引的铁屑一样。在这里，它们是被生长素吸引到了细胞的一侧。于是，每个细胞都按着一个非常简单的规则行事：把生长素向着临近的、生长素含量最高的细胞输送。这样就在某一点上产生了生长素浓度峰值，叶片就在这里生长出来。</p>
<p>随着茎或枝干的不断生长，一些细胞中的生长素耗尽，于是一些远离正在生长的叶子的细胞，就具有了比邻居更多的生长素。周边的细胞转而向这个方向锦上添花，生长素越聚越多，就产生了一处新的生长素浓度峰值，于是便长出了一片新叶子。2006年，研究证实，依据这条简单的规则，计算机模型可以产生出整齐有序的虚拟叶片。自然界中的植物叶片类型多样，而改变模型的参数也能产生出与之类似的不同叶片排列方式。</p>
<p>大同小异的原理也控制着叶片形状的形成，比如发育出锯齿状的边缘。英国牛津大学的发育遗传学家米尔托斯·桑第斯（Miltos Tsiantis）和他的同事们已经证实，拟南芥的叶片在生长素浓度峰值处会形成突起，在另一种据认为会抑制生长的分子的峰值处形成缺口。他们的研究以及建立的模型证明，简单的反馈回路，包括通过PIN1蛋白输入生长素，可以使叶片边缘产生出交替的生长素和生长抑制素峰值，从而形成锯齿状外形。</p>
<p>有这些研究都表明，极性，即设想每个细胞都具有方向感，是塑造形态的关键。“你可能认为，哦，它不知道一头和另一头的区别，”英国诺维奇市约翰·英纳斯中心的植物发育学家恩里科·科恩（Enrico Coen）说，“但事实上，细胞确实有方向性。”他把这种现象比作是体育馆里的一群人，每个人都面朝着同一方向。</p>
<p>这种方向感也有助于解释自然界中可见的许多叶片形状。在2012年发表的一项研究中，科恩的研究团队把拟南芥叶片中的一些细胞用荧光标记出来，然后通过显微镜仔细观察该处组织如何生长。之后，他们设计计算机模型，尝试对观察到的变化做出解释。该团队已经能够用模型来重现这种生长模式。在该模型中，叶片组织知道应该向哪个方向生长，而且有能力以不同的速度生长。调节该模型的参数，例如，改变一种蛋白的含量，可以产生出一系列与天然叶片类似的形状，包括椭圆形和心形（参见《科学》，第335卷，1092页）。</p>
<p>对于塑造器官形态来说，除了细胞的方向感之外，对发育中器官的机械力作用也明显具有不小的影响。“某些时候，机械力是不可或缺的，”法国国家农业研究所的植物学家奥利弗·哈芒特（Olivier Hamant）说道。</p>
<p>2008年，哈芒特的研究团队证实，植物细胞会由于机械力的作用而改变某些组成的排列。细胞中有一种被称为微管的蛋白质纤维，当研究人员用两片特氟龙树脂挤压植物茎的顶端时，微管的排列方式变成了和树脂片平行（参见《自然》，第322卷，1650页）。这些微管驱使细胞加固附近的细胞壁，使细胞更难以向树脂片的方向扩张。</p>
<p>植物茎圆柱状外形的生长原理，也能够用这种受限的生长模式来解释。内侧细胞不断地向外推，茎表面的细胞也许就会强化一部分胞壁来对抗这种力。这也就使得外侧细胞在没有强化的方向上生长得更多，从而造成整个组织形成一种在垂直方向上拉长的形状。哈芒特的研究团队发现，根据这些规则设计出的模型，可以产生像天然植物茎那样的垂直的圆柱形。</p>
<p>机械力可能还赋予了植物细胞方向感。以生长素和它的“搬运工”PIN1蛋白为例。在理论中，每个细胞都知道周围的哪个细胞具有最多的生长素，每个细胞内的PIN1分子都会向着最靠近它的那个细胞的一侧移动。然而，这个过程背后的机制并不清楚。</p>
<p>一种可能性是，细胞会对压力作出反应。如果一个细胞含有大量生长素，它的细胞壁就会变松，细胞就会膨大，从而拉伸与相邻细胞共有的那层胞间层，而那个邻近的细胞就有可能对此做出反应，把PIN1蛋白聚集到这种压力的来源方向上。近期一项研究发现，当细胞受到机械压力时，PIN1蛋白也会像微管一样在与压力平行的方向上排列成行（参见《PLoS生物学》，第8卷，e1000516页）。</p>
<p>要彻底揭开形态之谜，我们还有很长的路要走。不过，借助植物学家设计的各种关于结构发育的简单计算机模型，我们开始能够预测某一特定变化如何影响到形态。至少在理论上，这样的模型有朝一日将能够帮助我们设计出具有特定形状的植物。</p>
<p>当然，通过人工育种来影响农作物、花卉、鱼、狗、马和其他许多生命体的形态已经有数千年的历史了。例如，如果想要一种短腿狗，就用两只腿短的狗交配。不过绝大多数的育种工作都是摸索着来的，其中的机制并不清楚。而深入了解基因、形态发生素以及机械力之间的相互作用对生物形态的影响，将会打开许多新的可能。</p>
<p>对于机械力作用的不断深入的了解，已经帮助我们提高了组织工程学的水平。通过理解细胞对压力作用的反应方式，研究人员可以在实验室里培养出更好的替代组织，加快病人伤口愈合。例如，如果经常挤压，人造软骨就会更加坚韧，这和人们行走时对软骨的影响相同。</p>
<p>随着生物学家开始对形体发育进行更加细致详尽的研究，关于可能创造出新世界的想象，开始变得十分具有吸引力。这个新世界将不拘一格而又奇妙非常，拥有各式各样的新形态。现在，通过巧妙的处理，人们已经能够把植物改造成各种不同寻常的外形，用小箱子套住生长中的果实制造出方形的西红柿，通过园艺造型让树木呈现出椅子的形态，甚至用树根制造出活着的桥。但是，如果关于这些形状的指令都可以编码进种子的基因，一经播种便会迅速生长出来，那又会怎样呢？我们能创造出带把手方便搬运的西瓜，开出鲜艳兰花的雏菊，或是可以长成预置好的房子的树木吗？</p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：<em>现代生物学最大的革命就是发现了 DNA 的分子结构，这一发现将遗传学变为了化学的一个分支，以生物体的基因为研究的核心。但是，注意力的转移并没有加深我们对生命本质的理解：知道了一只猫是由哪些蛋白质组成的，并不能解答我们关于猫的所有疑问。
</em><br>]]>
    
    </summary>
    
      <category term="分型" scheme="http://masukio.tk/tags/%E5%88%86%E5%9E%8B/"/>
    
      <category term="发育" scheme="http://masukio.tk/tags/%E5%8F%91%E8%82%B2/"/>
    
      <category term="形状" scheme="http://masukio.tk/tags/%E5%BD%A2%E7%8A%B6/"/>
    
      <category term="生物" scheme="http://masukio.tk/tags/%E7%94%9F%E7%89%A9/"/>
    
      <category term="生物迷云" scheme="http://masukio.tk/categories/%E7%94%9F%E7%89%A9%E8%BF%B7%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo Multiple deployer托管Github和GitCafe博客]]></title>
    <link href="http://masukio.tk/2015/05/20/Multi-Deploying-With-Hexo/"/>
    <id>http://masukio.tk/2015/05/20/Multi-Deploying-With-Hexo/</id>
    <published>2015-05-20T08:51:58.000Z</published>
    <updated>2015-05-20T08:51:58.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：通过将Hexo同时部署到Github和GitCafe，使用Dnspod对来自国内外的流量分别DNS解析至GitCafe及Github从而优化博客的访问速度，本篇文章包括（1）修改hexo deployer配置，Dnspod做定向解析（2）Hexo 2.x升至3.x(3)备份关键配置到Github/GitCafe Backup分支（4）关于主题及多说评论框样式及USER ANGENT（6）添加文章目录及版权信息<br><a id="more"></a><br>写这篇文章时已经距离上篇文章已经过去快半年了，健壮的拖延君死而复生把刚刚在襁褓中的勤奋君给赶跑了（其实就是懒，写写废话我还是很乐意的嘛），主要是因为每篇文章的学习量太大，每做完一个项目做一个总结难免会照成数据的丢失，所以我放弃以前每篇文章一个项目，转向由一个时间窗口一个主题，把每天所学习到的一切知识随时记录随时使用，以前觉得建一个知识仓库把每天看的信息堆积到脑海里总会越积越多的，但是事实却正好相反，虽然往一个水潭中加水可以增加它的体谅，但是所吸收的信息就好像水面上的涟漪，如果一股脑的掀翻它或与能够卷起一阵海啸，但是随着水面的涟漪越来越多，最后其产生波相互叠加最终由趋于水平，不懂得思考和事件的知识就好像累加的音乐最终却成了噪音，在脑子里没有发酵成为可口的泡菜却成了坨屎。<br>所以既然发粪涂墙，就必须利其器，把博客改造一番还是必要的，至少被Jonathan的Flattened Design强奸了一番眼球后就再也看不惯以前Landscape主题的拟物的光线和阴影了，另外之前的博客托管在Github，利用全球的CDN自然能够加速不少，当然这是在没有墙的前提下，在加上Github上敏感的信息越来越多，受到特别关照也不可避免（<a href="http://www.jianshu.com/p/21b2d751444e" target="_blank" rel="external">中国GFW可能是使GitHub瘫痪的DDoS攻击源</a>），所以为了加快在国内的访问速度以及避免某些原因Github无法访问，所以决定将博客托管一份至GitCafe上。<br>同时在Github和GitCafe部署Hexo的主要优势如下：</p>
<blockquote>
<p>1.利用Dnspod A记录将国内流量导向Gitcafe地址，而国外流量默认走Github地址从而加快国内访问的速度。<br>2.起到对称备份的作用，以免一方托管方发生奔溃时，另一方可以接替访问。<br>3.Github和GitCafe均支持自定义域名，A记录支持两条记录，因此两边的托管使用同一个域名地址，不过CName只能支持一条记录。<br>4.国内访问路线短速度快，可以不需要CDN。</p>
</blockquote>
<h1 id="使用Github和GitCafe同时托管博客">使用Github和GitCafe同时托管博客</h1><h2 id="修改部署配置文件">修改部署配置文件</h2><blockquote>
<p>假设你已经在Github和GitCafe创建了博客的repo，Github项目名为<code>User.github.io</code>使用master分子,GitCafe就直接使用你的用户名作为你的项目名使用gitcafe-pages分支。</p>
</blockquote>
<p>要使Hexo支持同时发布到多个git仓库中。需要修hexo根目录下的改<code>_config.yml</code>。<br>原来的配置:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">deploy:</span></span><br><span class="line"><span class="string">type:</span> github</span><br><span class="line"><span class="string">repo:</span> <span class="string">github:</span> <span class="string">https:</span><span class="comment">//github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span></span><br><span class="line"><span class="string">branch:</span> master</span><br></pre></td></tr></table></figure></p>
<p>改成</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">   <span class="attribute">type</span>: git</span><br><span class="line">   <span class="attribute">repo</span>: </span><br><span class="line">      <span class="attribute">github</span>: <span class="attribute">https</span>:<span class="comment">//github.com/&lt;username&gt;/&lt;username&gt;.github.io.git,master</span></span><br><span class="line">      <span class="attribute">gitcafe</span>: <span class="attribute">https</span>:<span class="comment">//gitcafe.com/&lt;username&gt;/&lt;username&gt;.git,gitcafe-pages</span></span><br></pre></td></tr></table></figure>
<p>或者按照Hexo Document的参考可以支持不同type类型的deploy   <code>Available Types:
  git, github, heroku, openshift, rsync</code></p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">You can use multiple deployers. Hexo will<span class="instruction"> execute </span>each deployer in sequence.</span><br><span class="line"></span><br><span class="line">deployer:</span><br><span class="line">- type: git</span><br><span class="line">  repo:</span><br><span class="line">- type: heroku</span><br><span class="line">  repo:</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于部署的相关说明可以参考Hexo的官方文档  <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment | Hexo</a></p>
</blockquote>
<p>之后运行<code>hexo d -g</code>分别输入GitHub和GitCafe的用户名和密码即可完成部署工作，GitCafe上更新内容需要一段时间。</p>
<h2 id="Dnspod做定向DNS解析">Dnspod做定向DNS解析</h2><p>在<a href="https://www.dnspod.com" target="_blank" rel="external">Dnspod国际版</a>中选择自己的域名，添加两条A记录，国内路线使用GitCafe（A地址：207.226.141.135 CName:gitcafe.io）国外走Github线路（A地址192.30.252.153及192.30.252.154）</p>
<p><img src="http://picture-lotors.qiniudn.com/domain.PNG" alt="Dnspod配置"></p>
<blockquote>
<p>Github绑定域名需要Hexo init根目录下source目录下的CNAME文件中我写入了lotors.me，也就是说CNAME应该在子目录source下，而不是在Hexo init根目录下。Github不支持多域名绑定，只能写入一个，如需多个其实是可以在域名解析处自己设定的(显式URL等)。Gitcafe则可以绑定多个域名(<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9" target="_blank" rel="external">参考Gitcafe的Pages帮助</a>)，在博客项目页面下<code>项目管理-&gt;Pages服务-&gt;添加自定义域名</code>添加自己的域名。</p>
</blockquote>
<h1 id="Hexo_2-x升至3-x">Hexo 2.x升至3.x</h1><p>半年多没关注hexo，今天逛Github发现已近更新到3.1Released了，身为一个升级狂魔怎么能忍受low version呢，于是果断开始折腾更新至3.x版本，由于该版本将不同的内核组件拆分出来(<a href="https://github.com/hexojs/hexo/wiki/Breaking-Changes-in-Hexo-3.0" target="_blank" rel="external">Breaking Changes in Hexo 3.0</a>)，于是无法直接<code>npm update hexo</code>只好进行重新安装，根据Github上的Wiki(<a href="https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0" target="_blank" rel="external">Migrating from 2.x to 3.0</a>)成功更新。<br>首先修改hexo根目录下的<code>package.json</code>，添加以下字段</p>
<pre><code><span class="collection">{
+  <span class="string">"hexo"</span>: <span class="collection">{
+    <span class="string">"version"</span>: <span class="string">""</span>
+  }</span>
}</span>
</code></pre><p>执行以下升级命令<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#Clean <span class="operator"><span class="keyword">cache</span></span><br><span class="line">hexo clean</span><br><span class="line">#<span class="keyword">Install</span> hexo-cli安装命令行界面</span><br><span class="line">npm <span class="keyword">install</span> hexo-cli -g</span><br><span class="line">#<span class="keyword">Install</span> Hexo安装hexo</span><br><span class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save</span></span><br><span class="line">#<span class="keyword">Install</span> generators安装服务器</span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-archive <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-category <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">#<span class="keyword">Install</span> <span class="keyword">server</span>安装服务器</span><br><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br><span class="line">#<span class="keyword">Install</span> deployers安装部署器</span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-heroku <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-rsync <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-openshift <span class="comment">--save</span></span><br><span class="line">#<span class="keyword">Update</span> plugins更新插件</span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="Hexo_3-x将至2-x">Hexo 3.x将至2.x</h2><h1 id="备份关键配置">备份关键配置</h1><p>由于hexo是在本地生成静态文件后上传到repo中，所以定期的备份本地hexo的关键配置，主题以及博文Markdown文件就十分必要，可以将文件备份到Github的一个branch,这里我备份资源路径<code>source/</code>，模板文件<code>scaffolds/</code>,主题路径<code>themes/</code>,hexo 配置文件<code>_config.yml</code><br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#启动git</span></span><br><span class="line">git init</span><br><span class="line"><span class="preprocessor">#创建并切换一个备份分支</span></span><br><span class="line">git checkout -b backup</span><br><span class="line"><span class="preprocessor">#添加跟踪文件</span></span><br><span class="line">git add source/ scaffolds/ themes/ _config.yml</span><br><span class="line"><span class="preprocessor">#第一次提交</span></span><br><span class="line">git commit -m <span class="string">"first backup"</span></span><br><span class="line"><span class="preprocessor">#添加远程版本库</span></span><br><span class="line">git add origin https:<span class="comment">//github.com/fjkfwz/fjkfwz.github.io.git</span></span><br><span class="line"><span class="preprocessor">#push到Github的backup分支</span></span><br><span class="line">git push origin backup</span><br></pre></td></tr></table></figure></p>
<h1 id="主题及多说评论框样式及USER_ANGENT">主题及多说评论框样式及USER ANGENT</h1><h2 id="yilia主题">yilia主题</h2><p>现在这款主题模板叫做<code>yilia</code>，Github上的开源项目<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>，或者使用我修改过的<a href="https://github.com/fjkfwz/fjkfwz.github.io/tree/dev" target="_blank" rel="external">主题文件</a><br>修改<code>_config.yml</code>为<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">theme</span>: <span class="string">yilia</span></span><br></pre></td></tr></table></figure></p>
<h2 id="多说评论框样式">多说评论框样式</h2><h2 id="多说评论框UA显示/博主标记">多说评论框UA显示/博主标记</h2><h3 id="embed-js多说核心库本地化">embed.js多说核心库本地化</h3><p>多说社会化评论框核心脚本embed.js文件是个多说官方提供的公用文件，如果官方渠道过于拥挤，或者服务器故障，就可能导致页面加载过慢或者完全无法加载，如果我们将其下载下来，放到我们自己的空间，就会使加载速度有一定的提升，同时也可以对多说评论框做一些个性化调整，因为我们使用的多说评论框主体代码全部都在这里面。下载我修改过的embed.js文件放在主题目录的<code>source\js</code>中。</p>
<p></p><p><a class="dl" href="http://picture-lotors.qiniudn.com/embed.js" target="_blank" rel="nofollow">embed.js下载</a><br></p>
<blockquote>
<p>需要修改 e.user_id == 你的多说的ID<br>多看ID可以在多说-&gt;个人资料-&gt;点击用户名转到个人主页<br><code>url http://duoshuo.com/profile/3731202/ 3731202为你的多说ID</code></p>
</blockquote>
<h3 id="应用本地embed-js文件">应用本地embed.js文件</h3><p>修改主题目录下<code>layout_partical\post\duosuo.ejs中的ds.src</code>为</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ds.src = (document.location.protocol == <span class="string">'https:'</span> ? 'https:<span class="string">' : '</span><span class="string">http:</span><span class="string">') + '</span><span class="regexp">/js/</span>embed.js<span class="string">';</span></span><br></pre></td></tr></table></figure>
<h1 id="添加文章目录及版权信息">添加文章目录及版权信息</h1><h2 id="添加文章目录及版权信息结构">添加文章目录及版权信息结构</h2><p>打开 <code>\themes\your-theme\layout_partial\post</code> 目录下的 <code>article.ejs</code> 文件</p>
<pre><code><span class="xml">/-----------\theme\your-theme\layout_partial\post\article.ejs---------/
<span class="comment">&lt;!-- 文章内容 --&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"article-entry"</span> <span class="attribute">itemprop</span>=<span class="value">"articleBody"</span>&gt;</span>
  </span>&lt;%<span class="ruby"> <span class="keyword">if</span> (post.excerpt &amp;&amp; index){ </span>%&gt;<span class="xml">
    </span>&lt;%-<span class="ruby"> post.excerpt </span>%&gt;<span class="xml">
    </span>&lt;%<span class="ruby"> <span class="keyword">if</span> (theme.excerpt_link){ </span>%&gt;<span class="xml">
      <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"article-more-link"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"</span></span></span>&lt;%-<span class="ruby"> config.root </span>%&gt;<span class="xml"><span class="tag"><span class="value"></span></span></span>&lt;%-<span class="ruby"> post.path </span>%&gt;<span class="xml"><span class="tag"><span class="value">#more"</span>&gt;</span></span>&lt;%=<span class="ruby"> _<span class="number">_</span>(<span class="string">'excerpt_link'</span>) </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
      <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    </span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml">
  </span>&lt;%<span class="ruby"> } <span class="keyword">else</span> { </span>%&gt;<span class="xml">
+    <span class="comment">&lt;!-- 文章目录开始 --&gt;</span>
+    </span>&lt;%<span class="ruby"> <span class="keyword">if</span> (!index){ </span>%&gt;<span class="xml">
+        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"toc"</span> <span class="attribute">class</span>=<span class="value">"toc-article"</span>&gt;</span>
+            <span class="tag">&lt;<span class="title">strong</span> <span class="attribute">class</span>=<span class="value">"toc-title"</span>&gt;</span></span>&lt;%=<span class="ruby"> _<span class="number">_</span>(<span class="string">'contents'</span>) </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">strong</span>&gt;</span>
+        </span>&lt;%-<span class="ruby"> toc(page.content) </span>%&gt;<span class="xml">
+        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
+    </span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml">
+    <span class="comment">&lt;!-- 文章目录结束 --&gt;</span>
    </span>&lt;%-<span class="ruby"> post.content </span>%&gt;<span class="xml">
+    <span class="comment">&lt;!--版权信息开始--&gt;</span>
+    </span>&lt;%-<span class="ruby"> partial(<span class="string">'post/copyright'</span>) </span>%&gt;<span class="xml">
+    <span class="comment">&lt;!--版权信息结束--&gt;</span>
  </span>&lt;%<span class="ruby"> } </span>%&gt;<span class="xml">
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span>
</code></pre><h2 id="添加版权信息模块">添加版权信息模块</h2><p>在<code>\themes\your-theme\layout_partial\post</code>下建立版权模块<code>copyright.ejs</code>,将<code>lotors.me</code>替换为你的域名</p>
<pre><code><span class="xml">/-----------\theme\your-theme\layout_partial\post\copyright.ejs---------/
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"copyright"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"claim"</span>&gt;</span>版权声明：自由转载-非商用-无演绎-保持署名 @ lotors.me<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"from-link"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">em</span>&gt;</span>本文链接地址:<span class="tag">&lt;/<span class="title">em</span>&gt;</span>
    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"</span></span></span>&lt;%-<span class="ruby"> url_for(path) </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span>&gt;</span>
      http://lotors.me</span>&lt;%-<span class="ruby"> url_for(path) </span>%&gt;<span class="xml">
    <span class="tag">&lt;/<span class="title">a</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span>
</code></pre><h2 id="添加文件样式CSS">添加文件样式CSS</h2><p>在<code>\themes\your-theme\source\css_partial</code> 目录下的 <code>article.styl</code> 文件<br>在最后加入以下样式</p>
<pre><code>/--------\themes\your-theme\source\css_partial\article.styl------/

<span class="comment">//版权信息CSS</span>
.<span class="keyword">copyright</span> {
  <span class="keyword">display</span>: block;
  padding: 10px 20px;
  margin: 35px 0 25px;
  <span class="keyword">line</span>-height: 24px;
  font-size: 14px;
  background-color: #FFFF33;
}
.<span class="keyword">copyright</span> .claim {
  font-size: 15px;
  font-weight: 600;
  zoom: 1;
}
.<span class="keyword">copyright</span> .claim:before,
.<span class="keyword">copyright</span> .claim:after {
  content: <span class="string">""</span>;
  <span class="keyword">display</span>: <span class="keyword">table</span>;
}
.<span class="keyword">copyright</span> .claim:after {
  <span class="keyword">clear</span>: both;
}
.<span class="keyword">copyright</span> em,
.<span class="keyword">post</span>-nav em {
  font-style: normal;
  color: #808080;
}
.<span class="keyword">copyright</span> a:hover,
.<span class="keyword">post</span>-nav a:hover {
  color: #c40000;
  text-decoration: none;
}    

<span class="comment">//目录CSS</span>
.toc-article
  background color-toc-bg
  margin 2em 0 0 0.5em
  padding 1em
  strong
    padding 0.3em 0

#toc
  <span class="keyword">line</span>-height 1em
  font-size 1.0em
  float right <span class="comment">// 如果想在左边，则把这里改成left即可</span>
  .toc
    padding 0
    <span class="keyword">li</span>
      <span class="keyword">list</span>-style-<span class="keyword">type</span> none

  .toc-child 
    padding-left 0.7em
</code></pre><h2 id="添加变量">添加变量</h2><p>打开 <code>\themes\your-theme\source\css 目录下的</code>_variables.styl``文件<br>任意一个位置添加以下颜色变量</p>
<pre><code><span class="attribute">color</span>-toc-bg = <span class="hexcolor">#eee</span>
</code></pre><h1 id="附录">附录</h1><h2 id="多说评论框UA显示/博主标记javascript">多说评论框UA显示/博主标记javascript</h2><pre><code><span class="comment">//判断是否为博主</span>
function sskadmin(<span class="keyword">e</span>) {
    <span class="keyword">var</span> ssk = '';
    <span class="keyword">if</span>(<span class="keyword">e</span>.user_id==【你的多说id】){
        ssk = '&lt;span <span class="keyword">class</span>=<span class="string">"sskadmin"</span>&gt;博主【此处可以自定义文字】'
    }
    <span class="keyword">return</span> ssk+<span class="string">"&lt;/span&gt; "</span>;
}
<span class="comment">//显UA开始</span>
function ua(<span class="keyword">e</span>) {
        <span class="keyword">var</span> r = new Array;
        <span class="keyword">var</span> outputer = '';
        <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/MSIE\<span class="literal">s</span>([^\s|;]+)/gi)) {
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_ie"</span>&gt;Internet Explorer' + '|' + r[0]<span class="comment">/*.replace('MSIE', '').split('.')[0]*/</span>
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/FireFox\/([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_firefox"</span>&gt;Mozilla FireFox' + '|' + r1[1]
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/Maxthon([\<span class="keyword">d</span>]*)\/([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_maxthon"</span>&gt;Maxthon'
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/UBrowser([\<span class="keyword">d</span>]*)\/([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_ucweb"</span>&gt;UCBrowser' + '|' + r1[1]
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/MetaSr/ig)) {
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_sogou"</span>&gt;搜狗浏览器'
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/2345Explorer/ig)) {
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_2345explorer"</span>&gt;2345王牌浏览器'
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/2345chrome/ig)) {
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_2345chrome"</span>&gt;2345加速浏览器'
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/LBBROWSER/ig)) {
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_lbbrowser"</span>&gt;猎豹安全浏览器'
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/MicroMessenger\/([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_qq"</span>&gt;微信' + '|' + r1[1]<span class="comment">/*.split('/')[0]*/</span>
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/QQBrowser\/([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_qq"</span>&gt;QQ浏览器' + '|' + r1[1]<span class="comment">/*.split('/')[0]*/</span>
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/QQ\/([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_qq"</span>&gt;QQ浏览器' + '|' + r1[1]<span class="comment">/*.split('/')[0]*/</span>
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/MiuiBrowser\/([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_mi"</span>&gt;Miui浏览器' + '|' + r1[1]<span class="comment">/*.split('/')[0]*/</span>
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/Chrome([\<span class="keyword">d</span>]*)\/([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_chrome"</span>&gt;Chrome' + '|' + r1[1]<span class="comment">/*.split('.')[0]*/</span>
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/safari\/([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_apple"</span>&gt;Apple Safari' + '|' + r1[1]
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/Opera[\s|\/]([^\s]+)/ig)) {
            <span class="keyword">var</span> r1 = r[0].<span class="keyword">split</span>(<span class="string">"/"</span>);
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_opera"</span>&gt;Opera' + '|' + r[1]
        } <span class="keyword">else</span> <span class="keyword">if</span> (r = <span class="keyword">e</span>.<span class="literal">match</span>(/Trident\/7.0/gi)) {
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_ie"</span>&gt;Internet Explorer 11'
        } <span class="keyword">else</span> {
            outputer = '&lt;span <span class="keyword">class</span>=<span class="string">"ua_other"</span>&gt;其它浏览器'
        }
        <span class="keyword">return</span> outputer+<span class="string">"&lt;/span&gt; "</span>;
    }
    function os(<span class="keyword">e</span>) {
        <span class="keyword">var</span> os = '';
        <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/<span class="keyword">win</span>/ig)) {
            <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/nt 5.1/ig)) {
                os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_xp"</span>&gt;Windows XP'
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/nt 6.1/ig)) {
                os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_7"</span>&gt;Windows 7'
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/nt 6.2/ig)) {
                os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_8"</span>&gt;Windows 8'
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/nt 6.3/ig)) {
                os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_8_1"</span>&gt;Windows 8.1'
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/nt 10.0/ig)) {
                os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_8_1"</span>&gt;Windows 10'
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/nt 6.0/ig)) {
                os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_vista"</span>&gt;Windows Vista'
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/nt 5/ig)) {
                os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_2000"</span>&gt;Windows 2000'
            } <span class="keyword">else</span> {
                os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_windows"</span>&gt;Windows'
            }
        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/android/ig)) {
            os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_android"</span>&gt;Android'
        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/ubuntu/ig)) {
            os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_ubuntu"</span>&gt;Ubuntu'
        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/linux/ig)) {
            os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_linux"</span>&gt;Linux'
        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/<span class="keyword">mac</span>/ig)) {
            os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_mac"</span>&gt;<span class="keyword">Mac</span> OS X'
        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/unix/ig)) {
            os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_unix"</span>&gt;Unix'
        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">e</span>.<span class="literal">match</span>(/symbian/ig)) {
            os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_nokia"</span>&gt;Nokia SymbianOS'
        } <span class="keyword">else</span> {
            os = '&lt;span <span class="keyword">class</span>=<span class="string">"os_other"</span>&gt;其它操作系统'
        }
        <span class="keyword">return</span> os+<span class="string">"&lt;/span&gt;"</span> ;
    }
<span class="comment">//显UA结束</span>
</code></pre><h2 id="修改多说样式">修改多说样式</h2><blockquote>
<p>远程：在多说控制中心—&gt;设置-&gt;自定义CSS修改<br>本地：在主题目录<code>source\css_partial\artical.styl</code>中添加</p>
</blockquote>
<pre><code><span class="comment">/*
 * 多说评论的 CSS 样式；
 * 作者：MinonHeart &lt; http://me.hub.moe &gt;；
 * 完成时间：2014-09-26；
 * 最近更新：2015-03-30；
 * 其他说明：基于 Pagecho &lt; http://www.v2ex.com/t/118650 &gt; 的 CSS 样式修改而来；
**/</span>

<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-powered-by</span>, <span class="class">.ds-post-repost</span> <span class="rules">{ <span class="rule"><span class="attribute">display</span>:<span class="value"> none <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-reset</span> <span class="class">.ds-gradient-bg</span>, <span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-textarea-wrapper</span> <span class="rules">{ <span class="rule"><span class="attribute">background</span>:<span class="value"> none <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-reset</span> <span class="class">.ds-like-thread-button</span>, <span class="class">.ds-rounded</span><span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">1</span>) <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>) <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span> <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-reset</span> <span class="class">.ds-sync</span> <span class="rules">{ <span class="rule"><span class="attribute">display</span>:<span class="value"> none <span class="important">!important</span></span></span>; }</span> <span class="comment">/* 隐藏评论框底部分享 */</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-post-button</span> <span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fff</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> none <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> auto <span class="important">!important</span></span></span>; <span class="comment">/* 不必要的语句 */</span>
    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#888</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> normal <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">outline</span>:<span class="value"> none</span></span>;
}</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="rule"><span class="attribute">.ds-post-button</span>:<span class="value">hover { color: <span class="hexcolor">#333</span> <span class="important">!important</span></span></span>; }
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-textarea-wrapper</span> <span class="tag">textarea</span> <span class="rules">{ <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">54px</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="tag">li</span><span class="class">.ds-tab</span> <span class="tag">a</span>, <span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="id">#ds-bubble</span>, <span class="id">#ds-reset</span> <span class="class">.ds-avatar</span> <span class="tag">img</span> <span class="rules">{ <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">1px</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="tag">li</span><span class="class">.ds-tab</span> <span class="rule"><span class="attribute">a</span>:<span class="value">hover { background: <span class="hexcolor">#fff</span> <span class="important">!important</span></span></span>; }
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="tag">li</span><span class="class">.ds-tab</span> <span class="tag">a</span><span class="class">.ds-current</span> <span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fff</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> none <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-post-self</span> <span class="rules">{
    <span class="rule"><span class="attribute">padding-top</span>:<span class="value"> <span class="number">15px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">padding-bottom</span>:<span class="value"> <span class="number">15px</span> <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-reset</span> <span class="class">.ds-avatar</span> <span class="tag">img</span> <span class="rules">{
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> none <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">2px</span> <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-reset</span> <span class="class">.ds-replybox</span> <span class="class">.ds-avatar</span> <span class="tag">img</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span> <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="id">#ds-bubble</span> <span class="rules">{
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> none <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-replybox</span> <span class="rules">{ <span class="rule"><span class="attribute">padding-left</span>:<span class="value"> <span class="number">70px</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-post-self</span> <span class="rules">{ <span class="rule"><span class="attribute">padding-left</span>:<span class="value"> <span class="number">0</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-inline-replybox</span> <span class="rules">{
    <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">27px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">0</span> <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="tag">a</span><span class="class">.ds-comment-context</span> <span class="rules">{
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#E3EDF3</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#F7FAFB</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">2px</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#555</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">5px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">1px</span> <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="tag">li</span><span class="class">.ds-post-placeholder</span> <span class="rules">{ <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span> <span class="number">0</span> <span class="important">!important</span></span></span>; }</span>

<span class="tag">body</span> <span class="id">#ds-smilies-tooltip</span> <span class="tag">ul</span><span class="class">.ds-smilies-tabs</span> <span class="tag">li</span> <span class="tag">a</span> <span class="rules">{
    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">-webkit-gradient</span>(linear,left <span class="number">0</span>,left <span class="number">100%</span>,<span class="function">from</span>(<span class="hexcolor">#fff</span>),<span class="function">to</span>(<span class="hexcolor">#fff</span>))</span></span>;
    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">-webkit-linear-gradient</span>(top,<span class="hexcolor">#fff</span> <span class="number">0</span>,<span class="hexcolor">#fff</span> <span class="number">100%</span>)</span></span>;
    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">-moz-linear-gradient</span>(top,<span class="hexcolor">#fff</span> <span class="number">0</span>,<span class="hexcolor">#fff</span> <span class="number">100%</span>)</span></span>;
    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(to bottom,<span class="hexcolor">#fff</span> <span class="number">0</span>,<span class="hexcolor">#fff</span> <span class="number">100%</span>)</span></span>;
    <span class="rule"><span class="attribute">border-bottom</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#e9e9e9</span></span></span>;
}</span>
<span class="tag">body</span> <span class="id">#ds-smilies-tooltip</span> <span class="rules">{
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">0</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">1em</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.15</span>) <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-smilies-tooltip</span> <span class="class">.ds-smilies-container</span> <span class="rules">{ <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">180px</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-smilies-tooltip</span> <span class="tag">ul</span><span class="class">.ds-smilies-tabs</span> <span class="rules">{ <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">180px</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-reset</span> <span class="tag">ul</span><span class="class">.ds-children</span> <span class="class">.ds-avatar</span> <span class="tag">img</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">35px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">35px</span> <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-comment-body</span> <span class="tag">p</span> <span class="rules">{ <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-reset</span> <span class="tag">button</span> <span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fff</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>) <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span> <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-reset</span> <span class="rule"><span class="attribute">button</span>:<span class="value">hover {
    background: <span class="hexcolor">#ddd</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>) <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span> <span class="important">!important</span></span></span>;
}
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-user-name</span> <span class="rules">{ <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#0c94de</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-comment-header</span> <span class="rules">{ <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">10px</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-login-buttons</span> <span class="class">.ds-more-services</span> <span class="rules">{ <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#777</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-login-buttons</span> <span class="rule"><span class="attribute">.ds-more-services</span>:<span class="value">hover { color: <span class="hexcolor">#333</span> <span class="important">!important</span></span></span>; }
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="tag">ul</span><span class="class">.ds-comments-tabs</span> <span class="class">.ds-highlight</span> <span class="rules">{ <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-time</span> <span class="rules">{ <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">10px</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span><span class="class">.ds-narrow</span> <span class="id">#ds-reset</span> <span class="class">.ds-comments</span> <span class="class">.ds-avatar</span> <span class="tag">img</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">35px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">35px</span> <span class="important">!important</span></span></span>;
}</span>

<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-comment-body</span> <span class="tag">img</span> <span class="rules">{ <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">50px</span> <span class="important">!important</span></span></span>; }</span> <span class="comment">/* 复写语句，max-width 的值要与下一句的 width 和 height 的值相同 */</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-inline-replybox</span> <span class="class">.ds-avatar</span> <span class="tag">img</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span> <span class="important">!important</span></span></span>;
}</span>

<span class="id">#ds-thread</span><span class="class">.ds-narrow</span> <span class="id">#ds-reset</span> <span class="class">.ds-comments</span> <span class="class">.ds-inline-replybox</span> <span class="class">.ds-avatar</span> <span class="tag">img</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50px</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">50px</span> <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-textarea-wrapper</span> <span class="rules">{
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-bottom</span>:<span class="value"> none <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-post-options</span> <span class="rules">{
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ddd</span> <span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-right</span>:<span class="value"> none <span class="important">!important</span></span></span>;
}</span>
<span class="id">#ds-reset</span> <span class="class">.ds-rounded-top</span> <span class="rules">{ <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">0</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-notify</span> <span class="rules">{ <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">2px</span> <span class="important">!important</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="id">#ds-hot-posts</span> <span class="rules">{ <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">12px</span></span></span>; }</span>
<span class="id">#ds-thread</span> <span class="id">#ds-reset</span> <span class="class">.ds-header</span> <span class="rules">{ <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; }</span> <span class="comment">/* 复写语句，放在后面 */</span>
<span class="comment">/*多说UA开始*/</span>
<span class="tag">span</span><span class="class">.ua</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> <span class="number">1px</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#FFFFFF</span><span class="important">!important</span></span></span>;
    <span class="comment">/*text-transform: Capitalize!important;
    float: right!important;
    line-height: 18px!important;*/</span>
}</span>
<span class="class">.ua_other</span><span class="class">.os_other</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#ccc</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#BBB</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
}</span>
<span class="class">.ua_ie</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#428bca</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#357ebd</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_firefox</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#f0ad4e</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#eea236</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_maxthon</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#7373B9</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#7373B9</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_ucweb</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FF740F</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#d43f3a</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_sogou</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#78ACE9</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#4cae4c</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_2345explorer</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#2478B8</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#4cae4c</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_2345chrome</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#F9D024</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#4cae4c</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_mi</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FF4A00</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#4cae4c</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_lbbrowser</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#FC9D2E</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#4cae4c</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_chrome</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#EE6252</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#4cae4c</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_qq</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#3D88A8</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#4cae4c</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_apple</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#E95620</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#4cae4c</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.ua_opera</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#d9534f</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#d43f3a</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>


<span class="class">.os_vista</span>,<span class="class">.os_2000</span>,<span class="class">.os_windows</span>,<span class="class">.os_xp</span>,<span class="class">.os_7</span>,<span class="class">.os_8</span>,<span class="class">.os_8_1</span> <span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#39b3d7</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#46b8da</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>

<span class="class">.os_android</span> <span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#98C13D</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#01B171</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.os_ubuntu</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#DD4814</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#01B171</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.os_linux</span> <span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#3A3A3A</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#1F1F1F</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.os_mac</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#666666</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#1F1F1F</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.os_unix</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#006600</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#1F1F1F</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.os_nokia</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#014485</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#1F1F1F</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;
}</span>
<span class="class">.sskadmin</span><span class="rules">{
<span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#00a67c</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#01B171</span><span class="important">!important</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">5px</span><span class="important">!important</span></span></span>;

}</span>
<span class="comment">/*多说UA结束*/</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：通过将Hexo同时部署到Github和GitCafe，使用Dnspod对来自国内外的流量分别DNS解析至GitCafe及Github从而优化博客的访问速度，本篇文章包括（1）修改hexo deployer配置，Dnspod做定向解析（2）Hexo 2.x升至3.x(3)备份关键配置到Github/GitCafe Backup分支（4）关于主题及多说评论框样式及USER ANGENT（6）添加文章目录及版权信息<br>]]>
    
    </summary>
    
      <category term="gitcafe" scheme="http://masukio.tk/tags/gitcafe/"/>
    
      <category term="github" scheme="http://masukio.tk/tags/github/"/>
    
      <category term="hexo" scheme="http://masukio.tk/tags/hexo/"/>
    
      <category term="随笔" scheme="http://masukio.tk/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="hexo笔记" scheme="http://masukio.tk/categories/hexo%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何粗鲁的使用kindle|kindle折腾指南]]></title>
    <link href="http://masukio.tk/2015/05/20/Kindle-Tip/"/>
    <id>http://masukio.tk/2015/05/20/Kindle-Tip/</id>
    <published>2015-05-20T08:51:58.000Z</published>
    <updated>2015-05-20T08:51:58.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：这篇文章记录从ipad mini到kindle时代数字化阅读的折腾史，本文包括（1）.关于数字化阅读软件（2）.关于数字化出版运动及其造成的影响（3）.使用kindle之后的感受（4）.利用Kindle Ear搭建个人RSS推送平台（5）.免费的RSS2Kindle推送平台（6）.利用P2K推送pocket文章到kindle（7）.我的RSS订阅源<br><a id="more"></a><br>去年9月份开学的时候通过卖有Openwrt强力驱动的inode客户端路由器，解决了校园不能使用路由器的一个痛点挣了些小钱，正好由于出掉了13年入的ipad mini，之前买了ipad mini就是为了能够拥有一个能够畅快阅读的能够随身携带的移动设备，但是升级至IOS7.0之后大多数软件会无故闪退，其中就包括阅读软件，想想在火车上想打开图书消磨时间，结果什么也没有，能不人抓狂么，页面帧速已近没有以前流畅了（虽然这个问题在升级至IOS8.0后有所好转），扁平化设计过的用户界面，大片大片的留白缺乏生动，实在让眼睛吃不消，其实早就想换一个能够平稳运行不伤眼能够比ipad mini更轻量一点的最好就像一本书一样随时先阅读拿起来就可以看的设备，而不需要考虑他的电池还有时不时奔溃的应用程序，于是在淘宝入手了个日版的kindle paperwhite，购买的时候想着我买来就是为了看书，优雅的做个美男子使用原版系统就好，不要越狱不要装多看，于是购买了原版系统的kindle，其实之前几天使用Amazon的系统看了几天古登堡计划的公版书，但是想想在多看上还买了几本大部头的书籍（Kevin Kelly的《失控》），再加之折腾的欲望蠢蠢欲动，于是一不小心就装上了多看系统，总之体验还是不错的，除了耗电量有点电大，不过用个三四天还是没问题的比ipad mini耐用多了，后来老弟上大学了，我又给他买了台新出的new kindle。</p>
<h1 id="关于数字化阅读软件">关于数字化阅读软件</h1><p>之前使用ipad mini上装了一堆的阅读软件，比如：多看阅读，豆瓣阅读，字节社，由于字节社已经停止更新，而且升级IOS7.0后出现闪退的现象，所以没有继续使用，之后主力的阅读软件是多看阅读，虽然书的数量不多，但是优良的排版还是让我扎根在这片土壤上，至今为止我在多看阅读的藏书量已近超过上百本，其中部分得益于多看的每日限免让我我不费一兵一卒抱得不少好书归，后来入手kindle安装多看后，彻底告别其他阅读软件，一心一意扎根多看。</p>
<h1 id="数字化出版">数字化出版</h1><p>当时罗胖的《罗辑思维》出到《与机器赛跑》那集，于是在豆瓣买了Andrew McAfee的同名电子书，虽说是电子书，但是一共也就只有五章不超过两百页，我觉得其更像一篇医生开出的处方，全文就在讨论什么现象什么原因以及该如何应对，这是一本Digital-Only Book也就以为则其自在线上发售，因为其篇幅既然和受众太小无法达到线下发售的要求，我用了一个多小时就把文章略读了一遍，既然站着就能够把它看完，那我还把它买回家干嘛呢？其次又不像大部头书籍没事还能当个墙纸砖头什么的，也显示不出自己的高比格买它何用，出版商自然不愿意接这个不能为自己带来多大利益吃力不讨好的事，还是养生做菜的书叫卖，这个世界有信息和物质信息组成，但是长久以来信息却要以物质媒介，但是得益于互联网的数字化以及内容载体的可变化，将原本需要以原子来传递的信息变得以比特来传播，一次创建无限拷贝，传播的成本无限趋近与零，亚马逊的电子图书出版服务让每个人都能够浓墨重彩的在历史的长幅中书写上一笔，《连线》的总编Chris Anderson在他的《长尾理论》提出了随着每个设备的互联，内容的承载和分发成本将无限趋零做到了轻生产轻分化轻保存。所以今后去实体化的出版模式将是那些小作坊小作者及个人写作爱好者最主要的分发渠道，知识的容量将得到极大的丰富。</p>
<h1 id="使用kindle之后的感受">使用kindle之后的感受</h1><p>可能是年级大了或者是来来去去换了不少的手机之后，我越发的喜欢将手机里一个个的APP拆分出来实体化，从而让每个载体更好的服务于内容，比如我一直想要一个ipod suffer一样小巧且耐用的音乐播放器它能够替代我在手机里的豆瓣电台，它和豆瓣电台一样能都根据算法播放我稀饭的音乐列表就可以了（不过豆瓣的推荐算法真的很烂，使用的越多越重口味，每次退出账号后在播放就觉得清爽多了），它可以不要联网只要在需要的时候使用能够连接手机从手机中更新音乐列表和音乐就可以了，阅读我则更喜欢在kindle中阅读，首先因为手机显示屏本身不适合阅读，其次有太多的噪音信息会打扰阅读的过程，kindle就干脆很过。对于大多数同类软件能够像黑莓上的hub，windows系统上的人脉，不要让我学习太多的使用习惯，我希望所有的信息都是互通的，应用与应用之间，屏幕与屏幕之间不再成为一个个的信息孤岛，不希望拥有太多的用户名和密码，以及工作时要判断要费脑，我希望我的信息就是我，能够协助我进行大多数的日常工作，用户体验能让我有安全感，不用担心设备充电的问题，能够本能的知道我进行这个操作能够产生的效果，我希望每天唤醒我的是闹钟而不是手机，我希望当我还睡眼稀松的时候，我本能的就可以关闭闹钟，不用担心手机没电上班迟到，因为我知道闹钟是可靠的，是可信赖的，可以把重要的事托付给他，它是功能单一的不用担心会被其它应用杀死，人脑80%来自放眼世界视觉，但是不是还剩20%的信息输入途径吗，每当我触控到实体物件时候它的硬度质感是如此的美妙，每当我光脚长在草地上都会让我内心为之一振，习惯了包裹的人们，什么时候才能够从自己设计的牢笼中挣脱出来，阴林小道上柠檬桉树叶洗发水般的气味在空气中稀释形成春天凉爽的气息，吸入一口就能感受到来自喉咙深处的气管开放带来的清凉。</p>
<h1 id="Kindle推送服务">Kindle推送服务</h1><blockquote>
<p>需要添加推送邮箱至Amazon中kindle-Personal Documents Settings邮件列表中<br>中国账户：<a href="https://www.amazon.cn/myk" target="_blank" rel="external">https://www.amazon.cn/myk</a><br>国际账户：<a href="https://www.amazon.com/myk" target="_blank" rel="external">https://www.amazon.com/myk</a></p>
</blockquote>
<h2 id="使用Kindle_Ear搭建RSS推送平台">使用Kindle Ear搭建RSS推送平台</h2><blockquote>
<p>Github项目仓库：<a href="https://github.com/cdhigh/KindleEar" target="_blank" rel="external">https://github.com/cdhigh/KindleEar</a></p>
<p>Kindle Ear是一个运行在Google App Engine(GAE)上的Kindle个人推送服务器，生成排版精美的杂志模式MOBI格式自动每天推送至您的kindle，<br>此网站应用目前的功能有：<br>1.支持类似calibre的recipe格式的自定义RSS收集，需要写代码，需要有一点点python基础<br>2.自定义RSS，不需要python基础，直接输入RSS链接和标题即可自动推送<br>3.多账号管理，也就是支持多kindle<br>4.带图的杂志格式MOBI<br>5.自动每天定时推送<br>6.强大而且方便的邮件中转服务<br>注：如果您要求不高，自定义RSS推送功能能应付一般应用，如果要求排版和完美，可以参照books目录下的文件自己增加一个文件， 在您懂python的前提下，您可以完全的操控网页，可以生成您需要的最完美的MOBI文件。</p>
</blockquote>
<h2 id="Kindle_Ear部署步骤">Kindle Ear部署步骤</h2><blockquote>
<p>1.申请GAE账号并创建一个application。 <a href="https://appengine.google.com/" target="_blank" rel="external">https://appengine.google.com/</a><br>2.下载GAE SDK。 <a href="https://developers.google.com/appengine/downloads?hl=zh-CN" target="_blank" rel="external">https://developers.google.com/appengine/downloads?hl=zh-CN</a><br>3.安装Python 2.7 如果已经安装了，跳过此步骤<br>4.下载本应用的所有文件，放到一个特定的目录<br>5.将我的项目clone下来，<code>项目地址：https://github.com/fjkfwz/Kindlear</code> 解压后将目录改名为kindleear，放到uploader目录下， 双击uploader.bat按照提示输入GAE认证信息及项目名即可上传</p>
</blockquote>
<h2 id="免费的在线RSS推送平台">免费的在线RSS推送平台</h2><p>1.readcola：<code>http://readcola.com/</code></p>
<blockquote>
<p>ReadCola可以生成期刊格式，便于翻阅，媲美纸质杂志；针对阅读器对图片优化，内容重新排版，提升阅读体验。支持定时推送，相比其它推送站最大的特色就是可以推送自定义的Rss并且带有图片，缺点是只支持16个订阅。</p>
</blockquote>
<p>2.狗耳朵<br>狗耳朵内置资源非常多，包括RSS和微信公众号，支持定时推送。缺点是免费用户无法推送图片，不能添加自定义Rss，付费用户是可以的，不过费用也不算贵，现在是3元每月或30元每年。</p>
<p>3.Kindle4Rss<br>Kindle4Rss也分免费和付费用户，二则的区别如下: </p>
<blockquote>
<p>免费版本：最多12个订阅，每期最多25篇文章，最多包含2M图片，手动递送文章。<br>付费版本（1.9$/month）：最多300个订阅，每期不限制文章数量，最多包含6M图片，定时自动递送文章。</p>
</blockquote>
<h1 id="使用IFTTT创建一个Recipe">使用IFTTT创建一个Recipe</h1><p>这种方式要完成一个推送动作，需要一个订阅网站，一个稍后阅读网站，一个负责检查更新并保存到稍后阅读的触发器网站。大概过程是：触发器网站监控订阅的Rss，如果Rss有更新，就保存到稍后阅读网站中，稍后阅读网站会在设定的时间将更新的内容推送到kindle。</p>
<blockquote>
<p>这里三个网站对应的分别是：<br>触发器网站 IFTTT<br>订阅网站 Feedly<br>稍后阅读网站 Readability</p>
</blockquote>
<p>首先要注册这三个网站的帐号，然后在Feedly中为想要推送的Rss新建一个分类并添加Rss订阅（若所有网站都推送的话也可不建）；接着在IFTTT中创建一个新的Recipe，按提示来，this部分点击Feedly图标，然后根据需要选择New article saved for later或New article from category，that部分选择Readability，在Read later URL部分根据需要选上ArticleTitle、ArticleContent等等，最后再到Readability网站Kindle Setting中设置下推送的模式。</p>
<h2 id="Pocket稍后阅读文章定期推送">Pocket稍后阅读文章定期推送</h2><p>P2K:<code>https://p2k.co/</code></p>
<blockquote>
<p>功能：<br>1.支持按每周/每日/手动推送<br>2.支持按最近添加文章数/阅读时间/随机推送<br>3.支持完整推送带全部图片</p>
</blockquote>
<h1 id="我订阅的RSS">我订阅的RSS</h1><p>OPML文件，可保存为<code>.opml</code>文件，可直接导入Kindle Ear<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;opml <span class="variable">version=</span><span class="string">"2.0"</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;READCOLA&lt;/title&gt;</span><br><span class="line">        &lt;dateCreated&gt;<span class="number">2015</span>-<span class="number">04</span>-<span class="number">15</span> <span class="number">15</span>:<span class="number">57</span>:<span class="number">05.899437</span>&lt;/dateCreated&gt;</span><br><span class="line">        &lt;dateModified&gt;<span class="number">2015</span>-<span class="number">04</span>-<span class="number">15</span> <span class="number">15</span>:<span class="number">57</span>:<span class="number">05.899437</span>&lt;/dateModified&gt;</span><br><span class="line">        &lt;ownerName&gt;fjkfwz@hotmail.com&lt;/ownerName&gt;</span><br><span class="line">        &lt;ownerEmail&gt;fjkfwz@hotmail.com&lt;/ownerEmail&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"知乎日报"</span> <span class="variable">description=</span><span class="string">"知乎日报"</span> <span class="variable">htmlUrl=</span><span class="string">"http://feeds.feedburner.com/zhihu-daily"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"知乎日报"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://feeds.feedburner.com/zhihu-daily"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"麻省理工科技评论"</span> <span class="variable">description=</span><span class="string">"麻省理工科技评论"</span> <span class="variable">htmlUrl=</span><span class="string">"http://zhihurss.miantiao.me/section/id/14"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"麻省理工科技评论"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://zhihurss.miantiao.me/section/id/14"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"知乎精选"</span> <span class="variable">description=</span><span class="string">"知乎精选"</span> <span class="variable">htmlUrl=</span><span class="string">"http://www.zhihu.com/rss"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"知乎精选"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://www.zhihu.com/rss"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"大公司日报"</span> <span class="variable">description=</span><span class="string">"大公司日报"</span> <span class="variable">htmlUrl=</span><span class="string">"http://zhihurss.miantiao.me/daily/id/5"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"大公司日报"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://zhihurss.miantiao.me/daily/id/5"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"环球科学"</span> <span class="variable">description=</span><span class="string">"环球科学"</span> <span class="variable">htmlUrl=</span><span class="string">"http://blog.sina.com.cn/rss/sciam.xml"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"环球科学"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://blog.sina.com.cn/rss/sciam.xml"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"小道消息"</span> <span class="variable">description=</span><span class="string">"小道消息"</span> <span class="variable">htmlUrl=</span><span class="string">"http://hutu.me/feed"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"小道消息"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://hutu.me/feed"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"邹剑波Kant"</span> <span class="variable">description=</span><span class="string">"邹剑波Kant"</span> <span class="variable">htmlUrl=</span><span class="string">"http://kant.cc/feed"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"邹剑波Kant"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://kant.cc/feed"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"人人都是产品经理"</span> <span class="variable">description=</span><span class="string">"人人都是产品经理"</span> <span class="variable">htmlUrl=</span><span class="string">"http://iamsujie.com/feed/"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"人人都是产品经理"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://iamsujie.com/feed/"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"TechCrunch 中国"</span> <span class="variable">description=</span><span class="string">"TechCrunch 中国"</span> <span class="variable">htmlUrl=</span><span class="string">"http://techcrunch.cn/feed/"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"TechCrunch 中国"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://techcrunch.cn/feed/"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"爱范儿"</span> <span class="variable">description=</span><span class="string">"爱范儿"</span> <span class="variable">htmlUrl=</span><span class="string">"http://www.ifanr.com/feed"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"爱范儿"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://www.ifanr.com/feed"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"Quora"</span> <span class="variable">description=</span><span class="string">"Quora"</span> <span class="variable">htmlUrl=</span><span class="string">"http://www.quora.com/rss"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"Quora"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://www.quora.com/rss"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"warfalcon"</span> <span class="variable">description=</span><span class="string">"warfalcon"</span> <span class="variable">htmlUrl=</span><span class="string">"http://ys.8wss.com/rss/oIWsFtxo3oqejVy4KaJ4RDMVIrE0/"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"warfalcon"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://ys.8wss.com/rss/oIWsFtxo3oqejVy4KaJ4RDMVIrE0/"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"Top News - MIT Technology Review"</span> <span class="variable">description=</span><span class="string">"Top News - MIT Technology Review"</span> <span class="variable">htmlUrl=</span><span class="string">"http://www.technologyreview.com/topnews.rss"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"Top News - MIT Technology Review"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://www.technologyreview.com/topnews.rss"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"The Economist: Science and technology"</span> <span class="variable">description=</span><span class="string">"The Economist: Science and technology"</span> <span class="variable">htmlUrl=</span><span class="string">"http://www.economist.com/feeds/print-sections/80/science-and-technology.xml"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"The Economist: Science and technology"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"http://www.economist.com/feeds/print-sections/80/science-and-technology.xml"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;outline <span class="variable">text=</span><span class="string">"Hacker News"</span> <span class="variable">description=</span><span class="string">"Hacker News"</span> <span class="variable">htmlUrl=</span><span class="string">"https://news.ycombinator.com/rss"</span> <span class="variable">language=</span><span class="string">"unknown"</span> <span class="variable">title=</span><span class="string">"Hacker News"</span> <span class="variable">type=</span><span class="string">"rss"</span> <span class="variable">version=</span><span class="string">"RSS2"</span> <span class="variable">xmlUrl=</span><span class="string">"https://news.ycombinator.com/rss"</span>/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">    &lt;/opml&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：这篇文章记录从ipad mini到kindle时代数字化阅读的折腾史，本文包括（1）.关于数字化阅读软件（2）.关于数字化出版运动及其造成的影响（3）.使用kindle之后的感受（4）.利用Kindle Ear搭建个人RSS推送平台（5）.免费的RSS2Kindle推送平台（6）.利用P2K推送pocket文章到kindle（7）.我的RSS订阅源<br>]]>
    
    </summary>
    
      <category term="kindle" scheme="http://masukio.tk/tags/kindle/"/>
    
      <category term="kindle ear" scheme="http://masukio.tk/tags/kindle-ear/"/>
    
      <category term="多看" scheme="http://masukio.tk/tags/%E5%A4%9A%E7%9C%8B/"/>
    
      <category term="kindle指南" scheme="http://masukio.tk/categories/kindle%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建高效的碎片化阅读系统]]></title>
    <link href="http://masukio.tk/2015/05/20/Reading-System/"/>
    <id>http://masukio.tk/2015/05/20/Reading-System/</id>
    <published>2015-05-20T08:51:05.000Z</published>
    <updated>2015-07-04T16:55:18.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：现代人对信息的渴求就像原始人对热量的追求一样，一昧的追求过载的信息就像肥胖人群不加掩饰对原子的贪婪，我们自以为随着科技的发达，人类的也会进化的文明起来，然而面对免费的比特世界，在虚拟进程的世界中，人类尽情的展示出的对一切事物的无求无尽的占有的欲望，现实世界中以物物交换为规则建立起来的人类社会在互联网思维下荡然无存，网络的原著民他们早已习惯了不对称的获取，然而过量的信息没有让他们变得更加聪慧，却像难以行走的胖娃娃，过量的热量会以人类追求的对立面将人类毁灭，信息也是。<br><a id="more"></a></p>
<h1 id="信息论">信息论</h1><p>字典中“噪”是指那些对人类行为过程不产生价值的信号，例如“噪声”指的就是“不需要的声音”，诚然一切从源发出的信号都是不带有偏见的，信号的价值只取决与信号的接收者对信息的灵敏度。“信噪比”（SIGNAL-NOISE RATIO)似乎能够很好的衡量客观衡量信息可利用的程度，然而从信息接收者的一方来看衡量信息价值的永远是需求，即当我们需要查找一类信息是就会对一些信息超敏反应，而对其他信息直接采取屏蔽措施。</p>
<p>据说大脑中90%的信息来自视觉神经的输入，正所谓“一图胜千言”，眼球的一幅画面所携带的信息远大于其他感官的信息输入，然而大自然鬼斧神工的眼球有一个致命的缺点就是它是需要对焦的，人类无法一次性获取全部映射如视觉神经细胞的光信号，我们看上去可以一次性获取一个画面，但是将眼前的画面分成9块，也就只剩下中间的那块是清晰可见的，而如果尝试一次性捕获整个视野就会发现全局失焦，当我们看一本书时，即使我们同时捕获了整页的文字，我们也难以获取其中的信息，即使我们有了高能力但是面对文字时依旧无能，而快熟的阅读一篇文章，我们依旧无法很好的获取其中信息，总的说大脑就是一台性能不均衡的电脑，带宽很高倒是快熟缓存系统简直糟糕透了，所以阅读可能并不是人类获取信息的最佳渠道，然而它是唯一最为直接能够确保信号不失真的途径。</p>
<p>声音是一种更接近自然的方式，当我们还是小孩纸的时候，即使不识字也可以清晰的通过声音还映射物体，但我们在阅读文字时我们会将文字脑读一遍，再将声音格式的信号储存在大脑中，当我们需要从大脑中读取音频信息后转化为字节信号，声音途径的另一个好处就是它的输入频率是非主控的，我们阅读文本时我们必须主动的控制信息的输入频率，也就是说，阅读文本是主动的，而声音是被动的，当然我们看东西是一个被动的过程对焦则是一个主动的过程，而主动则是一个耗能的过程。</p>
<p>同样身体各个器官都具有对焦的功能，因为对焦的过程是在大脑中进行的，对焦的过程其实是对信息权重的判断，忽略大多数的信号而只进行单线程的目标信息扫描，所以不难说塑造我们人生观世界观的其实是我们需要的信息。</p>
<h1 id="海量数据的收集与过滤">海量数据的收集与过滤</h1><p>信息是当今时代的货币，处理海量信息的能力决定每个人的成效。处理的第一步，是要选定关心的领域，进行信息收集。其实我觉得“收集”这个词未必准 确，“收集”有主动出击的意思，但我认为，最好是能让信息自动出现在你面前。RSS订阅，电子邮件，豆瓣友邻都有这样的功能。例如我感兴趣的领域包括计算 机科学，数学，心理学，人工智能。我会通过RSS订阅相关的博客，我在豆瓣上关注有共同兴趣的牛人，而我的电子邮件可以收到一些邮件列表信息或是电子杂志 (如Toplanguage讨论组，新语丝)。这样，我不必主动去“收集”信息，而是让信息自动聚合到我眼前，由我定期检阅，这样的好处当然是省时间，而 且便于以自己的节奏进行信息批处理。</p>
<p>收集信息倒不难，难的是怎样过滤信息。这里有一个前提假设，就是得到准确的信息比不准确的信息好，这点我想只要不是发神经的人，不会不同意。暂且不 论信息质量的高低，就是得到准确的信息很多情况下都不是那么容易的。拿政治信息来说，网民搜集资料多方猜测，可能到最后都是意淫，但在上面的人只要想了解 就很容易得到准确的信息(至于他知道信息后采取什么行动是另一回事)。Google到底有没有被中国黑客入侵？我们根本不清楚，但上面的人一定有准确的信 息。在任何一个领域中，处于领导地位的人都很容易获得他所需要的信息，这些人我称为信息中心。</p>
<p>因此，要更高效地得到准确的信息，只有两种方法，一是近量与信息中心接近。比如你想多了解金融信息，就认识一些在这个行业工作的人，而不是光靠新闻 媒体这种滞后又不一定准确的信息。另一个方面就是和与你有同样需求的人结成圈子，比如大量股民，这样通过P2P的方式，使得信息可以大量流通，缺点是垃圾信息太多，必须花心思选择信息质量高的圈子。</p>
<p>没有一种方法能保证你获得是准确而又高质量的信息，以上方法只能增加你获得准确信息的概率。最终对信息的筛选还需要你的判断力。但好的方法可以极大 减少你的工作量，使得到你眼前的信息已经是经过筛选的了，比如Google搜索的结果，事实上就是根据到这个页面的链接多少来排序的，于是呈现的结果本身 就是一个已筛选的结果。又比如想学习某个主题，可以看看某个牛人推荐的书籍，这便是牛人已帮你预筛选的信息了。<br>上面说到，由于信息不对称，有些信息只对这个领域的中心人物公开。但有一个领域例外，就是学术界，这个领域是以分享知识为宗旨的，所以所有的信息都是公开的，你可以很容易接近信息中心，里面的信息质量也非常高(如科学实验大都设计得非常严密)，善用学术领域的研究成果我认为是最大的信息杠杆，而且学 术界已经帮你筛选信息了，比如设计不严密的实验无法在有头有脸的学术期刊上发表。困难的是学术文章普通大众未必看得懂，但科普杂志和学者的博客、书籍也差 不到哪去。所以我强烈建议大家有空多看［科学松鼠会］和《环球科学》杂志，里面的信息不但质量高，也和我们的生活密切相关。比如，通过阅读这些信息，你能 很清楚地知道人类医学对各种疾病的攻克情况，而且你能确定这些信息是准确的，这样，你就不会被江湖上的神医和电视上的神药忽悠。</p>
<p>以上所说的方法等于是对所收集信息的第一轮筛选，其实这很重要，经过第一轮筛选后信息已经被精简了90%，我的Google Reader上每天新条目不超过20条，且其中的50%都能让我受益。之后的第二轮筛选只能靠你个人的判断力了。</p>
<p>判断力这东西说来含糊，说白了就是你要有一个框架，让你能判断信息的真伪和重要性。框架就是你判断事物的一些抽象的规则，正是因为抽象，所以它们简 洁而适用范围又广，比如为什么我不会被非法传销骗？因为我有一些简单的经济学原理知识，如果一个行业门槛很低，又宣称加入进来的人收入很高，那这行业如果 不是夸大宣传，就是有非法收入。于是如果这个组织进一步让你交“会员费”之类玩意的时候你就得格外小心。这个“投入很少收益又奇高”的规则可以帮助我筛选很多信息。比如24小时学会XXX之类的书，以及所有速成类的广告。</p>
<p>我的另一条判断规则，就是好书基本上每页都好，烂书基本上每页都烂，好的作者基本写出来的都是好东西，反之亦然。因此如果一个信息源一直产出垃圾信息，那你也别对它有指望了。比如各类伪科学作品。</p>
<p>我个人主要关注信息的准确度和质量，并不太关注信息的新鲜度和频率，比如刘未鹏的BLOG更新频率很低，但每篇都很有价值。对我来说，一个信息延迟 一些知道是没什么损失的，因为我现在的主轴是阅读经典。这就是为什么我不用twitter和校内(偶尔还是会看看朋友们的近况)，因为它们的信息质量和准确度太低了。其实对大部分人来说，信息的新鲜度都不是那么重要。</p>
<h1 id="我的阅读系统">我的阅读系统</h1><p><img src="http://7nar5o.com1.z0.glb.clouddn.com/resd.png" alt="我的阅读系统"></p>
<h2 id="一次筛选">一次筛选</h2><p>以前我看到好的网站，或者博客，都是放到浏览器收藏夹就算了，然后每天都把收藏夹里的网站刷一遍，然而这样做的坏处就是每次都要打开各种样式不同的页面，其次有的页面没有适配移动端，移动设备的体验非常差，而电脑显然不是一个优秀的阅读设备。尤其是各类独立的新闻媒体阅读体验并不良好，字体的排版还是CSS样式都让人有种浪里淘金的挫败感。还有就是这些站点会和收藏的其它页面混在一块，网页堆积过多了之后就会出现找不到的情况，而且网页的剪辑检索保存缺乏良好的用户体验，通常看完后需要再次检索就很难查找到了。<br>于是我尝试将这些网页通过RSS订阅聚合到Feedly再在移动端使用PRESS进行阅读，这样可以保证所有页面的阅读体验一致，PRESS的排版非常优秀，再搭配上稍后阅读软件POCKET，笔记本工具Evernote，用户体验非常良好，而起可以做到跨平台同步阅读进度。<br>后来发现网站和博客在Feedly里慢慢积累多了，新闻信息和工具类文章数量不平衡，全部挤在一起一片混乱，大大影响了阅读质量。于是参考了几位效率达人的方法，沿用了一个我比较喜欢的，就变成了现在的分类模式：</p>
<ol>
<li>最重要</li>
<li>一般重要</li>
<li>不重要</li>
</ol>
<p>这个是按照“你所关心的资讯”的重要程度来编排文件夹。将你觉得最关心、每天必读的源放进1；将一般般的资讯，如普通新闻类，甚至微博放进2，一般这类文章都是在坐车、等人之类碎片时间来阅读。将不重要的或者数量巨大的Feed放进3，这些feed一般是鸡肋，弃之可惜的就放进去吧。<br>之前我还短暂的按照另外一个方法来分类，就是按Feed的属性建立文件夹。这样就大概成了这样：</p>
<ol>
<li>GTD</li>
<li>Marketing</li>
<li>Porject Management</li>
<li>IT News<br>…<br>短暂尝试之后，发现这方法虽然直观但是效率不高，因为每个类目里面都有各种质量的feed或者内容文章，在进入文件夹之后还要下意识地查找比较有营养的资讯，有些没用的文章要点击进去看过才知道，这样操作等于多了一个步骤。如果按照重要程度来分类，基本进去第1个”最重要“文件夹就可以放心细读文章了。<br>按照重要程度来分类有一个基本要求，就是你对你收集到的各类Feed都有深刻了解，你不了解Feed，你就不知道它是否重要了。</li>
</ol>
<h2 id="二次筛选">二次筛选</h2><blockquote>
<p>其说PRESS是一款RSS阅读器，倒不如说是一款第三方的“RSS客户端”，Press的登录伊始就需要选择导入Feedly/Feed Wrangler/Feedbin/Fever的账号中的一个，所以在使用Press之前，记得先调教好以上的那些RSS服务商，因为在Press里，你并不能随便的添加订阅源。<br>好在即使是一款第三方的RSS客户端，Press也给了我绝对不一样的使用体验，简单的导入过后，看起来极为精致的UI设计就以让人爱不释手，深灰色的背景非常的养眼，而酒红色的icon在其中轻盈点缀，让人忍不住就想去触摸它。</p>
</blockquote>
<p>当然极为简约的阅读界面也是我的最爱，里面见不到杂乱无章的元素，只有右上角的已阅读/加星标/分享按钮孤独的矗立在那里；觉得文章好极了你还可以扔到第三方的稍后读服务中详细阅读，操作起来也极为简单：只需要触击正文下方的状态栏，一键发送到Readablility。此外，在下方还提供了Readablility一键网页排版优化，力保每一篇文章都能轻松获得最佳的阅读体验。</p>
<p>选择RSS阅读器这个步骤，我建议必须选择要有分享到”Read it Later“、Evernote之类服务的功能，要不无法满足我后面的筛选需要。我试用过有类似功能的app（iOS端）包括：Reeder，Newsify，还有一个国人做的叫yReader。这个yReader我个人也是非常喜欢，分享功能齐全，操作非常方便，只是觉得UI和文章排版布局我不太满意，但也是非常值得使用的一款Google Reader客户端，各位看官可以支持一下国人的精品。</p>
<p>选择好了自己的阅读器之后，如果你看完了一篇很好的文章，以发送到Evernote来存档。如果发现有些文章不必现在就读，可以在稍后的碎片时间里阅读；或者有些好文觉得必须多看一次，但是不是现在重新读一次，那就发送到提供“Read It Later 稍候读”服务的Pocket里面吧。</p>
<p>关于“3. 不重要”这个文件夹里面的无用资讯，按照一位达人所说，如果积累太多，要狠狠地将它”Mark All As Read“，不要手软。如果其他文件夹也严重积累未读，你又确实连浏览标题都没时间，那也需要狠狠地来一下。因为人的惰性很恐怖，越多积累着的文章未读，你会越不愿意打开它的。这点真的很重要。</p>
<h2 id="三次筛选">三次筛选</h2><p>Read It Later这个服务非常好，可以帮助你把精品文章保存起来多读几次，或者timing不合适留着晚点再读，或者就是喜欢它的排版干净纯粹，让人专注于阅读。关于这个我写了一篇关于该服务的文章，大家可以参考一下 《Read It Later稍后阅读之Pocket、Readability》。</p>
<p>因为我整理文章到Evernote归档的时间段是1周至2周，有时甚至更晚，所以需要在稍候读这个阶段进行文章筛选分类。要不当我发现稍后读服务里面积累了几十篇文章，要找到自己想看的类别就很辛苦了。</p>
<p>这里推荐使用Pocket，因为他能简单的为文章加Tag进行分类管理，操作直观，而且UI和字体排版都很不错。Instapaper的话也能把文章分类管理，但是不够Pocket纯粹，个人习惯问题我就舍弃了它。</p>
<p>具体操作例如我在Pocket里收集了关于GTD、项目管理、生活趣闻等类别的文章，我就把这些文章标记上相应的tag，想看哪个类别的就选哪个。很简单。</p>
<p>没收藏价值的文章，看完了之后直接标记”Archive“就可以放进已阅档案夹，pocket会替你好好保存，以后还可以翻出来。<br>有价值的文章可以用Pocket发送到Evernote，发送的同时你还可以选择填写该文章在Evernote里面所属的标签，这个步骤在pokcet里面可以选择省略，同时，在Chrome浏览器中看到的好文章也可以通过Evernote插件Clearly保存到Evernote中。</p>
<h2 id="四次筛选">四次筛选</h2><p>每周通过P2K（p2k.co）服务将POCKET中高质量的文章推送到Kindle保存以随时阅读，在加上kindle上的海量电子书可以满足信息的基本阅需求。</p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：现代人对信息的渴求就像原始人对热量的追求一样，一昧的追求过载的信息就像肥胖人群不加掩饰对原子的贪婪，我们自以为随着科技的发达，人类的也会进化的文明起来，然而面对免费的比特世界，在虚拟进程的世界中，人类尽情的展示出的对一切事物的无求无尽的占有的欲望，现实世界中以物物交换为规则建立起来的人类社会在互联网思维下荡然无存，网络的原著民他们早已习惯了不对称的获取，然而过量的信息没有让他们变得更加聪慧，却像难以行走的胖娃娃，过量的热量会以人类追求的对立面将人类毁灭，信息也是。<br>]]>
    
    </summary>
    
      <category term="feedly" scheme="http://masukio.tk/tags/feedly/"/>
    
      <category term="kindle" scheme="http://masukio.tk/tags/kindle/"/>
    
      <category term="pocket" scheme="http://masukio.tk/tags/pocket/"/>
    
      <category term="press" scheme="http://masukio.tk/tags/press/"/>
    
      <category term="rss" scheme="http://masukio.tk/tags/rss/"/>
    
      <category term="kindle指南" scheme="http://masukio.tk/categories/kindle%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Openwrt开发与Luci介绍]]></title>
    <link href="http://masukio.tk/2014/12/04/Luci-Developing/"/>
    <id>http://masukio.tk/2014/12/04/Luci-Developing/</id>
    <published>2014-12-03T16:00:00.000Z</published>
    <updated>2015-05-20T08:51:58.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：Lua作为一门方便嵌入(其它应用程序)并可扩展的轻量级脚本语言来设计的，因此她一直遵从着简单、小巧、可移植、快速的原则，官方实现完全采用ANSI C编写，能以C程序库的形式嵌入到宿主程序中。Lua的每个版本都保持着开放源码的传统，不过各版采用的许可协议并不相同，自5.0版(最新版是5.1)开始她采用的是著名的MIT许可协议。正由于上述特点，所以Lua在游戏开发、机器人控制、分布式应用、图像处理、生物信息学等各种各样的领域中得到了越来越广泛的应用。<br><a id="more"></a></p>
<hr>
<h1 id="Luci介绍">Luci介绍</h1><p>　　Luci是 Lua ConﬁgurationInterface的简称，意在OpenWrt整个系统的配置集中化。见链接：<br><a href="http://wiki.openwrt.org/zh-cn/doc/uci" target="_blank" rel="external"><code>http://wiki.openwrt.org/zh-cn/doc/uci</code></a></p>
<h2 id="Luci_的启动—uhttpd">Luci 的启动—uhttpd</h2><p>uhttpd是一个简单的web服务器程序，主要就是cgi的处理，openwrt是利用uhttpd作为web服务器，实现客户端web页面配置功能。对于request处理方式，采用的是cgi，而所用的cgi程序就是luci。</p>
<h2 id="Luci_的启动—luci">Luci 的启动—luci</h2><p>　　在web server中的cgi-bin目录下，运行 luci 文件（权限一般是 755 ），luci的代码如下：</p>
<pre><code>　　<span class="comment">#!/usr/bin/lua      --cgi的执行命令的路径 </span>

　　<span class="built_in">require</span><span class="string">"luci.cacheloader"</span>    <span class="comment">--导入cacheloader包 </span>

　　<span class="built_in">require</span><span class="string">"luci.sgi.cgi"</span>         <span class="comment">--导入sgi.cgi包  </span>

　　luci.dispatcher.indexcache = <span class="string">"/tmp/luci-indexcache"</span>  <span class="comment">--cache缓存路径地址 </span>

　　luci.sgi.cgi.run()  <span class="comment">--执行run，此方法位于*/luci/sgi/cgi.lua中</span>
</code></pre><h2 id="Luci—_Web">Luci— Web</h2><pre><code>　　<span class="tag">a</span>.登录

　　输入： http:<span class="comment">//x.x.x.x/ 登录LuCI.</span>

　　Calling /www/cgi-bin/luci.

　　<span class="tag">b</span>. 进入主菜单‘status’

　　输入： http:<span class="comment">//x.x.x.x/cgi-bin/luci/admin/status/即可访问status页面。Luci则会calling /luci/admin/目录下的status.lua脚本：</span>

　　<span class="function"><span class="title">module</span><span class="params">(<span class="string">"luci.controller.admin.status"</span>, package.seeall)</span></span>

　　/usr/lib/lua/luci/controller/admin/status.lua-&gt;<span class="function"><span class="title">index</span><span class="params">()</span></span>
</code></pre><h2 id="以status模块为例进行说明">以status模块为例进行说明</h2><p>　　模块入口文件status.lua在目录<code>lua\luci\controller\admin</code>下在index()函数中，使用entry函数来完成每个模块函数的注册：</p>
<pre><code>entry(path, target, title=<span class="keyword">nil</span>, <span class="keyword">order</span>=<span class="keyword">nil</span>)
</code></pre><h2 id="entry()函数">entry()函数</h2><pre><code>　　第一个参数是定义菜单的显示（Virtual path）。

　　第二个参数定义相应的处理方式(target)。

　　<span class="keyword">alias</span>是指向别的entry的别名，<span class="keyword">from</span>调用的某一个view，cbi调用某一个model，<span class="keyword">call</span>直接调用函数。

　　第三个参数是菜单的文本，_(“<span class="built_in">string</span>”),国际化。

　　第四个参数是是同级菜单下，此菜单项的位置，从大到小
</code></pre><h2 id="target主要分为三类：call，template_和cbi。">target主要分为三类：<code>call，template 和cbi</code>。</h2><h3 id="call用来调用函数。即语句">call用来调用函数。即语句</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">entry</span><span class="params">(&#123;<span class="string">"admin"</span>, <span class="string">"status"</span>, <span class="string">"iptables"</span>&#125;, call(<span class="string">"action_iptables"</span>)</span></span>, _(<span class="string">"Firewall"</span>), <span class="number">2</span>)</span><br><span class="line">Firewall模块调用了action_iptables函数</span><br></pre></td></tr></table></figure>
<h3 id="template调用">template调用</h3><p>template用来调用已有的htm模版，模版目录在lua\luci\view目录下。即语句</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entry(&#123;<span class="string">"admin"</span>,<span class="string">"status"</span>,<span class="string">"overview"</span>&#125;,<span class="keyword">template</span>(<span class="string">"admin_status/index"</span>),_(<span class="string">"Overview"</span>), <span class="number">1</span>)</span><br><span class="line">调用lua\luci\view\admin_status\index.htm文件来显示。</span><br></pre></td></tr></table></figure>
<h2 id="CBI调用">CBI调用</h2><p>　　a. CBI了解 –- Configuration Binding Interface</p>
<p>　　CBI模型是Lua文件描述UCI配置文件的结构和由此产生的HTML表单来评估CBI解析器，所有CBI luci.cbi.Map类型的模型文件必须返回一个map对象，在cbi模块中定义各种控件，Luci系统会自动执行大部分处理工作。其链接目录在<code>lua\luci\model\cbi</code>下 </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">entry</span><span class="params">(&#123;<span class="string">"admin"</span>, <span class="string">"status"</span>, <span class="string">"processes"</span>&#125;, cbi(<span class="string">"admin_status/processes"</span>)</span></span>, _(<span class="string">"Processes"</span>), <span class="number">6</span>)</span><br><span class="line">调用\lua\luci\model\cbi\admin_status\processes.lua来实现模块。</span><br></pre></td></tr></table></figure>
<h2 id="Luci_API的使用">Luci API的使用</h2><p>　　官方文档介绍：<a href="http://luci.subsignal.org/api/luci/" target="_blank" rel="external">http://luci.subsignal.org/api/luci/</a></p>
<p>　　比如：luci.sys luci.sys.net等对应的解析，由Luci源码结构中的<code>/luci-0.11/libs/sys/luasrc/sys.lua</code>完成。</p>
<h1 id="OpenWrt的UCI系统">OpenWrt的UCI系统</h1><p>UCI是Unified Configuration Interface的缩写，翻译成中文就是统一配置接口，用途就是为OpenWrt提供一个集中控制的接口。OpenWrt实现的这个工具，能够让你的不管是Lua还是PHP程序，或者SHELL程序或C程序，只要执行命令传输参数就能达到修改系统参数的目的，请参考本文后面的命令行实用工具。</p>
<h2 id="UCI系统的优势">UCI系统的优势</h2><p>系统的配置应该简单直接，UCI的设计初衷即是这样的，它是NVRAM-based配置方法的继承者（基于NVRAM的配置方法起源于OpenWrt的White Russian系列，该版本目前不再更新，最后发布于2007年，版本号为0.9）。UCI可以视为OpenWrt系统功能设置的主要用户配置接口，通常来说这些配置与系统的功能关联性较大，想像一样我们平常所使用的路由器或嵌入式设备中的WEB界面中的那些配置项，就是路由器或嵌入式设备系统所集成了的功能。常见的例子如路由器的网络接口设置，无线参数设置，logging设置和远程登录设置等。</p>
<h2 id="UCI统一标准">UCI统一标准</h2><p>UCI目前已经支持有一小部分应用程序，因而对这些应用程序的控制会变得更加简单一些。这些第三方应用程序都会有自己的配置文件，不同的语法，不同的文件位置，如</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>network/interfaces</span><br><span class="line"><span class="regexp">/etc/</span>exports</span><br><span class="line"><span class="regexp">/etc/</span>dnsmasq.conf</span><br><span class="line">或<span class="regexp">/etc/</span>samba/samba.conf</span><br></pre></td></tr></table></figure>
<p>由于UCI统一配置接口的出现，对这些第三方应用程序的配置只需要修改UCI的配置文件即可，就不必再去找不同的目录，写不同的语法了。当然，你安装的大多数第三方应用程序都没有提供UCI配置接口，很可能是因为这些应用程序本身就不需要向普通用户提供应用程序接口，配置文件是给开发者使用的，从这个角度上来看，没有提供UCI接口反而更好。因而，OpenWrt包维护人员只选定了一小部分必需的程序实现了UCI配置接口，下面有列出（Therefore, only a few selected programs which benefit from availability of a centralised configuration have been made UCI-compatible by the OpenWrt package maintainers (see the UCI configuration file list below)）。</p>
<p>许多第三方程序是根据它自己对应于/etc/config下的UCI配置文件的选项去设置程序的原始配置文件，这样就实现了程序对UCI配置的兼容，然后执行一次/etc/init.d脚本完成一次配置。因而当你启动一个某个程序的UCI兼容的进程脚本时，该脚本应该不只是修改/etc/config下对应的UCI配置文件，同时也应该覆盖程序自己的原配置文件。比如Samba/CIFS程序，其原配置文件是在/etc/samba/smb.conf，而对应的UCI文件是/etc/config/samba，当/etc/config/samba文件被修改了之后，需要运行一次</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/samba <span class="built_in">start</span></span><br></pre></td></tr></table></figure>
<p>之后UCI文件中的设置才会更新到原配置文件中去。</p>
<p><img src="http://picture-lotors.qiniudn.com/UCI1.png" alt="UCI统一标准方法"><br>除此之外，应用程序的配置文件常常是存放在RAM而不是FLASH中，因为它不需要每次修改参数之后就去写非易性闪存了，而只在应用改变的时候它才会根据UCI文件去写非易性闪存（原文：In addition, the application’s configuration file is often stored in RAM instead of in flash, because it does not need to be stored in non-volatile memory and it is rewritten after every change, based on the UCI file.）。</p>
<p>OpenWrt的wiki里有一篇文章NotUCI Configuration列举了一些与UCI不兼容的自带程序，而其它的第三方程序，你得自己去查阅程序的说明了。</p>
<h2 id="一般规则">一般规则</h2><p>UCI的配置文件被分割成/etc/config下的多个独立的文件，各个文件按名字含义对应系统的不同的功能配置。你可以通过文本编译器或者uci实用程序去修改这些配置文件，同时uci还提供了C语言/脚本/Lua等语言的应用程序接口，WEB配置页面例如Luci就是利用了uci所提供的API而实现对UCI配置文件的修改的。</p>
<p>不管你是采用文本编辑器还是通过命令行的方式修改了UCI配置文件，相应的服务或应用程序不会自动更新状态，这时你都必须调用一次<code>/etc/init.d (re)start</code>才能使刚刚对UCI配置文件的修改生效。许多兼容UCI的程序采用这样的方法来应用更新：在init.d脚本执行流中去修改自己程序的配置文件。具体说来，init.d脚本先去修改自己程序的原配置文件中的信息（如/etc/samba/smb.conf），之后重启一次应用程序，应用程序就会去读自己的配置文件（刚刚被init.d更新过的）再启动，这样应用程序的状态就更新了。仅仅重启应用程序，而不执行init.d脚本的话，/etc/config下的UCI配置文件是不会应用于应用程序的，新配置也就不生效了。<br>举个例子：</p>
<p>先登录到路由器的WEB页面把WiFi给禁用掉，这个时候你的手机搜索到你的路由器发送的SSID了，我这儿是NGTestRouter。<br><img src="http://picture-lotors.qiniudn.com/UCI2.png" alt="UCI统一标准方法"></p>
<p>这时我们准备通过使用文本编辑器修改UCI再应用的方法来现使能WiFi，步骤如下：</p>
<p>编辑wireless文件把disabled这个项注释掉（也就是enable WiFi了）<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#vi</span> /etc/config/wireless</span><br></pre></td></tr></table></figure></p>
<p>然后运行一次<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#/etc/init.d/network restart</span></span><br></pre></td></tr></table></figure></p>
<p>这时你的手机又可以看到NGTestRouter这个热点了！<br><img src="http://picture-lotors.qiniudn.com/UCI3.png" alt="UCI统一标准方法"></p>
<h2 id="文件语法">文件语法</h2><p>uci配置文件通常包含有一个或多个语句。所谓段（section），包含有一个或多个option语句，这些语句定义了实际的值。</p>
<p>下面是一个简单的配置文件：<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package <span class="symbol">'example'</span></span><br><span class="line"></span><br><span class="line">config <span class="symbol">'example'</span> <span class="symbol">'test'</span></span><br><span class="line">        <span class="built_in">option</span>   <span class="symbol">'string'</span>      <span class="symbol">'some</span> value'</span><br><span class="line">        <span class="built_in">option</span>   <span class="symbol">'boolean'</span>     <span class="char">'1'</span></span><br><span class="line">        <span class="built_in">list</span>     <span class="symbol">'collection'</span>  <span class="symbol">'first</span> item'</span><br><span class="line">        <span class="built_in">list</span>     <span class="symbol">'collection'</span>  <span class="symbol">'second</span> item'</span><br></pre></td></tr></table></figure></p>
<p><code>config &#39;example&#39; &#39;test&#39;</code>表示一个段的开始，其中<code>example</code>是段的类型，<code>test</code>为段的名字。段也可以没有名字，像<code>config &#39;example&#39;</code>，但是必须要有类型，类型指示了uci程序怎么去处理后面的option内容；<br><code>option &#39;string&#39; &#39;some value&#39;</code>和<code>option &#39;boolean&#39; &#39;1&#39;</code>两个语句定义了段内的两个标识符的值，虽然它们一个是<code>string</code>一个是<code>boolean</code>，但是在语法没有任何区别。<code>boolean</code>后面可以跟<code>&#39;0&#39;, &#39;no&#39;, &#39;off&#39;, &#39;false&#39;</code>中的一个作为否的值，或者<code>&#39;1&#39;, &#39;yes&#39;, &#39;on&#39;, &#39;true&#39;</code>作为逻辑是的值；<br>后面两行以<code>list</code>开头的语句，是为某个有多种选项值的<code>option</code>所定义的，在同一<code>option</code>中的选项值，它们应该有同样的名字，在这里的名字为<code>collection</code>。最张这两个值为收纳到同一个<code>list</code>表中，表中出现的顺序即你这里所定义的；<br>标识符<code>option</code>和<code>list</code>是为了更易读而加上的，没有它们也是可以的；<br>如果某个<code>option</code>没有但它不是必须的，那么uci处理程序会假定一个默认值；如果该option是必须的，而文件中没有定义，那么uci会报错或者显现出奇怪的结果；<br>语句中的标识和值可不必使用引号引起，除非你的字段值含有空格或者tab键。如果使用引号，那你可以随意使用单引号或者双引号。比如这样子：<br><figure class="highlight rsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">option</span> example value</span><br><span class="line"><span class="built_in">option</span> <span class="string">'example'</span> value</span><br><span class="line"><span class="built_in">option</span> example <span class="string">"value"</span></span><br><span class="line"><span class="built_in">option</span> <span class="string">"example"</span> <span class="string">'value'</span></span><br><span class="line"><span class="built_in">option</span> <span class="string">'example'</span> <span class="string">"value"</span></span><br></pre></td></tr></table></figure></p>
<p>不过不能这样子（引号混用，字段中有空格但未用引号引起来）：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">option <span class="string">'example" "value'</span> (quotes are unbalanced)</span><br><span class="line">option example some <span class="built_in">value</span> <span class="operator">with</span> <span class="constant">space</span> (note <span class="operator">the</span> missing quotes around <span class="operator">the</span> <span class="built_in">value</span>)</span><br></pre></td></tr></table></figure></p>
<p>UCI的文件名和标识符（像option example value中的example即为标识符，value为option的值）可以使用a-z, 0-9和下划线_组合的任意字符串，不允许使用横杠线-，而option的值可以傅任意字符（像空格这样子的字段值需要用引号引起）。</p>
<h2 id="命令行实用工具">命令行实用工具</h2><p>修改配置的一种方法是直接去修改UCI配置文件。不过，UCI配置文件读和写操作都可以通过uci命令行实用工具来完成，因而如果你自己去写一个脚本来解析或写入UCI配置文件不是一个明智的选择，既浪费时间又不一定写得好。以下介绍如何使用uci命令行实用工具，并伴有一些实例参考：</p>
<p>在学习该工具前需要注意：uci会把先读到UCI文件，其中不认识的所有命令参数和注释会被删除！所以，像uhttpd这样安装地有详细注释的文件，在使用uci操作之后其中的注释就会被抹掉的。OpenWrt的默认WEB界面Luci就是采用了uci来写UCI文件！</p>
<h2 id="Uci的使用">Uci的使用</h2><p>　　Uci命令的使用</p>
<pre><code>Usage: uci <span class="annotation">[&lt;options&gt;]</span> &lt;command&gt; <span class="annotation">[&lt;arguments&gt;]</span>

Commands:
        batch
        export     <span class="annotation">[&lt;config&gt;]</span>
        import     <span class="annotation">[&lt;config&gt;]</span>
        changes    <span class="annotation">[&lt;config&gt;]</span>
        commit     <span class="annotation">[&lt;config&gt;]</span>
        add        &lt;config&gt; &lt;section-<span class="class"><span class="keyword">type</span>&gt;</span>
        add_list   &lt;config&gt;.&lt;section&gt;.&lt;option&gt;=&lt;string&gt;
        del_list   &lt;config&gt;.&lt;section&gt;.&lt;option&gt;=&lt;string&gt;
        show       <span class="annotation">[&lt;config&gt;[.&lt;section&gt;[.&lt;option&gt;]</span>]]
        get        &lt;config&gt;.&lt;section&gt;[.&lt;option&gt;]
        set        &lt;config&gt;.&lt;section&gt;[.&lt;option&gt;]=&lt;value&gt;
        delete     &lt;config&gt;[.&lt;section&gt;[[.&lt;option&gt;][=&lt;id&gt;]]]
        rename     &lt;config&gt;.&lt;section&gt;[.&lt;option&gt;]=&lt;name&gt;
        revert     &lt;config&gt;[.&lt;section&gt;[.&lt;option&gt;]]
        reorder    &lt;config&gt;.&lt;section&gt;=&lt;position&gt;

Options:
        -c &lt;path&gt;  set the search path <span class="keyword">for</span> config files (<span class="keyword">default</span>: /etc/config)
        -d &lt;str&gt;   set the delimiter <span class="keyword">for</span> list values <span class="keyword">in</span> uci show
        -f &lt;file&gt;  <span class="keyword">use</span> &lt;file&gt; <span class="keyword">as</span> input instead <span class="keyword">of</span> stdin
        -m         <span class="keyword">when</span> importing, merge data into an existing package
        -n         name unnamed sections on export (<span class="keyword">default</span>)
        -N         don't name unnamed sections
        -p &lt;path&gt;  add a search path <span class="keyword">for</span> config change files
        -P &lt;path&gt;  add a search path <span class="keyword">for</span> config change files <span class="keyword">and</span> <span class="keyword">use</span> <span class="keyword">as</span> <span class="keyword">default</span>
        -q         quiet mode (don't print error messages)
        -s         force strict mode (stop on parser errors, <span class="keyword">default</span>)
        -S         disable strict mode
        -X         <span class="keyword">do</span> not <span class="keyword">use</span> extended syntax on 'show'
</code></pre><h3 id="例子">例子</h3><p>设置一个值</p>
<pre><code><span class="comment">#把uhttpd的监听端口从80换成8080</span>
root<span class="property">@OpenWrt</span>:~<span class="comment"># uci set uhttpd.main.listen_http=8080 </span>
root<span class="property">@OpenWrt</span>:~<span class="comment"># uci commit uhttpd </span>
root<span class="property">@OpenWrt</span>:~<span class="comment"># /etc/init.d/uhttpd restart </span>
root<span class="property">@OpenWrt</span>:~<span class="comment">#</span>

<span class="comment">#导出整体配置信息</span>
root<span class="property">@OpenWrt</span>:~<span class="comment"># uci export httpd </span>
package <span class="string">'httpd'</span> 
config <span class="string">'httpd'</span> 
    option <span class="string">'port'</span> <span class="string">'80'</span> 
    option <span class="string">'home'</span> <span class="string">'/www'</span> 
root<span class="property">@OpenWrt</span>:~<span class="comment">#</span>

<span class="comment">#显示一个给定配置的树</span>
root<span class="property">@OpenWrt</span>:~<span class="comment"># uci show httpd </span>
httpd.<span class="property">@httpd</span>[<span class="number">0</span>]=httpd 
httpd.<span class="property">@httpd</span>[<span class="number">0</span>].port=<span class="number">80</span> 
httpd.<span class="property">@httpd</span>[<span class="number">0</span>].home=/www 
root<span class="property">@OpenWrt</span>:~<span class="comment">#</span>

<span class="comment">#显示一个option的值</span>
root<span class="property">@OpenWrt</span>:~<span class="comment"># uci get httpd.@httpd[0].port </span>
<span class="number">80</span> 
root<span class="property">@OpenWrt</span>:~<span class="comment">#</span>

<span class="comment">#追加list的一个条目</span>
uci add_list system.ntp.server=<span class="string">'0.de.pool.ntp.org'</span>

<span class="comment">#替换一个list</span>
uci <span class="keyword">delete</span> system.ntp.server 
uci add_list system.ntp.server=<span class="string">'0.de.pool.ntp.org'</span> 
uci add_list system.ntp.server=<span class="string">'1.de.pool.ntp.org'</span> 
uci add_list system.ntp.server=<span class="string">'2.de.pool.ntp.org'</span>

<span class="comment">/**
*UCI路径
*假设有下面的UCI文件
*/</span>etc/config/foo 
**/

config bar <span class="string">'first'</span> 
    option name <span class="string">'Mr. First'</span> 
config bar 
    option name <span class="string">'Mr. Second'</span> 
config bar <span class="string">'third'</span> 
    option name <span class="string">'Mr. Third'</span>
那么下面三组路径的执行得到的值分别各自相等

<span class="comment"># Mr. First </span>
uci get foo.<span class="property">@bar</span>[<span class="number">0</span>].name 
uci get foo.<span class="property">@bar</span>[-<span class="number">0</span>].name 
uci get foo.<span class="property">@bar</span>[-<span class="number">3</span>].name 
uci get foo.first.name 
<span class="comment"># Mr. Second </span>
uci get foo.<span class="property">@bar</span>[<span class="number">1</span>].name 
uci get foo.<span class="property">@bar</span>[-<span class="number">2</span>].name 
<span class="comment"># uci get foo.second.name 本条语句不工作，因为second没有定义 </span>
<span class="comment"># Mr. Third </span>
uci get foo.<span class="property">@bar</span>[<span class="number">2</span>].name 
uci get foo.<span class="property">@bar</span>[-<span class="number">1</span>].name 
uci get foo.third.name
如果show，则会得到这样的值

<span class="comment"># uci show foo </span>
foo.first=bar 
foo.first.name=Mr. First 
foo.<span class="property">@bar</span>[<span class="number">0</span>]=bar 
foo.<span class="property">@bar</span>[<span class="number">0</span>].name=Mr. Second 
foo.third=bar 
foo.third.name=Mr. Third
执行uci show foo.<span class="property">@bar</span>[<span class="number">0</span>]得到

<span class="comment"># uci show foo.@bar[0] </span>
foo.first=bar 
foo.first.name=Mr. First
查询输出
root<span class="property">@OpenWrt</span>:~<span class="comment"># uci -P/var/state show network.wan</span>
<span class="attribute">uci</span>: Entry <span class="keyword">not</span> found
network.loopback=interface
network.loopback.ifname=lo
network.loopback.proto=static
network.loopback.ipaddr=<span class="number">127.0</span>.<span class="number">0.1</span>
network.loopback.netmask=<span class="number">255.0</span>.<span class="number">0.0</span>
network.loopback.up=<span class="number">1</span>
network.loopback.connect_time=<span class="number">10749</span>
network.loopback.device=lo
network.lan=interface
network.lan.type=bridge
network.lan.proto=static
network.lan.netmask=<span class="number">255.255</span>.<span class="number">255.0</span>
network.lan.ipaddr=<span class="number">10.0</span>.<span class="number">11.233</span>
network.lan.gateway=<span class="number">10.0</span>.<span class="number">11.254</span>
network.lan.dns=<span class="number">8.8</span>.<span class="number">8.8</span>
network.lan.up=<span class="number">1</span>
network.lan.connect_time=<span class="number">10747</span>
network.lan.device=eth0
network.lan.ifname=br-lan
</code></pre><p>添加防火墙规则<br>这个例子不仅演示了如何添加TCP SSH防火墙规则，同时也演示uci的negative (-1)语法。</p>
<h2 id="Uci_c_API的使用">Uci c API的使用</h2><p>　　在脚本中使用uci config文件：<a href="http://wiki.openwrt.org/doc/devel/config-scripting" target="_blank" rel="external">http://wiki.openwrt.org/doc/devel/config-scripting</a></p>
<p>　　总结一下Luci、Lua、Uci、CBI的关系图，如下图：<br><img src="http://picture-lotors.qiniudn.com/LUCI.jpg" alt="luci关系图"></p>
<p>　　以上为最近研究Luci开发的相关资料整理，同时自己也动手做了几个测试页面并通过luci.sys.call实现了脚本、系统程序的调用。</p>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：Lua作为一门方便嵌入(其它应用程序)并可扩展的轻量级脚本语言来设计的，因此她一直遵从着简单、小巧、可移植、快速的原则，官方实现完全采用ANSI C编写，能以C程序库的形式嵌入到宿主程序中。Lua的每个版本都保持着开放源码的传统，不过各版采用的许可协议并不相同，自5.0版(最新版是5.1)开始她采用的是著名的MIT许可协议。正由于上述特点，所以Lua在游戏开发、机器人控制、分布式应用、图像处理、生物信息学等各种各样的领域中得到了越来越广泛的应用。<br>]]>
    
    </summary>
    
      <category term="LUCI" scheme="http://masukio.tk/tags/LUCI/"/>
    
      <category term="Openwrt" scheme="http://masukio.tk/tags/Openwrt/"/>
    
      <category term="开发" scheme="http://masukio.tk/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Openwrt开发笔记" scheme="http://masukio.tk/categories/Openwrt%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Openwrt编译入门]]></title>
    <link href="http://masukio.tk/2014/08/16/Openwrt-Compiling/"/>
    <id>http://masukio.tk/2014/08/16/Openwrt-Compiling/</id>
    <published>2014-08-15T16:00:00.000Z</published>
    <updated>2015-07-07T17:16:21.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：这篇文章是Openwrt编译的学习笔记包括（1）Openwrt基础入门（2）Openwrt基础进阶（3）集成软件<br><a id="more"></a></p>
<hr>
<p>之前总喜欢在在写文章之前写一大段自己的光荣事迹，后来发现看别人这样写的文章是一件很蛋疼的事，毕竟这是一篇技术类文章，不是小学生日记。<br>好吧，这次直接进入正题，抱歉，又写了一段和本文内容无关的文字……<br>去年学校开始用H3C认证来限制我们上网，于是好奇心再次害死猫，本宫终于修成正果，误入Openwrt这个大坑，折腾Openwrt有一年多了，到了回馈社会的时候了，这篇文章写写Openwrt编译的一些高级配置（相对入门级编译教程而言），以HG255D为例。</p>
<hr>
<h1 id="Openwrt基础编译">Openwrt基础编译</h1><p>这类文章一手一大把，精简的，详细的（多半是废话）都有，这里就简单的把一些指令写下</p>
<hr>
<pre><code>编译环境为Ubuntu
<span class="preprocessor">#升级组件包</span>
sudo apt-<span class="keyword">get</span> update
<span class="preprocessor">#安装编译需要的组件</span>
sudo apt-<span class="keyword">get</span> install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip sharutils subversion libncurses5-dev ncurses-term zlib1g-dev git-core gawk asciidoc libz-dev sphinxsearch libtool sphinx-common libssl-dev libsqlite3* intltool libiconv* gstreamer-<span class="number">0.10</span>* glib2.0 libxml2-dev qemu
（*<span class="number">64</span>位系统需安装ia32-libs）
<span class="preprocessor">#使用非root用户登录，建立openwrt目录</span>
mkdir openwrt
<span class="preprocessor">#进入openwrt目录</span>
cd openwrt
<span class="preprocessor">#下载openwrt源码</span>
svn checkout svn:<span class="comment">//svn.openwrt.org/openwrt/trunk</span>
<span class="preprocessor">#赋予trunk目录权限</span>
sudo chmod -R <span class="number">777</span> trunk
<span class="preprocessor">#进入trunk目录</span>
cd trunk
<span class="preprocessor">#更新最新源码</span>
./scripts/feeds update -a
<span class="preprocessor">#安装最新源码</span>
./scripts/feeds install -a
<span class="preprocessor">#更新版本号</span>
svn up
<span class="preprocessor">#进入编译菜单</span>
make menuconfig
Y：选择Y，该软件将被编译，并且加入到你的目标固件里；
M：选择M，该软件包将会被编译，但不会被放入固件里。在需要它的时候，可以用OPKG软件包管理器进行安装；
N：选择N，该软件包将不会被编译，也不会被安装进固件。
方向键是移动光标
回车键是确认
空格键是选择，可以代替Y/M/N键的使用
/:搜索
<span class="preprocessor">#编译</span>
make V=<span class="number">99</span>
<span class="preprocessor">#清除编译过程产生的临时文件</span>
make clean
<span class="preprocessor">#恢复编译环境</span>
make defconfig
</code></pre><h1 id="Openwrt编译进阶">Openwrt编译进阶</h1><p>其实按照上面的指令一路执行下来，你已经能够在/bin/$target下找到刷机固件了,是不是很简单……</p>
<h2 id="修改WIFI设置">修改WIFI设置</h2><p><em><code>package/kernel/mac80211/files/lib/wifi/mac80211.sh</code></em></p>
<pre><code>config wifi-device  radio$devidx
    <span class="built_in">option</span> <span class="keyword">type</span>     mac80211
    <span class="built_in">option</span> channel  <span class="number">11</span>
    <span class="built_in">option</span> hwmode    <span class="number">11n</span>g
    <span class="built_in">option</span> path    <span class="char">'10180000.wmac'</span>
    <span class="built_in">option</span> htmode    <span class="type">HT20</span>
    <span class="built_in">list</span> ht_capab    <span class="type">GF</span>
    <span class="built_in">list</span> ht_capab    <span class="type">SHORT</span>-<span class="type">GI</span>-<span class="number">20</span>
    <span class="built_in">list</span> ht_capab    <span class="type">SHORT</span>-<span class="type">GI</span>-<span class="number">40</span>
    <span class="built_in">list</span> ht_capab    <span class="type">TX</span>-<span class="type">STBC</span>
    <span class="built_in">list</span> ht_capab    <span class="type">RX</span>-<span class="type">STBC12</span>
    # <span class="type">REMOVE</span> <span class="type">THIS</span> <span class="type">LINE</span> <span class="type">TO</span> <span class="type">ENABLE</span> <span class="type">WIFI</span>:
    <span class="built_in">option</span> disabled <span class="number">0</span>
    <span class="built_in">option</span> noscan <span class="number">1</span>
    <span class="built_in">option</span> txpower <span class="number">20</span>
    <span class="built_in">option</span> htmode <span class="type">HT40</span>-

config wifi-iface
    <span class="built_in">option</span> device   radio$devidx
    <span class="built_in">option</span> network  lan
    <span class="built_in">option</span> mode     ap
    #自定义<span class="type">SSID</span>为<span class="type">MakeBlaze_MAC</span>后六位
    <span class="built_in">option</span> ssid     <span class="type">MakeBlaze_</span>$(cat /sys/class/ieee80211/${dev}/macaddress|awk -<span class="type">F</span> <span class="string">":"</span> <span class="char">'{print $4""$5""$6 }'</span>| tr a-z <span class="type">A</span>-<span class="type">Z</span>) 
    <span class="built_in">option</span> encryption none
</code></pre><h2 id="修改LUCI">修改LUCI</h2><h3 id="修改LUCI界面配置">修改LUCI界面配置</h3><p><em><code>feeds/luci/modules/base/root/etc/config/luci</code></em></p>
<pre><code>config core main
    <span class="built_in">option</span> resourcebase <span class="string">'/luci-static/resources'</span>
    <span class="preprocessor">#设置默认语言</span>
    <span class="built_in">option</span> lang <span class="string">'zh_cn'</span>
    <span class="preprocessor">#设置默认主题</span>
    <span class="built_in">option</span> mediaurlbase <span class="string">'/luci-static/bootstrap'</span>

<span class="preprocessor">#设置可选择的语言        </span>
config internal languages
    <span class="built_in">option</span> zh_cn <span class="string">'chinese'</span>
    <span class="built_in">option</span> en <span class="string">'English'</span>
<span class="preprocessor">#设置可选择的主题</span>
config internal themes
    <span class="built_in">option</span> Bootstrap <span class="string">'/luci-static/bootstrap'</span>
</code></pre><h3 id="添加释放内存">添加释放内存</h3><p><em><code>feeds/luci/modules/admin-full/luasrc/controller/admin/index.lua</code></em></p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">index</span>()</span>
+    entry({<span class="string">"admin"</span>, <span class="string">"Free_Memory"</span>}, call(<span class="string">"Free_Memory"</span>), _(<span class="string">"释放内存"</span>), <span class="number">75</span>)
<span class="function"><span class="keyword">end</span></span>

<span class="function"><span class="keyword">function</span> <span class="title">Free_Memory</span>()</span>
    luci.util.exec(<span class="string">"echo 3 &gt; /proc/sys/vm/drop_caches"</span>)
    luci.<span class="keyword">http</span>.redirect(luci.dispatcher.build_url(<span class="string">"admin"</span>, <span class="string">"status"</span>, <span class="string">"overview"</span>))
<span class="function"><span class="keyword">end</span></span>
</code></pre><h3 id="在顶栏显示重启">在顶栏显示重启</h3><p><em><code>feeds/luci/modules/admin-full/luasrc/controller/admin/system.lua</code></em></p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span>
    <span class="title">entry</span><span class="params">({<span class="string">"admin"</span>, <span class="string">"reboot"</span>}, call<span class="params">(<span class="string">"action_reboot"</span>)</span>, _<span class="params">(<span class="string">"Reboot"</span>)</span>, <span class="number">90</span>)</span>
<span class="title">end</span></span>
</code></pre><p><em><code>feeds/luci/modules/admin-full/luasrc/view/admin_system/reboot.htm</code></em><br>    </p><p><a href="<%=controller%>/admin/reboot?reboot=1">&lt;%:Perform reboot%&gt;</a></p>
<h3 id="在顶栏显示备份/升级">在顶栏显示备份/升级</h3><p><em><code>feeds/luci/modules/admin-full/luasrc/controller/admin/system.lua</code></em></p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span>
    <span class="title">entry</span><span class="params">({<span class="string">"admin"</span>, <span class="string">"flashops"</span>}, call<span class="params">(<span class="string">"action_flashops"</span>)</span>, _<span class="params">(<span class="string">"Backup / Flash Firmware"</span>)</span>, <span class="number">70</span>)</span>
<span class="title">end</span></span>
</code></pre><h2 id="修改配置文件">修改配置文件</h2><p><em><code>package/base-files/files/etc/</code></em><br>在这个目录里，你可以把你的备份的路由器导入进来</p>
<h3 id="修改root密码">修改root密码</h3><p><em><code>package/base-files/files/etc/shadow</code></em></p>
<pre><code><span class="comment">#默认情况下root是没有密码的，需设定密码才能开启ssh</span>
root:<span class="variable">$1</span><span class="variable">$wEehtjxj</span><span class="variable">$YBu4quNfVUjzfv8p</span>/PBo5.:<span class="number">0</span>:<span class="number">0</span>:<span class="number">99999</span>:<span class="number">7</span>:::
</code></pre><h3 id="修改路由连接数">修改路由连接数</h3><p><em><code>package/base-files/files/etc/sysctl.conf</code></em></p>
<pre><code>net<span class="class">.netfilter</span><span class="class">.nf_conntrack_max</span>=<span class="number">65535</span>
</code></pre><h3 id="修改主机名，设定时区">修改主机名，设定时区</h3><p><em><code>package/base-files/files/etc/config/system</code></em></p>
<pre><code>config system
    <span class="preprocessor">#设置主机名</span>
    <span class="built_in">option</span> hostname <span class="string">'MakeBlaze'</span>
    <span class="built_in">option</span> conloglevel <span class="string">'8'</span>
    <span class="built_in">option</span> cronloglevel <span class="string">'8'</span>
    <span class="preprocessor">#设置时区</span>
    <span class="built_in">option</span> zonename <span class="string">'Asia/Shanghai'</span>
    <span class="built_in">option</span> timezone <span class="string">'CST-8'</span>

<span class="preprocessor">#设置时间服务器</span>
config timeserver <span class="string">'ntp'</span>
    <span class="built_in">option</span> enable_server <span class="string">'1'</span>
    list server <span class="string">'210.72.145.44'</span>
    list server <span class="string">'s1a.time.edu.cn'</span>
    list server <span class="string">'s1b.time.edu.cn'</span>
    list server <span class="string">'202.120.2.101'</span>

config led <span class="string">'usb_led'</span>
    <span class="built_in">option</span> name <span class="string">'USB'</span>
    <span class="built_in">option</span> sysfs <span class="string">'hg255d:usb'</span>
    <span class="built_in">option</span> trigger <span class="string">'usbdev'</span>
    <span class="built_in">option</span> dev <span class="string">'1-1'</span>
    <span class="built_in">option</span> interval <span class="string">'50'</span>

config led <span class="string">'wlan_led'</span>
    <span class="built_in">option</span> name <span class="string">'WLAN'</span>
    <span class="built_in">option</span> sysfs <span class="string">'hg255d:wlan'</span>
    <span class="built_in">option</span> trigger <span class="string">'netdev'</span>
    <span class="built_in">option</span> dev <span class="string">'ra0'</span>
    <span class="built_in">option</span> mode <span class="string">'link tx'</span>

config led <span class="string">'internet_led'</span>
    <span class="built_in">option</span> name <span class="string">'INTERNET'</span>
    <span class="built_in">option</span> sysfs <span class="string">'hg255d:internet'</span>
    <span class="built_in">option</span> trigger <span class="string">'netdev'</span>
    <span class="built_in">option</span> dev <span class="string">'eth0.2'</span>
    <span class="built_in">option</span> mode <span class="string">'tx rx'</span>
</code></pre><h3 id="SAMBA免密码访问">SAMBA免密码访问</h3><p><em><code>package/base-files/files/etc/config/samba</code></em></p>
<pre><code>config samba
    <span class="preprocessor">#显示中文</span>
    <span class="built_in">option</span> charset <span class="string">'gb2312'</span>

config sambashare
    <span class="built_in">option</span> read_only <span class="string">'no'</span>
    <span class="built_in">option</span> guest_ok <span class="string">'yes'</span>
    <span class="built_in">option</span> create_mask <span class="string">'0777'</span>
    <span class="built_in">option</span> dir_mask <span class="string">'0777'</span>
    <span class="built_in">option</span> display charset
</code></pre><p><em><code>package/base-files/files/etc/samba/smb.conf.template</code></em></p>
<pre><code>[global]
    netbios <span class="variable">name =</span> |NAME| 
    display <span class="variable">charset =</span> |CHARSET|
    <span class="variable">interfaces =</span> |INTERFACES|
    server <span class="variable">string =</span> |DESCRIPTION|
    unix <span class="variable">charset =</span> |CHARSET|
    <span class="variable">workgroup =</span> |WORKGROUP|
    <span class="variable">browseable =</span> yes
    <span class="variable">deadtime =</span> <span class="number">30</span>
    domain <span class="variable">master =</span> yes
    encrypt <span class="variable">passwords =</span> <span class="constant">true</span>
    enable core <span class="variable">files =</span> no
    guest <span class="variable">account =</span> root
    guest <span class="variable">ok =</span> yes
    <span class="comment">#invalid users = root</span>
    local <span class="variable">master =</span> yes
    load <span class="variable">printers =</span> no
    <span class="built_in">map</span> to <span class="variable">guest =</span> Bad User
    max <span class="variable">protocol =</span> SMB2
    min receivefile <span class="variable">size =</span> <span class="number">16384</span>
    <span class="constant">null</span> <span class="variable">passwords =</span> yes
    obey pam <span class="variable">restrictions =</span> yes
    os <span class="variable">level =</span> <span class="number">20</span>
    passdb <span class="variable">backend =</span> smbpasswd
    preferred <span class="variable">master =</span> yes
    <span class="variable">printable =</span> no
    <span class="variable">security =</span> share
    smb <span class="variable">encrypt =</span> disabled
    <span class="comment">#smb passwd file = /etc/samba/smbpasswd</span>
    socket <span class="variable">options =</span> TCP_NODELAY IPTOS_LOWDELAY
    <span class="variable">syslog =</span> <span class="number">2</span>
    use <span class="variable">sendfile =</span> yes
    <span class="variable">writeable =</span> yes
</code></pre><h2 id="集成软件">集成软件</h2><h3 id="添加aria2，luci添加，web管理界面">添加aria2，luci添加，web管理界面</h3><p><code>aria2 http://sourceforge.net/projects/aria2/files/stable/</code></p>
<pre><code><span class="preprocessor">#aria2的依赖安装</span>
sudo apt-<span class="keyword">get</span> update 
sudo apt-<span class="keyword">get</span> install autoconf automake libcppunit-dev autopoint openssl libtool sphinx-common sphinxsearch libgcrypt11-dev 
<span class="preprocessor">#下载aria2源码</span>
cd dl
sudo apt-<span class="keyword">get</span> install wget
wget http:<span class="comment">//sourceforge.net/projects/aria2/files/stable/aria2-1.18.7/aria2-1.18.7.tar.bz2</span>
<span class="preprocessor">#获取md5码</span>
md5sum aria2-<span class="number">1.18</span>.7.tar.bz2
<span class="preprocessor">#添加luci-aria2</span>
</code></pre><p>这里用的是南浦月的luci-app-aira2和webui-aria2<br><code>OpenWrt-Extra https://github.com/nanpuyue/openwrt-extra</code></p>
<pre><code>在feeds<span class="class">.conf</span><span class="class">.default</span>中添加`src-git extra git:<span class="comment">//github.com/nanpuyue/openwrt-extra.git`</span>
./scripts/feeds update -<span class="tag">a</span>
./scripts/feeds install -a
</code></pre><p>在make menuconfig中选中aria2，luci-app-aira2和webui-aria2就可以了</p>
<h3 id="添加将自己开发的程序">添加将自己开发的程序</h3><p>在package下建立一个文件夹，以自己的项目命名，里边包括一个files文件夹和一个Makefile文件</p>
<pre><code>目录结构
<span class="tag">&lt;<span class="title">ccnu</span>&gt;</span>
├Makefile
├<span class="tag">&lt;<span class="title">files</span>&gt;</span>
│  ├<span class="tag">&lt;<span class="title">etc</span>&gt;</span>
│  │  ├<span class="tag">&lt;<span class="title">config</span>&gt;</span>
│  │  │  └ccnu
│  │  ├<span class="tag">&lt;<span class="title">init.d</span>&gt;</span>
│  │  │  └ccnu
│  ├<span class="tag">&lt;<span class="title">usr</span>&gt;</span>
│  │  ├<span class="tag">&lt;<span class="title">lib</span>&gt;</span>
│  │  │  ├<span class="tag">&lt;<span class="title">lua</span>&gt;</span>
│  │  │  │  ├<span class="tag">&lt;<span class="title">luci</span>&gt;</span>
│  │  │  │  │  ├<span class="tag">&lt;<span class="title">controller</span>&gt;</span>
│  │  │  │  │  │  └ccnu.lua
│  │  │  │  │  ├<span class="tag">&lt;<span class="title">model</span>&gt;</span>
│  │  │  │  │  │  ├<span class="tag">&lt;<span class="title">cbi</span>&gt;</span>
│  │  │  │  │  │  │  └ccnu.lua
│  │  ├<span class="tag">&lt;<span class="title">sbin</span>&gt;</span>
│  │  │  └ccnu
</code></pre><p><em><code>package/ccnu/Makefile</code></em></p>
<pre><code><span class="keyword">include</span> <span class="variable">$(</span><span class="constant">TOPDIR)</span>/rules.mk

<span class="constant">PKG_NAME:</span>=ccnu
<span class="constant">PKG_VERSION:</span>=<span class="number">2.0</span>.<span class="number">1</span>        
<span class="constant">PKG_RELEASE:</span>=<span class="number">1</span>
<span class="constant">PKG_BUILD_DIR </span><span class="symbol">:</span>= <span class="variable">$(</span><span class="constant">BUILD_DIR)</span>/<span class="variable">$(</span><span class="constant">PKG_NAME)</span>

<span class="keyword">include</span> <span class="variable">$(</span><span class="constant">INCLUDE_DIR)</span>/package.mk

define <span class="constant">Package/</span>ccnu
  <span class="constant">SECTION:</span>=utils
  <span class="constant">CATEGORY:</span>=<span class="constant">Utilities</span>
  <span class="constant">SUBMENU:</span>=<span class="constant">H3C </span>inode
  <span class="constant">TITLE:</span>= iNode <span class="constant">Compatible Client </span><span class="keyword">for</span> <span class="constant">CCNU</span>
  <span class="constant">DEPENDS:</span>=+libc +libgcc 
  <span class="constant">MAINTAINER:</span>= <span class="constant">RiceLyn </span>&lt;fjkfwz<span class="variable">@gmail</span>.com&gt;
endef

define <span class="constant">Package/</span>ccnu/description
    iNode <span class="constant">Compatible Client </span><span class="keyword">for</span> <span class="constant">CCNU</span>
endef

define <span class="constant">Build/Prepare</span>
endef

define <span class="constant">Build/Configure</span>
endef

define <span class="constant">Build/Compile</span>
endef

define <span class="constant">Package/</span>ccnu/install
    <span class="variable">$(</span><span class="constant">CP)</span> ./files/* <span class="variable">$(</span><span class="number">1</span>)/
endef

<span class="variable">$(</span>eval <span class="variable">$(</span>call <span class="constant">BuildPackage,</span>ccnu))
</code></pre><p>之后./scripts/feeds install -a,ccnu就会出现在Utilities -&gt; H3C inode里啦<br>这里先做一个简单的程序，以后会写文章详细介绍。</p>
<h2 id="HG255D个性化配置">HG255D个性化配置</h2><h3 id="开启HG255D编译">开启HG255D编译</h3><p><em><code>/target/linux/ramips/image/Makefile</code></em>去除HG255D前的<code>#</code></p>
<pre><code>Image/Build/Profile/H<span class="keyword">G255</span>D=$<span class="comment">(call BuildFirmware/Default16M/$(1)</span>,$<span class="comment">(1)</span>,h<span class="keyword">g255</span>d,H<span class="keyword">G255</span>D)
$<span class="comment">(call Image/Build/Profile/HG255D,$(1)</span>)
</code></pre><h3 id="make_menuconfig配置">make menuconfig配置</h3><pre><code><span class="comment">#选择编译对象</span>
Target System (Ralink RT288x/RT3xxx)    —&gt;
Subtarget (RT3x5x/RT5350 based boards)  —&gt;
Target Profile (HuaWei HG255D)          —&gt;

<span class="comment">#添加USB挂载</span>
Base system —&gt; <span class="variable">&lt;*&gt;</span>block-mount   

<span class="comment">#添加硬盘格式支持</span>
Kernel modules —&gt; Filesystems —&gt; <span class="variable">&lt;*&gt;</span> kmod-fs-ext4 (移动硬盘EXT4格式选择)
Kernel modules —&gt; Filesystems —&gt; <span class="variable">&lt;*&gt;</span> kmod-fs-vfat(FAT16 / FAT32 格式 选择)
Kernel modules —&gt; Filesystems —&gt; <span class="variable">&lt;*&gt;</span> kmod-fs-ntfs (NTFS 格式 选择)

<span class="comment">#添加USB相关支持</span>
Kernel modules —&gt; USB Support —&gt; <span class="variable">&lt;*&gt;</span> kmod-usb-core.
Kernel modules —&gt; USB Support —&gt; <span class="variable">&lt;*&gt;</span> kmod-usb-ohci.
Kernel modules —&gt; USB Support —&gt; <span class="variable">&lt;*&gt;</span> kmod-usb-storage.
Kernel modules —&gt; USB Support —&gt; <span class="variable">&lt;*&gt;</span> kmod-usb-storage-extras.
Kernel modules —&gt; USB Support —&gt; <span class="variable">&lt;*&gt;</span> kmod-usb2.
Kernel modules —&gt; USB Support —&gt; <span class="variable">&lt;*&gt;</span> kmod-usb3.

<span class="comment">#添加自动挂载工具</span>
Utilities —&gt; Filesystem —&gt; <span class="variable">&lt;*&gt;</span> badblocks

<span class="comment">#添加UTF8编码,CP437编码，ISO8859-1编码</span>
Kernel modules —&gt; Native Language Support —&gt; <span class="variable">&lt;*&gt;</span> kmod-nls-cp437
Kernel modules —&gt; Native Language Support —&gt; <span class="variable">&lt;*&gt;</span> kmod-nls-iso8859-<span class="number">1</span>
Kernel modules —&gt; Native Language Support —&gt; <span class="variable">&lt;*&gt;</span> kmod-nls-utf8

<span class="comment">#添加SCSI支持</span>
Kernel modules —&gt; Block Devices —&gt; <span class="variable">&lt;*&gt;</span>kmod-scsi-core

<span class="comment">#添加LED支持</span>
LED modules  —&gt;
<span class="variable">&lt; *&gt;</span> kmod-ledtrig-usbdev…………………………. LED USB device Trigger

<span class="comment">#添加luci</span>
LuCI -&gt;Collections -&gt; <span class="variable">&lt;*&gt;</span> luci

<span class="comment">#添加luci的中文语言包</span>
LuCI -&gt;Translations -&gt; <span class="variable">&lt;*&gt;</span> luci-i18n-chinese

<span class="comment">#添加luci应用</span>
LuCI -&gt;Applications  —&gt; <span class="variable">&lt;*&gt;</span> luci-app-aria2……………………………… LuCI Support <span class="keyword">for</span> aria2
LuCI -&gt;Applications  —&gt; <span class="variable">&lt;*&gt;</span> luci-app-ddns……………………… Dynamic DNS configuration module
LuCI -&gt;Applications  —&gt; <span class="variable">&lt;*&gt;</span> luci-app-samba……………….. Network Shares – Samba SMB/CIFS module
LuCI -&gt;Applications  —&gt; <span class="variable">&lt;*&gt;</span> luci-app-transmission…………………. LuCI Support <span class="keyword">for</span> Transmission
</code></pre><h3 id="开启POWER_LED状态指示灯">开启POWER LED状态指示灯</h3><p><em><code>target\linux\ramips\base-files\etc\diag.sh</code></em></p>
<pre><code>get_status_led() {
    <span class="keyword">case</span> <span class="variable">$(</span>ramips_board_name) <span class="keyword">in</span>
+    hg255d)
+        status_led=<span class="string">"hg255d:power"</span>
+        ;;
</code></pre><h3 id="使用RA-MOD软件源">使用RA-MOD软件源</h3><p><em><code>RA-MOD https://github.com/ravageralpha/my_openwrt_mod</code></em></p>
<pre><code>feeds<span class="class">.conf</span><span class="class">.default</span>
src-git ramod git:<span class="comment">//github.com/ravageralpha/my_openwrt_mod.git</span>
<span class="id">#src-git</span> luci http:<span class="comment">//git.openwrt.org/project/luci.git    </span>

./scripts/feeds clean
./scripts/update -<span class="tag">a</span>
./scripts/install -a
</code></pre><h3 id="添加自动挂载脚本">添加自动挂载脚本</h3><p><em><code>/package/base-files/files/etc/gotplug/block/30-block_mount</code></em></p>
<pre><code><span class="shebang">#!/bin/sh
</span>
<span class="comment">#---------------------------------------------------------------------</span>
<span class="comment"># Filename:    30-block_mount</span>
<span class="comment"># Revision:    0.5.1</span>
<span class="comment"># Data:        Jul. 7, 2014</span>
<span class="comment"># Email:       kevinyu@vip.qq.com</span>
<span class="comment"># Contacts:    QQ/TM 389191 or mail address above</span>
<span class="comment"># Licensing:   General Public License v2</span>
<span class="comment"># Description: Created for automatic mount block devices on OpenWRT</span>
<span class="comment"># Usage:       Put this script into directory /etc/hotplug.d/block</span>
<span class="comment">#---------------------------------------------------------------------</span>

<span class="comment">## Global settings of auto-mount script ##</span>

<span class="comment"># Turn on|off auto-mount function for disk volumes</span>
VOL_ENABLED=<span class="number">1</span>  <span class="comment"># &lt;0|1  0-Disable, 1-Enable&gt;</span>

<span class="comment"># Turn on|off auto-mount function for sawp partition  </span>
SWAP_ENABLED=<span class="number">1</span>  <span class="comment"># &lt;0|1  0-Disable, 1-Enable&gt;</span>

<span class="comment"># Set which method you want to name the mounted volumes</span>
USE_VLABEL=<span class="number">1</span>  <span class="comment"># &lt;0|1  0-Use device name, 1-Use volume label&gt;  Eg. /mnt/sda1 | /mnt/DataDisk</span>
<span class="comment">#</span>
<span class="comment"># Note that if you choose name mount point by volume label but the volume's label is empty,</span>
<span class="comment"># the volume will be named to 'volume_$PARTUUID', such as the /mnt/volume_31173116-01</span>
<span class="comment"># Also, if exist more than one device which have the same volume label, it will be renamed </span>
<span class="comment"># as the original name + sequence number, such as the /mnt/DataDisk_n (n=1,2,3..9)</span>

<span class="comment"># Show filesystem type as the prefix of mount point, requires set USE_VLABEL=1</span>
FSTYPE_IN_VLABEL=<span class="number">1</span>  <span class="comment"># &lt;0|1  0-Disable, 1-Enable&gt;  Eg. /mnt/[ntfs]-DataDisk</span>

<span class="comment"># Set access the mounted device with read-write or read-only permission</span>
FS_READONLY=<span class="number">0</span>  <span class="comment"># &lt;0|1  0-Read Write, 1-Read Only&gt;</span>

<span class="comment"># Exclusion list of auto-mount function</span>
<span class="comment"># Allows mixing the device name, volume label and UUID, each item must be separated by space(s)</span>
<span class="comment"># Eg. EXCLUDE_LIST="sda1 DataDisk f32b2ea6-4d42-43a5-bcec-7d818a163d07" </span>
EXCLUDE_LIST=<span class="string">""</span>  <span class="comment"># Default: empty string</span>

<span class="comment"># Specify a directory for mounts</span>
MOUNTS_PATH=<span class="string">"/mnt"</span>  <span class="comment"># Default: /mnt , don't need include the trailing slash (/)</span>

<span class="comment"># Define the add-ons scripts directory for automatic execute</span>
ADDSH_PATH=<span class="string">"/etc/hotplug.d/user"</span>  <span class="comment"># Script naming rule: [0-9][0-9]-xxxxx, Eg. 20-backup-sdcard</span>

<span class="comment">## End of global settings ##</span>

<span class="comment"># Purge the directory MOUNTS_PATH</span>
<span class="function"><span class="title">purge_mnts</span></span>()
{
<span class="built_in">local</span> i RETVAL
[ <span class="operator">-d</span> <span class="variable">$MOUNTS_PATH</span> ] || <span class="built_in">return</span> <span class="number">1</span>
<span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$MOUNTS_PATH</span>/* ; <span class="keyword">do</span>
    <span class="keyword">if</span> [ <span class="operator">-d</span> <span class="variable">$i</span> ] ; <span class="keyword">then</span>
        <span class="keyword">if</span> [ -z <span class="string">"`ls -A <span class="variable">$i</span> 2&gt;&amp;-`"</span> ] ; <span class="keyword">then</span>
            `grep -qs <span class="string">"<span class="variable">$i</span>"</span> /proc/mounts` || { rm -rf <span class="variable">$i</span> <span class="number">2</span>&gt;/dev/null; RETVAL=$?; }
            <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> <span class="operator">-eq</span> <span class="number">0</span> ] ; <span class="keyword">then</span>
                logger -t Auto-Mount <span class="string">"[Notice] Unused mount point <span class="variable">$i</span> was removed"</span>
                [ <span class="string">"<span class="variable">$CLI</span>"</span> = <span class="string">"yes"</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"[Notice] Unused mount point '<span class="variable">$i</span>' was removed"</span>
            <span class="keyword">else</span>
                logger -t Auto-Mount <span class="string">"[Error] Remove unused mount point <span class="variable">$i</span> failed"</span>
                [ <span class="string">"<span class="variable">$CLI</span>"</span> = <span class="string">"yes"</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"[Error] Remove unused mount point <span class="variable">$i</span> failed"</span>
            <span class="keyword">fi</span>
        <span class="keyword">fi</span>
    <span class="keyword">fi</span>
<span class="keyword">done</span>
}

<span class="comment"># Unmount all block device</span>
<span class="function"><span class="title">umountall</span></span>()
{
<span class="built_in">local</span> i MOUNTS
MOUNTS=`grep -os <span class="string">'^/dev/sd[a-z][1-9]'</span> /proc/mounts`
<span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$MOUNTS</span> ; <span class="keyword">do</span>
    umount <span class="operator">-f</span> <span class="variable">$i</span>
    [ $? <span class="operator">-eq</span> <span class="number">0</span> ] &amp;&amp;    <span class="built_in">echo</span> <span class="string">"[Notice] Device <span class="variable">$i</span> unmounted"</span> | tee /proc/self/fd/<span class="number">2</span> | logger -t Auto-Mount
<span class="keyword">done</span>
purge_mnts
}

<span class="comment"># Detect blkid exists</span>
BLKID=`<span class="built_in">which</span> blkid`
<span class="keyword">if</span> [ $? <span class="operator">-ne</span> <span class="number">0</span> ] ; <span class="keyword">then</span>
    logger -t Auto-Mount <span class="string">"[Error] Unable to mount block devices automatically because 'blkid' does not exist"</span>
    <span class="built_in">exit</span> <span class="number">1</span>
<span class="keyword">fi</span>

MOUNTS_PATH=<span class="variable">${MOUNTS_PATH%/}</span>
[ -z <span class="string">"<span class="variable">$ACTION</span>"</span> ] &amp;&amp; ACTION=<span class="variable">${1##*-}</span>
[ -n <span class="string">"<span class="variable">$DEVICENAME</span>"</span> ] &amp;&amp; DEV=<span class="variable">$DEVICENAME</span> || DEV=<span class="variable">$2</span>
logger -t Auto-Mount <span class="string">"[Debug] action='<span class="variable">$ACTION</span>' devicename='<span class="variable">$DEV</span>'"</span>
<span class="keyword">case</span> <span class="string">"<span class="variable">$ACTION</span>"</span> <span class="keyword">in</span>
    add)
        [ -z <span class="string">"<span class="variable">$DEV</span>"</span> ] &amp;&amp; { logger -t Auto-Mount <span class="string">"[Error] Missing required arguments: \$devicename"</span>; <span class="built_in">exit</span> <span class="number">1</span>; }
        <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$EXCLUDE_LIST</span>"</span> ] ; <span class="keyword">then</span>
            UUID=`<span class="variable">$BLKID</span> <span class="operator">-s</span> UUID /dev/<span class="variable">$DEV</span> | awk -F <span class="string">'='</span> <span class="string">'{print $NF}'</span> | tr <span class="operator">-d</span> <span class="string">'"| '</span>`
            VLABEL=`<span class="variable">$BLKID</span> <span class="operator">-d</span> <span class="operator">-s</span> LABEL /dev/<span class="variable">$DEV</span> | awk -F <span class="string">'='</span> <span class="string">'{print $NF}'</span> | tr <span class="operator">-d</span> <span class="string">'"| '</span>`
            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$EXCLUDE_LIST</span> ; <span class="keyword">do</span>
                ignore=<span class="number">0</span>
                <span class="keyword">if</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>"</span> | grep -qs <span class="string">'^sd[a-z][1-9]$'</span>` ; <span class="keyword">then</span>  <span class="comment"># is device name</span>
                    [ <span class="variable">$i</span> = <span class="variable">$DEV</span> ] &amp;&amp; ignore=<span class="number">1</span>
                <span class="keyword">elif</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>"</span> | grep -Eiqs <span class="string">'^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$'</span>` ; <span class="keyword">then</span>  <span class="comment"># is UUID</span>
                    [ <span class="variable">$i</span> = <span class="variable">$UUID</span> ] &amp;&amp; ignore=<span class="number">1</span>
                <span class="keyword">else</span>  <span class="comment"># as volume label</span>
                    [ <span class="variable">$i</span> = <span class="variable">$VLABEL</span> ] &amp;&amp; ignore=<span class="number">1</span>
                <span class="keyword">fi</span>
                [ <span class="variable">$ignore</span> <span class="operator">-eq</span> <span class="number">1</span> ] &amp;&amp; { logger -t Auto-Mount <span class="string">"[Notice] Device <span class="variable">$DEV</span> is ignored because it in exclusion list"</span>; <span class="built_in">exit</span> <span class="number">0</span>; }
            <span class="keyword">done</span>
        <span class="keyword">fi</span>
        <span class="keyword">if</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$DEV</span>"</span> | grep -qs <span class="string">'^sd[a-z][1-9]$'</span>` ; <span class="keyword">then</span>
            [ -z <span class="string">"<span class="variable">$VLABEL</span>"</span> ] &amp;&amp; VLABEL=`<span class="variable">$BLKID</span> <span class="operator">-d</span> <span class="operator">-s</span> LABEL /dev/<span class="variable">$DEV</span> | awk -F <span class="string">'='</span> <span class="string">'{print $NF}'</span> | tr <span class="operator">-d</span> <span class="string">'"| '</span>`
            [ -z <span class="string">"<span class="variable">$VLABEL</span>"</span> ] &amp;&amp; VLABEL=<span class="string">"unknown"</span>
            FSTYPE=`<span class="variable">$BLKID</span> <span class="operator">-s</span> TYPE /dev/<span class="variable">$DEV</span> | awk -F <span class="string">'='</span> <span class="string">'{print $NF}'</span> | tr <span class="operator">-d</span> <span class="string">'"| '</span>`
            logger -t Auto-Mount <span class="string">"[Debug] devicename='<span class="variable">$DEV</span>' volume_label='<span class="variable">$VLABEL</span>' fstype='<span class="variable">$FSTYPE</span>'"</span>
            MCMD=<span class="string">""</span>  <span class="comment"># set default value</span>
            [ <span class="variable">$FS_READONLY</span> <span class="operator">-eq</span> <span class="number">1</span> ] &amp;&amp; acs=<span class="string">"ro"</span> || acs=<span class="string">"rw"</span>
            <span class="keyword">case</span> <span class="string">"<span class="variable">$FSTYPE</span>"</span> <span class="keyword">in</span>
                ext[<span class="number">234</span>])
                    <span class="keyword">if</span> `grep -vs <span class="string">'^nodev'</span> /proc/filesystems | grep -qs <span class="string">"<span class="variable">$FSTYPE</span>"</span>` ; <span class="keyword">then</span>
                        MCMD=<span class="string">"mount -t <span class="variable">$FSTYPE</span> -o <span class="variable">${acs}</span>,noatime"</span>
                    <span class="keyword">fi</span>
                    ;;
                xfs|reiserfs)
                    <span class="keyword">if</span> `grep -vs <span class="string">'^nodev'</span> /proc/filesystems | grep -qs <span class="string">"<span class="variable">$FSTYPE</span>"</span>` ; <span class="keyword">then</span>
                        MCMD=<span class="string">"mount -t <span class="variable">$FSTYPE</span> -o <span class="variable">${acs}</span>,noatime"</span>
                    <span class="keyword">fi</span>
                    ;;
                iso9660|udf)
                    <span class="keyword">if</span> `grep -vs <span class="string">'^nodev'</span> /proc/filesystems | grep -qs <span class="string">"<span class="variable">$FSTYPE</span>"</span>` ; <span class="keyword">then</span>
                        MCMD=<span class="string">"mount -t <span class="variable">$FSTYPE</span> -o ro"</span>
                    <span class="keyword">fi</span>                    ;;
                vfat|msdos)
                    <span class="keyword">if</span> `grep -vs <span class="string">'^nodev'</span> /proc/filesystems | grep -qs <span class="string">"<span class="variable">$FSTYPE</span>"</span>` ; <span class="keyword">then</span>
                        MCMD=<span class="string">"mount -t <span class="variable">$FSTYPE</span> -o <span class="variable">${acs}</span>,codepage=936,umask=000"</span>  <span class="comment">#iocharset=utf8</span>
                    <span class="keyword">fi</span>
                    ;;
                exfat)
                    <span class="keyword">if</span> `grep -Eqs <span class="string">'^[[:space:]]+fuseblk$'</span> /proc/filesystems` &amp;&amp; `<span class="built_in">which</span> mount.exfat &gt;/dev/null` ; <span class="keyword">then</span>
                        MCMD=<span class="string">"mount.exfat -o <span class="variable">${acs}</span>,iocharset=cp936,umask=000"</span>
                    <span class="keyword">fi</span>
                    ;;
                ntfs)
                    <span class="keyword">if</span> `grep -Eqs <span class="string">'^[[:space:]]+fuseblk$'</span> /proc/filesystems` &amp;&amp; `<span class="built_in">which</span> mount.ntfs-<span class="number">3</span>g &gt;/dev/null` ; <span class="keyword">then</span>
                        MCMD=<span class="string">"mount -t ntfs-3g -o <span class="variable">${acs}</span>,noatime,big_writes,async,umask=000"</span>
                    <span class="keyword">fi</span>
                    ;;
                swap)
                    [ <span class="variable">$SWAP_ENABLED</span> <span class="operator">-ne</span> <span class="number">1</span> ] &amp;&amp; <span class="built_in">exit</span> <span class="number">0</span>
                    <span class="keyword">if</span> [ `grep -vs <span class="string">'^Filename'</span> /proc/swaps | wc <span class="operator">-l</span>` <span class="operator">-eq</span> <span class="number">0</span> ] ; <span class="keyword">then</span>
                        MCMD=<span class="string">"swapon /dev/<span class="variable">$DEV</span>"</span>
                    <span class="keyword">fi</span>
                    ;;
                *)
                    MCMD=<span class="string">""</span>
                    ;;
            <span class="keyword">esac</span>
            [ <span class="variable">$VOL_ENABLED</span> <span class="operator">-ne</span> <span class="number">1</span> ] &amp;&amp; <span class="built_in">exit</span> <span class="number">0</span>
            <span class="keyword">if</span> [ <span class="variable">$FSTYPE</span> = <span class="string">"swap"</span> ] ; <span class="keyword">then</span>
                MOPT=<span class="string">""</span>
            <span class="keyword">elif</span> [ <span class="variable">$FSTYPE</span> = <span class="string">"iso9660"</span> -o <span class="variable">$FSTYPE</span> = <span class="string">"udf"</span> ] ; <span class="keyword">then</span>
                CDROM=<span class="string">"cdrom"</span>
                <span class="keyword">if</span> `grep -qs <span class="string">"<span class="variable">$MOUNTS_PATH</span>/<span class="variable">$CDROM</span> "</span> /proc/mounts` ; <span class="keyword">then</span>
                    SUFFIX=<span class="number">1</span>
                    <span class="keyword">while</span> `grep -qs <span class="string">"<span class="variable">$MOUNTS_PATH</span>/<span class="variable">$CDROM</span> "</span> /proc/mounts` ; <span class="keyword">do</span>
                        [ <span class="variable">$SUFFIX</span> <span class="operator">-lt</span> <span class="number">10</span> ] &amp;&amp; CDROM=<span class="string">"<span class="variable">${CDROM%_*}</span>_<span class="variable">$SUFFIX</span>"</span> || { CDROM=<span class="string">"<span class="variable">${CDROM%_*}</span>_99"</span>; <span class="built_in">break</span>; }
                        <span class="built_in">let</span> SUFFIX++
                    <span class="keyword">done</span>
                <span class="keyword">fi</span>
                MPOINT=<span class="variable">$CDROM</span>
            <span class="keyword">else</span>
                <span class="keyword">if</span> [ <span class="variable">$USE_VLABEL</span> <span class="operator">-eq</span> <span class="number">1</span> ] ; <span class="keyword">then</span>
                    <span class="keyword">if</span> [ <span class="variable">$VLABEL</span> = <span class="string">"unknown"</span> ] ; <span class="keyword">then</span>
                        PARTUUID=`<span class="variable">$BLKID</span> <span class="operator">-s</span> PARTUUID /dev/<span class="variable">$DEV</span> | awk -F <span class="string">'='</span> <span class="string">'{print $NF}'</span> | tr <span class="operator">-d</span> <span class="string">'"| '</span>`
                        [ -z <span class="string">"<span class="variable">$PARTUUID</span>"</span> ] &amp;&amp; PARTUUID=`cat /proc/sys/kernel/random/uuid | cut <span class="operator">-f</span>1 <span class="operator">-d</span><span class="string">'-'</span>`
                        VLABEL=<span class="string">"volume_<span class="variable">${PARTUUID}</span>"</span>
                    <span class="keyword">elif</span> `grep -qis <span class="string">"<span class="variable">$MOUNTS_PATH</span>/<span class="variable">$VLABEL</span> "</span> /proc/mounts` ; <span class="keyword">then</span>
                        SUFFIX=<span class="number">1</span>
                        <span class="keyword">while</span> `grep -qis <span class="string">"<span class="variable">$MOUNTS_PATH</span>/<span class="variable">$VLABEL</span> "</span> /proc/mounts` ; <span class="keyword">do</span>
                            <span class="keyword">if</span> [ <span class="variable">$SUFFIX</span> <span class="operator">-lt</span> <span class="number">10</span> ] ; <span class="keyword">then</span>
                                VLABEL=<span class="string">"<span class="variable">$(echo "$VLABEL" | sed 's/_[0-9]\+$//')</span>_<span class="variable">$SUFFIX</span>"</span>
                                <span class="built_in">let</span> SUFFIX++
                            <span class="keyword">else</span>
                                VLABEL=<span class="string">"<span class="variable">$(echo "$VLABEL" | sed 's/_[0-9]\+$//')</span>_99"</span>
                                <span class="built_in">break</span>
                            <span class="keyword">fi</span>
                        <span class="keyword">done</span>
                    <span class="keyword">fi</span>
                    [ <span class="variable">$FSTYPE_IN_VLABEL</span> <span class="operator">-eq</span> <span class="number">1</span> ] &amp;&amp; MPOINT=<span class="string">"[<span class="variable">${FSTYPE}</span>]-<span class="variable">${VLABEL}</span>"</span> || MPOINT=<span class="variable">$VLABEL</span>
                <span class="keyword">else</span>
                    MPOINT=<span class="variable">$DEV</span>
                <span class="keyword">fi</span>
                MOPT=<span class="string">"/dev/<span class="variable">$DEV</span> <span class="variable">$MOUNTS_PATH</span>/<span class="variable">$MPOINT</span>"</span>
            <span class="keyword">fi</span>
            <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$MCMD</span>"</span> ] ; <span class="keyword">then</span>
                <span class="keyword">if</span> ! `grep -qs <span class="string">'/dev/$DEV'</span> /proc/mounts` ; <span class="keyword">then</span>
                    [ <span class="variable">$FSTYPE</span> = <span class="string">"swap"</span> ] || { [ <span class="operator">-d</span> <span class="variable">$MOUNTS_PATH</span>/<span class="variable">$MPOINT</span> ] || mkdir -p <span class="variable">$MOUNTS_PATH</span>/<span class="variable">$MPOINT</span>; }
                    logger -t Auto-Mount <span class="string">"[Debug] MountCMD='<span class="variable">$MCMD</span> <span class="variable">$MOPT</span>'"</span>
                    <span class="comment"># echo "[Debug] MountCMD='$MCMD $MOPT'" &gt;&gt; /tmp/auto-mount-debug</span>
                    <span class="variable">$MCMD</span> <span class="variable">$MOPT</span>
                    RETVAL=$?
                    <span class="keyword">if</span> [ <span class="variable">$FSTYPE</span> = <span class="string">"swap"</span> ] ; <span class="keyword">then</span>
                        <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> <span class="operator">-eq</span> <span class="number">0</span> ] ; <span class="keyword">then</span>
                            logger -t Auto-Mount <span class="string">"[Notice] Swap device /dev/<span class="variable">$DEV</span> turned on"</span> 
                        <span class="keyword">fi</span>
                    <span class="keyword">else</span>
                        <span class="keyword">if</span> [ <span class="variable">$RETVAL</span> <span class="operator">-eq</span> <span class="number">0</span> ] ; <span class="keyword">then</span>
                            logger -t Auto-Mount <span class="string">"[Notice] Block device /dev/<span class="variable">$DEV</span> mounted on <span class="variable">$MOUNTS_PATH</span>/<span class="variable">$MPOINT</span>"</span> 
                        <span class="keyword">else</span>
                            logger -t Auto-Mount <span class="string">"[Warning] Re-try mount the block device /dev/<span class="variable">$DEV</span> after 2 seconds..."</span>
                            sleep <span class="number">2</span>
                            <span class="variable">$MCMD</span> <span class="variable">$MOPT</span>
                            <span class="keyword">if</span> [ $? <span class="operator">-eq</span> <span class="number">0</span> ] ; <span class="keyword">then</span>
                                logger -t Auto-Mount <span class="string">"[Notice] Block device /dev/<span class="variable">$DEV</span> mounted on <span class="variable">$MOUNTS_PATH</span>/<span class="variable">$MPOINT</span>"</span> 
                            <span class="keyword">else</span>
                                rm -rf <span class="variable">$MOUNTS_PATH</span>/<span class="variable">$MPOINT</span> <span class="number">2</span>&gt;/dev/null
                                logger -t Auto-Mount <span class="string">"[Error] Mount block device /dev/<span class="variable">$DEV</span> encounters an error"</span>
                                <span class="built_in">exit</span> <span class="number">1</span>
                            <span class="keyword">fi</span>
                        <span class="keyword">fi</span>
                    <span class="keyword">fi</span>
                <span class="keyword">fi</span>
            <span class="keyword">else</span>
                <span class="keyword">if</span> [ <span class="variable">$FSTYPE</span> = <span class="string">"swap"</span> ] ; <span class="keyword">then</span>
                    logger -t Auto-Mount <span class="string">"[Notice] Swap device /dev/<span class="variable">$DEV</span> was ignored"</span>
                <span class="keyword">else</span>
                    logger -t Auto-Mount <span class="string">"[Error] Unsupported filesystem '<span class="variable">$FSTYPE</span>' on /dev/<span class="variable">$DEV</span>"</span>
                <span class="keyword">fi</span>
            <span class="keyword">fi</span>
            <span class="built_in">unset</span> MCMD
        <span class="keyword">fi</span>
        purge_mnts
        ;;
    remove)
        [ -z <span class="string">"<span class="variable">$DEV</span>"</span> ] &amp;&amp; { logger -t Auto-Mount <span class="string">"[Error] Missing required arguments: \$devicename"</span>; <span class="built_in">exit</span> <span class="number">1</span>; }
        <span class="keyword">if</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$DEV</span>"</span> | grep -qs <span class="string">'^sd[a-z][1-9]$'</span>` ; <span class="keyword">then</span>
            <span class="keyword">if</span> `grep -qs <span class="string">'/dev/$DEV'</span> /proc/mounts` ; <span class="keyword">then</span>
                MPATH=`awk -F <span class="string">' '</span> <span class="string">'/\/dev\/'</span><span class="string">"<span class="variable">$DEV</span>"</span><span class="string">'/ {print $2}'</span> /proc/mounts <span class="number">2</span>&gt;/dev/null`
                umount /dev/<span class="variable">$DEV</span>
                [ $? <span class="operator">-eq</span> <span class="number">0</span> ] &amp;&amp;    logger -t Auto-Mount <span class="string">"[Notice] Block device <span class="variable">$DEV</span> unmounted"</span>
                [ <span class="operator">-d</span> <span class="string">"<span class="variable">$MPATH</span>"</span> ] &amp;&amp; rm -rf <span class="variable">$MPATH</span> <span class="number">2</span>&gt;/dev/null
            <span class="keyword">fi</span>
            <span class="keyword">if</span> `grep -qs <span class="string">'/dev/$DEV'</span> /proc/swaps` ; <span class="keyword">then</span>
                swapoff <span class="variable">$DEV</span>
                [ $? <span class="operator">-eq</span> <span class="number">0</span> ] &amp;&amp;    logger -t Auto-Mount <span class="string">"[Notice] Swap device <span class="variable">$DEV</span> turned off"</span>                 
            <span class="keyword">fi</span>            
        <span class="keyword">fi</span>
        purge_mnts
        ;;
    umountall)
        CLI=<span class="string">"yes"</span>
        umountall
        ;;
    purge)
        CLI=<span class="string">"yes"</span>
        purge_mnts
        ;;
    *)
        <span class="built_in">echo</span> <span class="string">"[Error] ** Invalid action arguments: <span class="variable">$ACTION</span>"</span> | tee /proc/self/fd/<span class="number">2</span> | logger -t Auto-Mount
        ;;
<span class="keyword">esac</span>

<span class="comment">## Execute the add-ons script</span>
<span class="comment"># ADDSH_PATH="$(cd "$(dirname "$0")"; cd ..; pwd)/user"</span>
<span class="keyword">if</span> [ -n <span class="string">"`ls -A <span class="variable">$ADDSH_PATH</span> 2&gt;&amp;-`"</span> ]; <span class="keyword">then</span>
    i=<span class="number">0</span>
    <span class="keyword">for</span> addsh <span class="keyword">in</span> <span class="variable">${ADDSH_PATH}</span>/[<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]-* ; <span class="keyword">do</span>
        [ <span class="variable">$i</span> <span class="operator">-eq</span> <span class="number">0</span> ] &amp;&amp; logger -t Auto-Mount <span class="string">"[Notice] -- Execute additional scripts ..."</span>
        logger -t Hotplug-Debug <span class="string">"-- Exec script - <span class="variable">$addsh</span>"</span>
        sh <span class="variable">$addsh</span> <span class="variable">$ACTION</span> <span class="variable">$DEV</span> 
        <span class="built_in">let</span> i++
    <span class="keyword">done</span>
<span class="keyword">fi</span>
<span class="comment"># Script EOF</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：这篇文章是Openwrt编译的学习笔记包括（1）Openwrt基础入门（2）Openwrt基础进阶（3）集成软件<br>]]>
    
    </summary>
    
      <category term="Openwrt" scheme="http://masukio.tk/tags/Openwrt/"/>
    
      <category term="编译" scheme="http://masukio.tk/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Openwrt开发笔记" scheme="http://masukio.tk/categories/Openwrt%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用PHP SSH2扩展实现远程控制Openwrt]]></title>
    <link href="http://masukio.tk/2014/08/12/php-ssh2-openwrt/"/>
    <id>http://masukio.tk/2014/08/12/php-ssh2-openwrt/</id>
    <published>2014-08-11T16:00:00.000Z</published>
    <updated>2015-05-20T08:51:58.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：这篇文章通过PHP SSH2扩展实现远程控制Openwrt，包括（1）安装PHP SSH2扩展（2)实现远程copy文件(3) 执行远程服务器上的命令并取返回值<br><a id="more"></a><br>最近在研究怎样才可以远程操控路由器，通过微信实现路由器WIFI的开关，远程重启路由器，查看Aria2下载文件的情况，甚至可以远程安装应用和更新固件，在电脑上可以通过SSH软件方便的连接到Openwrt，并对它进行操作，所以我在想PHP是否也有相应的扩展，这样就可以将它架设在服务器或者虚拟主机上，在任何地方都可以方便的控制路由器，甚至可以实现智能家居的控制，想想就很美好呢。<br>php远程copy文件以及在远程服务器中执行命令时，所用到的模块是ssh2，以后所有的操作都依据ssh2连接句柄完成。</p>
<h1 id="安装PHP_SSH2扩展">安装PHP SSH2扩展</h1><h2 id="在Windows环境下安装">在Windows环境下安装</h2><pre><code><span class="number">1</span>. 下载 php extension ssh2
下载地址 http:<span class="comment">//windows.php.net/downloads/pecl/releases/ssh2/0.12/</span>
根据自己PHP的版本去下载，我使用的WAMPSERVER2.<span class="number">5</span>（<span class="number">64</span>bit),PHP版本为<span class="number">5.5</span>.<span class="number">12</span>，是线程安全的，
所以下载的是php_ssh2-<span class="number">0.12</span>-<span class="number">5.5</span>-ts-vc11-x64<span class="class">.zip</span>
<span class="number">2</span>. 解压完后，会有三个文件，libssh2.dll、php_ssh.dll、php_ssh2.pdb。
<span class="number">3</span>. 将 php_ssh.dll、php_ssh2<span class="class">.pdb</span> 放到你的 php 扩展目录下 php/ext/ 下。
<span class="number">4</span>. 将libssh2<span class="class">.dll</span> 复制到 c:/windows/system32 和 c:/windows/syswow64 各一份
<span class="number">5</span>. php.ini中加入 extension=php_ssh2<span class="class">.dll</span>
<span class="number">6</span>. 重启apache，即可使用php执行ssh连接操作了。
查看<span class="function"><span class="title">phpinfo</span><span class="params">()</span></span>，是否有显示php_ssh2扩展加载成功。
</code></pre><h2 id="在linux环境下安装">在linux环境下安装</h2><h3 id="PHP_SSH2扩展需要的依赖库">PHP SSH2扩展需要的依赖库</h3><pre><code>openssl： 加密算法集合，<span class="keyword">C</span>语言实现
libssh2： ssh2协议库库，<span class="keyword">C</span>语言实现
PECL/ssh2: libssh2的php扩展，允许php程序调用libssh2中的函数
依赖关系：PECL/ssh2 –&gt; libssh2 –&gt; openssl
</code></pre><h3 id="安装需要的扩展包">安装需要的扩展包</h3><pre><code>安装libssh2
wget  http:<span class="comment">//www.libssh2.org/download/libssh2-1.4.2.tar.gz  </span>
tar zxf libssh2-<span class="number">1.4</span>.2.tar.gz  
cd libssh2-<span class="number">1.4</span>.2  
./configure &amp;&amp; <span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install  

安装PECL/ssh2
wget  http:<span class="comment">//pecl.php.net/get/ssh2-0.11.3.tgz  </span>
cd ssh2-<span class="number">0.11</span>.3  
phpize   (如果报错命令没有找到，apt-get install php5-dev)  
./configure —with-ssh2 &amp;&amp; <span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install  
</code></pre><h3 id="修改php配置信息">修改php配置信息</h3><pre><code>cd  /etc/php5/cgi  
vim  php<span class="class">.ini</span>  
添加项：extension=/usr/lib/php5/<span class="number">20090626</span>/ssh2<span class="class">.so</span>  
     ssh2.so是编译ssh2时得到的模块，上面是模块的位置。  


cd  /etc/php5/cli  
vim  php<span class="class">.ini</span>  
添加项：extension=/usr/lib/php5/<span class="number">20090626</span>/ssh2<span class="class">.so</span>  
     ssh2.so是编译ssh2时得到的模块，上面是模块的位置。  
</code></pre><h3 id="重启web服务器">重启web服务器</h3><pre><code><span class="regexp">/etc/i</span>nit.d<span class="regexp">/lighttpd restart  </span>
</code></pre><h3 id="查看是否加载了ssh2">查看是否加载了ssh2</h3><pre><code>[root<span class="variable">@localhost</span> ~]php -<span class="keyword">m</span> | <span class="keyword">grep</span> <span class="keyword">s</span>        
</code></pre><h1 id="SSH2模块的连接应用">SSH2模块的连接应用</h1><p>通过PECL/ssh2相关API远程操作计算机时，首先需要获取链接，使用函数:</p>
<pre><code>session <span class="function"><span class="title">ssh2_connect</span><span class="params">(<span class="variable">$host</span>, <span class="variable">$port</span>)</span></span>
</code></pre><p>SSH2连接有两种方式，分别是用户名密码，ssh密钥形式。<br>    public key : 通过公钥和密钥进行验证，需要使用openssl生成工密钥，然后将公钥上传到需要远程访问机器的指定目录。特点比较安全，但是不太方便。PECL/ssh2支持。<br>    password : 直接通过用户名和密码登录。特点是很方便，但是不安全，密码必须已明文的方式传给ssh2的api。PECL/ssh2支持。<br>    keyboard-interactive：需要用户手动输入密码，PECL/ssh2不支持。</p>
<h2 id="用户名与密码">用户名与密码</h2><p>通过用户名与密码连接函数<br>    bool ssh2_auth_password ( resource $session , string $username , string $password )<br>通过此方式连接Openwrt，在局域网内，路由器IP地址：192.168.1.1，默认用户名：root，密码：admin。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line">	<span class="variable">$ipadd</span> = <span class="string">"192.168.1.1"</span>;</span><br><span class="line">	<span class="variable">$user</span> = <span class="string">"root"</span>;</span><br><span class="line">	<span class="variable">$pass</span> = <span class="string">"admin"</span>;</span><br><span class="line">	<span class="variable">$connection</span> = ssh2_connect(<span class="variable">$ipadd</span>,<span class="number">22</span>);  </span><br><span class="line">	<span class="keyword">if</span> (ssh2_auth_password(<span class="variable">$connection</span>,<span class="variable">$user</span>,<span class="variable">$pass</span>))  </span><br><span class="line">	&#123;  </span><br><span class="line">	         <span class="keyword">echo</span> <span class="string">"Authentication Successful! "</span>;  </span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">	         <span class="keyword">die</span>(<span class="string">"Authentication Failed..."</span>);  </span><br><span class="line">	&#125;  	    </span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>连接结果<br>    <code>Authentication Successful!</code></p>
<h2 id="SSH密钥">SSH密钥</h2><p>通过SSH密钥连接函数</p>
<pre><code>bool ssh2_auth_pubkey_file ( resource <span class="variable">$session</span> , <span class="built_in">string</span> <span class="variable">$username</span> , <span class="built_in">string</span> <span class="variable">$pubkeyfile</span> , <span class="built_in">string</span> <span class="variable">$privkeyfile</span> <span class="preprocessor">[</span>, <span class="built_in">string</span> <span class="variable">$passphrase</span> <span class="preprocessor">]</span><span class="markup"> )    </span>
</code></pre><p>SSH使用密钥登录，不仅安全，而且更方便。sshd在~/.ssh/authorized_keys中加入公钥即可。<br>而OpenWrt使用dropbear作为服务端， ~/.ssh/authorized_keys 并不生效。其实，dropbear的公钥存储文件是600权限的<code>/etc/dropbear/authorized_keys</code> 文件，只需将公钥加入此文件即可。至于其它，与sshd类似。<br>ssh key可以由secureCRT-&gt;Tools-&gt;Create Public Key生成，加密算法选择RSA，通行短语对应ssh2_auth_pubkey_file()中的\$passphrase,可以不填写，\$pubkeyfile , \$privkeyfile为公钥和私钥的存放位置，将$pubkeyfile中的内容复制到Openwrt路径<code>/etc/dropbear/authorized_keys</code>中，并确保权限为0644。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line">	<span class="variable">$connection</span> = ssh2_connect(<span class="string">'192.168.1.1'</span>, <span class="number">22</span>, <span class="keyword">array</span>(<span class="string">'hostkey'</span>=&gt;<span class="string">'ssh-rsa'</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ssh2_auth_pubkey_file(<span class="variable">$connection</span>, <span class="string">'root'</span>,</span><br><span class="line">	                          <span class="string">'C:/Users/jz/Documents/Identity.pub'</span>,</span><br><span class="line">	                          <span class="string">'C:/Users/jz/Documents/Identity'</span>,<span class="string">'798789263'</span>)) &#123;</span><br><span class="line">	  <span class="keyword">echo</span> <span class="string">"Public Key Authentication Successful"</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	  <span class="keyword">die</span>(<span class="string">'Public Key Authentication Failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>返回结果：</p>
<pre><code>Public Key Authentication Successful
<span class="comment">//Openwrt系统日志</span>
Aug <span class="number">12</span> <span class="number">13</span>:<span class="number">40</span>:<span class="number">53</span> PandoraBox authpriv.info dropbear[<span class="number">3197</span>]: Child connection from <span class="number">192.168</span>.1.112:<span class="number">8005</span>
Aug <span class="number">12</span> <span class="number">13</span>:<span class="number">40</span>:<span class="number">55</span> PandoraBox authpriv.notice dropbear[<span class="number">3197</span>]: Pubkey auth succeeded <span class="keyword">for</span> <span class="string">'root'</span> with key md5 <span class="number">3</span><span class="string">d:</span><span class="number">77</span>:<span class="number">45</span>:<span class="string">b7:</span><span class="string">d7:</span><span class="number">7</span><span class="string">a:</span><span class="number">79</span>:<span class="number">87</span>:<span class="number">28</span>:<span class="number">5</span><span class="string">a:</span><span class="number">5</span><span class="string">d:</span><span class="number">3</span><span class="string">a:</span><span class="number">76</span>:<span class="string">d5:</span><span class="number">1</span><span class="string">f:</span><span class="number">57</span> from <span class="number">192.168</span>.1.112:<span class="number">8005</span>
Aug <span class="number">12</span> <span class="number">13</span>:<span class="number">40</span>:<span class="number">55</span> PandoraBox authpriv.info dropbear[<span class="number">3197</span>]: Exit (root): Disconnect received
</code></pre><h2 id="获取服务器提供的验证方式">获取服务器提供的验证方式</h2><pre><code>mixed ssh2_auth_none ( resource <span class="variable">$session</span> , <span class="built_in">string</span> <span class="variable">$username</span> )
</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="string">'192.168.1.1'</span>;</span><br><span class="line"><span class="variable">$user</span>=<span class="string">'root'</span>;</span><br><span class="line"><span class="variable">$port</span> = <span class="string">'22'</span></span><br><span class="line"><span class="comment">// 链接远程服务器</span></span><br><span class="line"><span class="variable">$connection</span> = ssh2_connect(<span class="variable">$host</span>,<span class="variable">$port</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$connection</span>) <span class="keyword">die</span>(<span class="string">'connection to '</span>.<span class="variable">$host</span>.<span class="string">':'</span>.<span class="variable">$port</span>.<span class="string">'failed'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'connection OK&lt;br/&gt;'</span>;</span><br><span class="line"><span class="comment">// 获取验证方式并打印</span></span><br><span class="line"><span class="variable">$auth_methods</span> = ssh2_auth_none(<span class="variable">$connection</span>, <span class="variable">$user</span>);</span><br><span class="line">print_r(<span class="variable">$auth_methods</span>);</span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>返回结果</p>
<pre><code>connection OK
<span class="keyword">Array</span> ( [<span class="number">0</span>] =&gt; publickey [<span class="number">1</span>] =&gt; password )    <span class="comment">//服务器支持用户名密码，ssh密钥形式</span>
</code></pre><h1 id="SSH2模块具体功能">SSH2模块具体功能</h1><h2 id="实现远程复制文件">实现远程复制文件</h2><h3 id="远程服务器文件copy到本地:">远程服务器文件copy到本地:</h3><pre><code>bool ssh2_scp_recv ( resource <span class="variable">$session</span>, <span class="built_in">string</span> <span class="variable">$remote_file</span>, <span class="built_in">string</span> <span class="variable">$local_file</span> )
</code></pre><p>Ps: 接收文件时，后面文件名可以为空，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$connection</span> = ssh2_connect(<span class="string">'192.168.1.1'</span>, <span class="number">22</span>);</span><br><span class="line">ssh2_auth_password(<span class="variable">$connection</span>, <span class="string">'root'</span>, <span class="string">'admin'</span>);</span><br><span class="line">ssh2_scp_recv(<span class="variable">$connection</span>, <span class="string">'/remote/filename'</span>, <span class="string">'/local/filename'</span>);</span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="本地文件复制到远程服务器">本地文件复制到远程服务器</h3><pre><code>bool ssh2_scp_send ( resource <span class="variable">$session</span>, <span class="keyword">string</span> <span class="variable">$local_file</span>, <span class="keyword">string</span> <span class="variable">$remote_file</span> [, <span class="keyword">int</span> <span class="variable">$create_mode</span>] )
</code></pre><p>Ps:发送文件时，后面的文件名不能为空，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$connection</span> = ssh2_connect(<span class="string">'192.168.1.1'</span>, <span class="number">22</span>);</span><br><span class="line">ssh2_auth_password(<span class="variable">$connection</span>, <span class="string">'root'</span>, <span class="string">'admin'</span>);</span><br><span class="line">ssh2_scp_send(<span class="variable">$connection</span>, <span class="string">'/local/filename'</span>, <span class="string">'/remote/filename'</span>, <span class="number">0644</span>);</span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="执行远程服务器上的命令并取返回值">执行远程服务器上的命令并取返回值</h2><pre><code>resource<span class="function"> ssh2_exec(</span> resource $session, string $command <span class="keyword">[</span>, string $pty <span class="keyword">[</span>,<span class="instruction"> array </span>$env <span class="keyword">[</span>,<span class="instruction"> int </span>$width <span class="keyword">[</span>,<span class="instruction"> int </span>$height <span class="keyword">[</span>,<span class="instruction"> int </span>$width_height_type]]]]] <span class="function">)</span>
</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line">	<span class="variable">$connection</span> = ssh2_connect(<span class="string">'192.168.1.1'</span>, <span class="number">22</span>, <span class="keyword">array</span>(<span class="string">'hostkey'</span>=&gt;<span class="string">'ssh-rsa'</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ssh2_auth_pubkey_file(<span class="variable">$connection</span>, <span class="string">'root'</span>,</span><br><span class="line">	                          <span class="string">'C:/Users/jz/Documents/Identity.pub'</span>,</span><br><span class="line">	                          <span class="string">'C:/Users/jz/Documents/Identity'</span>,<span class="string">'798789263'</span>)) &#123;</span><br><span class="line">	  <span class="keyword">echo</span> <span class="string">"Public Key Authentication Successful\n"</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	  <span class="keyword">die</span>(<span class="string">'Public Key Authentication Failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line">	<span class="variable">$stream</span> = ssh2_exec(<span class="variable">$connection</span>, <span class="string">'ls /tmp'</span>);</span><br><span class="line">	stream_set_blocking(<span class="variable">$stream</span>,<span class="keyword">true</span>);  </span><br><span class="line">	<span class="keyword">echo</span> stream_get_contents(<span class="variable">$stream</span>); </span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>返回结果</p>
<pre><code>Public Key Authentication Successful
RT2860<span class="class">.dat</span> TZ dhcp<span class="class">.leases</span> etc fstab hosts lib lock log luci-indexcache luci-sessions nmbd nwan_log nwandebug overlay resolv<span class="class">.conf</span> resolv<span class="class">.conf</span><span class="class">.auto</span> run state wifi_encryption_ra0.dat
</code></pre><h2 id="Openwrt基本命令">Openwrt基本命令</h2><pre><code>/etc/init.d/aria2 <span class="built_in">start</span> <span class="comment">#开启Aria2下载任务</span>
/etc/init.d/aria2 <span class="built_in">stop</span> <span class="comment">#关闭Aria2下载任务</span>
wifi down <span class="number">2</span>&gt;/dev/<span class="constant">null</span> <span class="comment">#关闭wifi </span>
wifi up <span class="number">2</span>&gt;/dev/<span class="constant">null</span> <span class="comment">#打开wifi </span>
/etc/init.d/samba <span class="built_in">stop</span> <span class="comment">#关闭SAMBA</span>
/etc/init.d/samba <span class="built_in">start</span> <span class="comment">#开启SAMBA    </span>
/ect/init.d/ccnu <span class="built_in">start</span> <span class="comment">#连接校园网</span>
reboot -f <span class="comment">#重启路由器</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>摘要</strong>：这篇文章通过PHP SSH2扩展实现远程控制Openwrt，包括（1）安装PHP SSH2扩展（2)实现远程copy文件(3) 执行远程服务器上的命令并取返回值<br>]]>
    
    </summary>
    
      <category term="Openwrt" scheme="http://masukio.tk/tags/Openwrt/"/>
    
      <category term="PHP" scheme="http://masukio.tk/tags/PHP/"/>
    
      <category term="SSH" scheme="http://masukio.tk/tags/SSH/"/>
    
      <category term="远程" scheme="http://masukio.tk/tags/%E8%BF%9C%E7%A8%8B/"/>
    
      <category term="Openwrt开发笔记" scheme="http://masukio.tk/categories/Openwrt%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在网页中插入特殊字体,浅谈@font-face]]></title>
    <link href="http://masukio.tk/2014/07/26/@font-face/"/>
    <id>http://masukio.tk/2014/07/26/@font-face/</id>
    <published>2014-07-25T16:00:00.000Z</published>
    <updated>2015-05-20T08:51:58.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：本篇文章包括（1）介绍@font-face（2）如何在网页中使用@font-face插入特殊字体（3）中文在线@font-face——有字库（4）修改hexo主题字体<br><a id="more"></a><br>自从在hexo上安装了pacmen主题之后，就一直对pacman主题<code>header</code>上的<code>textlogo</code>和<code>footer</code>上<code>intro_line</code>的字体很感兴趣，因为我的电脑和手机上并没有安装该字体，但是无论是在任何终端上，浏览的体验都是一致的，然后查找了一些资料，发现这是<code>CSS3</code>中的一个功能模块<code>@font-face</code>，主要用于实现网页字体多样性。</p>
<h1 id="@font-face功能">@font-face功能</h1><p>制作网站难免有些字体不是默认的，通过@font-face可以加载自己特定的字体，来实现特定的文字效果。<br>@font-face语句是css中的一个功能模块，用于实现网页字体多样性(设计者可随意指定字体，不需要考虑浏览者电脑上是否安装)。主要是把自己定义的Web字体嵌入到你的网页中，随着@font-face模块的出现，我们在Web的开发中使用字体不怕只能使用Web安全字体，<br>@font-face 不能说他是什么新东西了，在 CSS2.0 规范中就有了这玩意儿，IE4.0 开始就已经出现，只是当时用的不是特别广泛，后来在 CSS2.1 草案中又被删掉。随着 web 的急速发展，@font-face 价值越来越凸显，然后再次被纳入 CSS3 草案中。@font-face 是个什么东西，本文不做过多说明，不太清楚的童鞋可以看这里</p>
<blockquote>
<p><a href="http://www.w3schools.com/css/css3_fonts.asp" target="_blank" rel="external">http://www.w3schools.com/css/css3_fonts.asp</a></p>
</blockquote>
<h1 id="@font-face文件">@font-face文件</h1><p>而由于网页中使用的字体类型，也是各浏览器对字体类型有不同的支持规格。 字体格式类型主要有几个大分类：TrueType、Embedded Open Type 、OpenType、WOFF 、SVG。</p>
<p>TrueType</p>
<blockquote>
<p>Windows和Mac系统最常用的字体格式，其最大的特点就是它是由一种数学模式来进行定义的基于轮廓技术的字体，这使得它们比基于矢量的字体更容易处理，保证了屏幕与打印输出的一致性。同时，这类字体和矢量字体一样可以随意缩放、旋转而不必担心会出现锯齿。</p>
</blockquote>
<p>EOT– Embedded Open Type (.eot)</p>
<blockquote>
<p>EOT是嵌入式字体，是微软开发的技术。允许OpenType字体用@font-face嵌入到网页并下载至浏览器渲染，存储在临时安装文件夹下。</p>
</blockquote>
<p>OpenType(.otf)</p>
<blockquote>
<p>OpenType是微软和Adobe共同开发的字体，微软的IE浏览器全部采用这种字体。致力于替代TrueType字体。</p>
</blockquote>
<p>WOFF–WebOpen Font Format (.woff)</p>
<blockquote>
<p>WOFF（Web开发字体格式）是一种专门为了Web而设计的字体格式标准，实际上是对于TrueType/OpenType等字体格式的封装，每个字体文件中含有字体以及针对字体的元数据（Metadata），字体文件被压缩，以便于网络传输。</p>
</blockquote>
<p>SVG(Scalable Vector Graphics) Fonts (.svg)</p>
<blockquote>
<p>SVG是由W3C制定的开放标准的图形格式。SVG字体就是使用SVG技术来呈现字体，还有一种gzip压缩格式的SVG字体。</p>
</blockquote>
<table><tr><th>format 格式</th><th>Font 格式</th><th>后缀名</th></tr><tr><td>truetype</td><td>TrueType</td><td>.ttf</td></tr><tr><td>opentype</td><td>OpenType</td><td>.ttf, .oft</td></tr><tr><td>truetype-aat</td><td>TrueType with Apple Advanced Typography extensions</td><td>.ttf</td></tr><tr><td>embedded-opentype</td><td>Embedded OpenType</td><td>.eot</td></tr><tr><td>svg</td><td>SVG Font</td><td>.svg, .svgz</td></tr><br></table>

<h1 id="@font-face声明字体">@font-face声明字体</h1><p>由于每种浏览器对@font-face的兼容性不同，不同的浏览器对字体的支持格式不同，这就意味着在@font-face中我们至少需要.woff,.eot两种格式字体，甚至还需要.svg等字体达到更多种浏览版本的支持。</p>
<table><tr><th>浏览器</th><th>支持类型</th></tr><tr><td>IE6,7,8</td><td>仅支持 Embedded OpenType(.eot) 格式。</td></tr><tr><td>Firefox 3.5</td><td>支持 TrueType、OpenType(.ttf, .otf) 格式。</td></tr><tr><td>Firefox 3.6</td><td>支持 TrueType、OpenType(.ttf, .otf) 及 WOFF 格式。</td></tr><tr><td>Chrome,Safari,Opera</td><td>支持 TrueType、OpenType(.ttf, .otf) 及 SVG Font(.svg) 格式。</td></tr></table>

<p>为了使@font-face达到更多的浏览器支持，Paul Irish写了一个独特的@font-face语法叫Bulletproof @font-face:</p>
<pre><code><span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">{
<span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'YourWebFontName'</span></span></span>;
<span class="rule"><span class="attribute">src</span>:<span class="value"> <span class="function">url</span>(<span class="string">'YourWebFontName.eot?'</span>) <span class="function">format</span>(<span class="string">'eot'</span>)</span></span>;<span class="comment">/*IE*/</span>
<span class="rule"><span class="attribute">src</span>:<span class="value"><span class="function">url</span>(<span class="string">'YourWebFontName.woff'</span>) <span class="function">format</span>(<span class="string">'woff'</span>), <span class="function">url</span>(<span class="string">'YourWebFontName.ttf'</span>) <span class="function">format</span>(<span class="string">'truetype'</span>)</span></span>;<span class="comment">/*non-IE*/</span>
}</span>
</code></pre><p>但为了让各多的浏览器支持，你也可以写成：</p>
<pre><code><span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">{
<span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'YourWebFontName'</span></span></span>;
<span class="rule"><span class="attribute">src</span>:<span class="value"> <span class="function">url</span>(<span class="string">'YourWebFontName.eot'</span>)</span></span>; <span class="comment">/* IE9 Compat Modes */</span>
<span class="rule"><span class="attribute">src</span>:<span class="value"> <span class="function">url</span>(<span class="string">'YourWebFontName.eot?#iefix'</span>) <span class="function">format</span>(<span class="string">'embedded-opentype'</span>), <span class="comment">/* IE6-IE8 */</span>
         <span class="function">url</span>(<span class="string">'YourWebFontName.woff'</span>) <span class="function">format</span>(<span class="string">'woff'</span>), <span class="comment">/* Modern Browsers */</span>
         <span class="function">url</span>(<span class="string">'YourWebFontName.ttf'</span>)  <span class="function">format</span>(<span class="string">'truetype'</span>), <span class="comment">/* Safari, Android, iOS */</span>
         <span class="function">url</span>(<span class="string">'YourWebFontName.svg#YourWebFontName'</span>) <span class="function">format</span>(<span class="string">'svg'</span>)</span></span>; <span class="comment">/* Legacy iOS */</span>
}</span>
</code></pre><h1 id="使用@font-face实现网页中插入特殊字体的过程">使用@font-face实现网页中插入特殊字体的过程</h1><h2 id="获取特殊字体">获取特殊字体</h2><p>这里我们要用到的是Single Malta字体<br><img src="http://picture-lotors.qiniudn.com/lotors%E6%8D%95%E8%8E%B7.JPG" alt="Single Malta"><br>要得到Single Malta字体，不外乎两种途径，其一找到付费网站购买字体，其二就是到免费网站DownLoad字体。当然要给钱的这种傻事我想大家都不会做的，那我们就得到免费的地方下载，在哪有呢？我平时都是到Google Web Fonts和Dafont.com寻找自己需要的字体，当然网上也还有别的下载字体的地方，这个Demo使用的是Dafont.com的Single Malta字体，这样就可以到这里下载Single Malta：</p>
<blockquote>
<p><a href="http://www.dafont.com/single-malta.font" target="_blank" rel="external">http://www.dafont.com/single-malta.font</a></p>
</blockquote>
<h2 id="获取@font-face所需字体格式">获取@font-face所需字体格式</h2><p>由于不同浏览器支持的字体文件不同，我们需要想办法获得@font-face所需的.eot,.woff,.ttf,.svg字体格式，这里我们用到了一个网站fontsquirrel，可以方便的帮助我们实现字体格式的转换</p>
<blockquote>
<p><a href="http://www.fontsquirrel.com/tools/webfont-generator" target="_blank" rel="external">http://www.fontsquirrel.com/tools/webfont-generator</a></p>
</blockquote>
<p><img src="http://picture-lotors.qiniudn.com/lotorstransttf.JPG" alt="fontsquirrel"><br>进入网站后点击<code>Add Fonts</code>按钮，上传我们刚刚下载好的字体文件（要先把SingleMalta.ttf从.zip压缩包中解压出来），通常选择中间默认的<code>OPTIMAL</code>选项即可，然后勾选<code>Agreement</code>,点击<code>DOWNLOAD YOU KIT</code>，稍等片刻，即可下载我们所需要的字体文件。<br>解压压缩包包可以看到已经转换好的字体文件，如下图：<br><img src="http://picture-lotors.qiniudn.com/lotorstransferfft.JPG" alt=""><br>大家可以看到，解压缩出来的文件格式，里面除了@font-face所需要的字体格式外，还带有一个DEMO文件，如果你不清楚的也可以参考下载下来的DEMO文件，我在这里不对DEMO说明问题，我主要是给大家介绍如何把下载下来的文件有价值的运用到我们的项目中。</p>
<h2 id="应用@font-face到我们的项目中">应用@font-face到我们的项目中</h2><p>这里我们新建一个DOME项目，目录包括一个fonts文件夹，里面存放的转换好的字体文件；一个css文件夹，用于存放ccs文件；和一个index.html入口文件。目录和html如下<br><img src="http://i1368.photobucket.com/albums/ag185/Mckee_Andy/index_zps500bc614.jpg" alt=""></p>
<p>style.css代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">&#123;</span><br><span class="line">   <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'SingleMaltaRegular'</span></span></span>;</span><br><span class="line">   <span class="rule"><span class="attribute">src</span>:<span class="value"> <span class="function">url</span>(<span class="string">'../fonts/singlemalta-webfont.eot'</span>)</span></span>;</span><br><span class="line">   <span class="rule"><span class="attribute">src</span>:<span class="value"> <span class="function">url</span>(<span class="string">'../fonts/singlemalta-webfont.eot?#iefix'</span>) <span class="function">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line">        <span class="function">url</span>(<span class="string">'../fonts/singlemalta-webfont.woff'</span>) <span class="function">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">    <span class="function">url</span>(<span class="string">'../fonts/singlemalta-webfont.ttf'</span>) <span class="function">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">    <span class="function">url</span>(<span class="string">'../fonts/singlemalta-webfont.svg#SingleMaltaRegular'</span>) <span class="function">format</span>(<span class="string">'svg'</span>)</span></span>;</span><br><span class="line">   <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> normal</span></span>;</span><br><span class="line">   <span class="rule"><span class="attribute">font-style</span>:<span class="value"> normal</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line">   <span class="tag">h1</span><span class="class">.SingleMalta</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'SingleMaltaRegular'</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">body</span><span class="rules">&#123;</span><br><span class="line"> <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="function">rgb</span>(<span class="number">123</span>,<span class="number">234</span>,<span class="number">234</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>上传到服务器，效果如下<br><img src="http://i1368.photobucket.com/albums/ag185/Mckee_Andy/fontresult_zpsb9fc4c31.jpg" alt=""></p>
<h2 id="更改hexo的textlog字体">更改hexo的textlog字体</h2><p>pacman的字体资源是储存在pacman主题文件夹下<code>source/font</code>之中的，关于@font-face声明是储存在<code>source/css/_base/font.styl</code>配置文件之中，查看pacman的配置文件_config.yml找到字体选项Font通过注释可以了解到，页面的字体配置是保存在<code>source/css/_base/variable.styl</code>之中，如下图所示</p>
<p><img src="http://picture-lotors.qiniudn.com/lotorsfont2.JPG" alt=""></p>
<p>首先将解压出来的.eot,.woff,.ttf,.svg字体文件放入<code>font</code>文件夹中，找到<code>source/css/_base/font.styl</code>配置文件，可以看到pacman已经帮我们建立了一个通用的声明，所以我们无需修改声明，只需要在<code>variable.styl</code>中修改页面字体配置即可，将<code>font-custom-family``font-custom-filename</code>改成我们的字体名和文件名即可<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">font-custom-family = <span class="value"><span class="string">"SingleMaltaRegular"</span>（随意）</span></span></span><br><span class="line"><span class="setting">font-custom-filename = <span class="value">singlemalta-webfont</span></span></span><br></pre></td></tr></table></figure></p>
<p>刷新页面即可看到效果，如下图：<br><img src="http://picture-lotors.qiniudn.com/lotorsresult.JPG" alt=""></p>
<h1 id="中文@font-face">中文@font-face</h1><p>上面的这些@font-face转换网站都不支持中文字体的转换，中文字体文件相对于英文显得过于庞大，很长一段时间都被认为是不适合嵌入网页的。</p>
<p>直到几年前，这个问题终于被一个日本网站解决了，他用的技术就是截取法，在前端置入一个js脚本，脚本自动根据网页内容适时生成一个小字库（只包含当前网页内容的小字库）然后自动转换成.ttf、.eot、.woff、.svg等格式嵌入网页中，从页实现@font-face效果。体验和英文@font-face差不多，效果非常漂亮。但日文@font-face网站对于中文网页还无法支持。</p>
<p>如果是你想在你的网页上使用中文简体@font-face服务，也不是不可能，推荐一个中文@font-face网站——“有字库”。</p>
<p>使用时，只需要引用一段js脚本代码或者一段css代码，网站就会自动帮你截取网页需要的小字库并生成.ttf、.eot、.woff、.svg等格式文件，你可以将各文件下载下来，也可以托管在这个网站上，非常方便。去试试吧</p>
<h2 id="有字库测试">有字库测试</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>font test<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>  <span class="attribute">content</span>=<span class="value">"text/html"</span></span><br><span class="line">	&lt;/<span class="attribute">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"SiYuanRegular"</span>&gt;</span>中国文字之美<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"SiYuanRegular"</span>&gt;</span>思源黑体测试<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">h1</span> &gt;</span>中国文字之美<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span> &gt;</span>思源黑体测试<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">body</span>&gt;</span>	//有字库生成的JS脚本插入<span class="tag">&lt;/<span class="title">body</span>&gt;</span>和<span class="tag">&lt;/<span class="title">html</span>&gt;</span>之间</span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://www.youziku.com/UserDownFile/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://www.youziku.com/UserDownFile/jquery.md5.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">youziku46827</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> resultStr = $(<span class="string">".SiYuanRegular"</span>).text();</span><br><span class="line">        <span class="keyword">var</span> md5 = <span class="string">""</span>;</span><br><span class="line">        resultStr = Trim(resultStr);</span><br><span class="line">        resultStr = SelectWord(resultStr);</span><br><span class="line">        md5 = $.md5(<span class="string">"08d5ae7dc2e04646b67b8f08909cc995"</span>+<span class="string">"SiYuanRegular"</span> + resultStr);</span><br><span class="line">        $.getJSON(<span class="string">"http://www.youziku.com/webfont/CSSPOST?jsoncallback=?"</span>, &#123; <span class="string">"id"</span>: md5, <span class="string">"guid"</span>: <span class="string">"08d5ae7dc2e04646b67b8f08909cc995"</span>, <span class="string">"type"</span>: <span class="string">"5"</span> &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(json)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (json.result == <span class="number">0</span>) &#123;<span class="comment">/*alert("需要生成");*/</span></span><br><span class="line">                $.post(<span class="string">"http://www.youziku.com/webfont/PostCorsCreateFont"</span>, &#123; <span class="string">"name"</span>: <span class="string">"SiYuanRegular"</span>, <span class="string">"gid"</span>: <span class="string">"08d5ae7dc2e04646b67b8f08909cc995"</span>, <span class="string">"type"</span>: <span class="string">"5"</span>, <span class="string">"text"</span>: resultStr &#125;, <span class="function"><span class="keyword">function</span> <span class="params">(json)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (json == <span class="string">"0"</span>) &#123; <span class="comment">/*alert("参数不对");*/</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json == <span class="string">"2"</span>) &#123;<span class="comment">/*alert("超过每日生成字体数的上限");*/</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json == <span class="string">"3"</span>) &#123; <span class="comment">/*alert("当前正在生成请稍后");*/</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">/*alert("正在生成");*/</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">/*alert("下载css文件");*/</span></span><br><span class="line">                loadExtentFile(<span class="string">"http://www.youziku.com/webfont/css?id="</span> + md5 + <span class="string">"&amp;guid="</span> + <span class="string">"08d5ae7dc2e04646b67b8f08909cc995"</span> + <span class="string">"&amp;type=5"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">youziku</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.location.href.toString().substring(<span class="number">0</span>, <span class="number">7</span>) == <span class="string">"file://"</span>) &#123;</span><br><span class="line">            alert(<span class="string">"你当前是通过双击打开html文件，进行本地测试的，这样看不到字体效果，一定要通过本地建立的虚拟网站或发布到外网进行测试。详见有字库的使用说明。"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        youziku46827();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>测试效果<br><img src="http://i1368.photobucket.com/albums/ag185/Mckee_Andy/fontcop_zpsea3b8452.jpg" alt="有字库测试"></p>]]></content>
    <summary type="html">
    <![CDATA[本篇文章包括（1）介绍@font-face（2）如何在网页中使用@font-face插入特殊字体（3）中文在线@font-face——有字库（4）修改hexo主题字体]]>
    
    </summary>
    
      <category term="前端" scheme="http://masukio.tk/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="字体" scheme="http://masukio.tk/tags/%E5%AD%97%E4%BD%93/"/>
    
      <category term="前端设计" scheme="http://masukio.tk/categories/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信公众平台图书馆查询开发记录]]></title>
    <link href="http://masukio.tk/2014/07/25/Weixin-Library-BookSearch/"/>
    <id>http://masukio.tk/2014/07/25/Weixin-Library-BookSearch/</id>
    <published>2014-07-24T16:00:00.000Z</published>
    <updated>2015-05-20T08:51:58.000Z</updated>
    <content type="html"><![CDATA[<p><strong>摘要</strong>：这篇文章记录图书馆查询微信公众平台开发全过程，主要内容包括：（1）Fidder2解析图书馆登入系统过程（2）模拟图书馆登入系统过程（3）机器识别验证码（4）Unicode转UTF-8编码过程（5）微信公众账号的绑定（6）Memcache缓存技术(7)正则表达式<br><a id="more"></a><br>这是一篇记录我的第一个微信应用——福建农林大学图书馆服务的开发记录，应用架设在Sina App Engine,开发目标是解决手机登入web查看图书不便的问题，并提供响应的服务功能，比如（1）图书5天内图书到期的提醒（2）图书的查询服务（3）图书借阅的查询服务（4）暂时图书馆没有藏书的到书提醒（5）免验证码登陆，算是对自己多天折腾的总结并提供有相关需求的朋友一些思路。</p>
<h1 id="Fidder2解析图书馆登入系统过程">Fidder2解析图书馆登入系统过程</h1><h2 id="Fidder2介绍">Fidder2介绍</h2><blockquote>
<p>Fiddler是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有的“进出”Fiddler的数据（指cookie,html,js,css等文件，这些都可以让你胡乱修改的意思）。 Fiddler 要比其他的网络调试器要更加简单，因为它不仅仅暴露http通讯还提供了一个用户友好的格式。</p>
</blockquote>
<p>利用Fidder可以方便的从数据连接中扒取链接的信息，即使是表单是通过_POST，我们也能够很方便的从数据流中截取用户发送的信息，从而将机器伪装成人肉对服务器进行请求，实现模拟登入。</p>
<h2 id="通过Fidder查看图书馆登入过程">通过Fidder查看图书馆登入过程</h2><p>首先，打开Fidder，开始对通信进行监听，登入我们的目标站点——福建农林大学图书馆的登入页面<code>http://210.34.85.114:8080/reader/login.php</code>,输入学号，密码和验证码（正不正确不重要，这里主要查看数据的发送格式），选择<code>证件号</code>，点击<code>登入</code>，打开Fidder，选择验证服务器的url<code>http://210.34.85.114:8080/reader/redr_verify.php</code>，在<code>Inspectors下的Raw标签</code>下可以看到发送的信息，如下</p>
<pre><code><span class="request">POST <span class="string">http://210.34.85.114:8080/reader/redr_verify.php</span> HTTP/1.1</span>
<span class="attribute">Host</span>: <span class="string">210.34.85.114:8080</span>
<span class="attribute">User-Agent</span>: <span class="string">Mozilla/5.0 (Windows NT 6.3; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0</span>
<span class="attribute">Accept</span>: <span class="string">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span>
<span class="attribute">Accept-Language</span>: <span class="string">zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3</span>
<span class="attribute">Accept-Encoding</span>: <span class="string">gzip, deflate</span>
<span class="attribute">Referer</span>: <span class="string">http://210.34.85.114:8080/reader/login.php</span>
<span class="attribute">Cookie</span>: <span class="string">PHPSESSID=ordh88pv46g9jco23d32pvqer3</span>
<span class="attribute">Connection</span>: <span class="string">keep-alive</span>
<span class="attribute">Content-Type</span>: <span class="string">application/x-www-form-urlencoded</span>
<span class="attribute">Content-Length</span>: <span class="string">70</span>

<span class="nix"><span class="variable">number=</span><span class="number">3125002076</span>&amp;<span class="variable">passwd=</span><span class="number">147</span>qj9&amp;<span class="variable">captcha=</span><span class="number">1173</span>&amp;<span class="variable">select=</span>cert_no&amp;<span class="variable">returnUrl=</span></span>
</code></pre><p>发送的目标地址</p>
<pre><code><span class="constant">POST </span><span class="symbol">http:</span>/<span class="regexp">/210.34.85.114:8080/reader</span><span class="regexp">/redr_verify.php HTTP/</span><span class="number">1.1</span>
</code></pre><p>用户进行浏览器的头文件为：</p>
<pre><code><span class="attribute">User-Agent</span>: <span class="string">Mozilla/5.0 (Windows NT 6.3; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0</span>
<span class="attribute">Accept</span>: <span class="string">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span>
<span class="attribute">Accept-Language</span>: <span class="string">zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3</span>
<span class="attribute">Accept-Encoding</span>: <span class="string">gzip, deflate</span>
</code></pre><p>用户发送的信息格式为：</p>
<pre><code><span class="variable">number=</span><span class="number">3125002076</span>&amp;<span class="variable">passwd=</span><span class="number">147</span>qj9&amp;<span class="variable">captcha=</span><span class="number">1173</span>&amp;<span class="variable">select=</span>cert_no&amp;<span class="variable">returnUrl=</span>
</code></pre><p>后头我们将对这些信息进行封装，通过curl POST至目标地址<code>http://210.34.85.114:8080/reader/redr_verify.php HTTP/1.1</code>。<br>由于本文涉及到验证码的机器识别，所以我们还需要获取生成验证码的服务器地址，Fidder中我们可以找到生成验证码的url<code>http://210.34.85.114:8080/reader/captcha.php</code>，返回数据格式为<code>captcha.gif</code></p>
<h1 id="模拟图书馆登入系统过程">模拟图书馆登入系统过程</h1><pre><code>//*-----------------------------------WXLibSearch.php--------------------------------------*//
<span class="php"><span class="preprocessor">&lt;?php</span>
<span class="keyword">include</span> (<span class="string">'Valite.php'</span>);    <span class="comment">//验证码识别类</span>
<span class="keyword">include</span> (<span class="string">'u2utf82gb.php'</span>);    <span class="comment">//NCR转GB2312类</span>
<span class="comment">//获取用户键入的信息</span>
<span class="function"><span class="keyword">function</span> <span class="title">getborrowedbookinfo</span> <span class="params">(<span class="variable">$keyword</span>)</span></span>{

    <span class="comment">/*
    *正则表达式检测用户输入信息是否为"学号（10位）+密码"
    *如果是则进行模拟登入获取借阅信息
    *如果输入错误则返回"请按照格式输入学号和密码"
    */</span>

    <span class="keyword">if</span> (preg_match_all(<span class="string">"/^(\d{10})\+\S+/"</span>,<span class="variable">$keyword</span>,<span class="variable">$info</span><span class="string">")){

        //切割字符串，学号为前10位（0-9），密码为第11后（10-）
        $num=substr($info,0,9);    //学号
        $pass=substr($info,11);    //密码


        //获取验证码url
        $url = "</span>http:<span class="comment">//210.34.85.114:8080/reader/captcha.php";</span>
        <span class="comment">//保存cookie在当前路径下的"valid.tmp"文件之中，跨页面传递用户信息</span>
        <span class="variable">$cookie</span> = dirname(<span class="keyword">__FILE__</span>).<span class="string">"/valid.tmp"</span>;

        <span class="comment">//curl访问验证码图片网址，把返回的cookie保存为valid.tmp文件</span>
        <span class="variable">$curl</span> = curl_init(<span class="variable">$url</span>);
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);    <span class="comment">//设定返回 的数据是否自动显示</span>
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_COOKIEFILE, <span class="variable">$cookie</span>);
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_COOKIEJAR, <span class="variable">$cookie</span>);    <span class="comment">// 把返回来的cookie信息保存在$cookie文件中</span>
        <span class="variable">$data</span> = curl_exec(<span class="variable">$curl</span>);
        curl_close(<span class="variable">$curl</span>);

        <span class="comment">//保存验证码图片</span>
        <span class="variable">$fp</span> = fopen(<span class="string">"valid.gif"</span>,<span class="string">"wb"</span>);
        fwrite(<span class="variable">$fp</span>, <span class="variable">$data</span>);
        fclose(<span class="variable">$fp</span>); 

        <span class="comment">//识别验证码图片</span>
        <span class="variable">$valid</span> = <span class="keyword">new</span> Valite();
        <span class="variable">$valid</span>-&gt;setImage(<span class="string">"valid.gif"</span>);
        <span class="variable">$valid</span>-&gt;getHec();
        <span class="variable">$validCode</span> = <span class="variable">$valid</span>-&gt;run();


        <span class="comment">//组装数据</span>
        <span class="variable">$data</span> = <span class="string">"number="</span>.<span class="variable">$num</span>.<span class="string">"&amp;passwd="</span>.<span class="variable">$pass</span>.<span class="string">"&amp;captcha="</span>.<span class="variable">$validCode</span>.<span class="string">"&amp;select=cert_no&amp;returnUrl="</span>;
        <span class="comment">//头文件</span>
        <span class="variable">$headers</span> = <span class="keyword">array</span>(
            <span class="string">"User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0"</span>,<span class="string">"Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,
            <span class="string">"Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3"</span>,
            <span class="string">"Accept-Encoding: gzip, deflate"</span>,
            );

        <span class="comment">//curl发送数据进行登陆</span>
        <span class="variable">$url</span> = <span class="string">"http://210.34.85.114:8080/reader/redr_verify.php"</span>;
        <span class="variable">$curl</span> = curl_init();
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_URL, <span class="variable">$url</span>);
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_HTTPHEADER, <span class="variable">$headers</span>);    /设定是否显示头信息
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_COOKIEFILE, <span class="variable">$cookie</span>);
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_POST, <span class="number">1</span>);
        curl_setopt(<span class="variable">$curl</span>,CURLOPT_POSTFIELDS,<span class="variable">$data</span>);
        <span class="variable">$src</span> = curl_exec(<span class="variable">$curl</span>);
        curl_close(<span class="variable">$curl</span>);

        <span class="comment">//利用cookie进行借阅图书查询</span>
        <span class="variable">$url</span> = <span class="string">"http://210.34.85.114:8080/reader/book_lst.php"</span>;
        <span class="variable">$curl</span> = curl_init();
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_URL, <span class="variable">$url</span>);
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_HTTPHEADER, <span class="variable">$headers</span>);
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);
        curl_setopt(<span class="variable">$curl</span>, CURLOPT_COOKIEFILE, <span class="variable">$cookie</span>);
        <span class="variable">$src</span> = curl_exec(<span class="variable">$curl</span>);
        curl_close(<span class="variable">$curl</span>);

        <span class="comment">//截取出html中的书名</span>

        <span class="variable">$booknum</span> = preg_match_all(<span class="string">'/&lt;a[^&gt;]+&gt;\S+&lt;\/a&gt;/'</span>,<span class="variable">$src</span>,<span class="variable">$bookinfo</span>);
        <span class="variable">$hadborrowed</span> = <span class="variable">$booknum</span>-<span class="number">23</span>;    <span class="comment">//当前借阅量</span>
        <span class="variable">$bookborrowed</span> = <span class="string">"当前借阅量：$hadborrowed"</span>;
        <span class="variable">$bookborrowed</span> = iconv(<span class="string">'UTF-8'</span>, <span class="string">'GB2312'</span>, <span class="variable">$bookborrowed</span>);
        <span class="variable">$books</span> = <span class="string">""</span>;    <span class="comment">//建立容器储存书名</span>
        <span class="variable">$n</span> = <span class="number">0</span>;    <span class="comment">//用于为标题名前加上标号</span>
        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">23</span>;<span class="variable">$i</span>&lt;<span class="variable">$booknum</span>;<span class="variable">$i</span>++){
        <span class="variable">$n</span> = <span class="variable">$n</span>+<span class="number">1</span>;    
        <span class="variable">$str1</span> = <span class="string">""</span>;    <span class="comment">//建立容器用于储存转化为GB2312的字符，每循环一次数据清空，储存到$books容器之中</span>
            <span class="comment">//unicode转化为utf-8</span>
            <span class="comment">//通过explode，标记为";"将字符串切割成单个Uincode编码字符</span>
            <span class="variable">$bookinf</span> = explode(<span class="string">';'</span>,<span class="variable">$bookinfo</span>[<span class="number">0</span>][<span class="variable">$i</span>]);
            <span class="keyword">foreach</span>(<span class="variable">$bookinf</span> <span class="keyword">as</span> <span class="variable">$bookinfx</span>){    <span class="comment">//遍历字符串字符进行转码</span>
                <span class="variable">$bookinfx</span> = preg_replace(<span class="string">'/&lt;[^&gt;]+&gt;/'</span>,<span class="string">''</span>,<span class="variable">$bookinfx</span>);    <span class="comment">//除去头尾字符的html标签</span>
                <span class="variable">$code</span> = substr(<span class="variable">$bookinfx</span>,<span class="number">3</span>);    <span class="comment">//除去16位NCR编码的表示部分"&amp;#x"</span>
                <span class="variable">$unicode</span> = hexdec(<span class="variable">$code</span>);    <span class="comment">//16进制转化我10进制</span>
                <span class="variable">$string</span> = u2utf82gb(<span class="variable">$unicode</span>);    <span class="comment">//Unicode转GB2312</span>
                <span class="variable">$str1</span> = <span class="variable">$str1</span>.<span class="variable">$string</span>;    <span class="comment">//将转码后的单个字符拼接起来</span>
            }
            <span class="variable">$books</span> = <span class="variable">$books</span>.<span class="variable">$n</span>.<span class="string">"."</span>.<span class="variable">$str1</span>;    <span class="comment">//将每个书名拼接起来并加上标号"$n."</span>
        }

        <span class="keyword">echo</span> <span class="variable">$bookborrowed</span>.<span class="string">"\n"</span>.<span class="variable">$books</span>;    <span class="comment">//输出借阅的图书量加上书名输出测试</span>
    }
}

<span class="preprocessor">?&gt;</span></span>
</code></pre><h2 id="机器识别验证码">机器识别验证码</h2><p>验证码识别一般分为以下几个步骤：<br>一、取出字模<br>识别验证码，毕竟不是专业的OCR识别，并且，由于各个网站的验证码各不相同，所以，最常见的方法就是就是建立这个验证码的特征码库。去字模时，我们需要多下载几张图片，使这些图片中，包括所有的字符，我们这里的图片里只有数字，所以，只要收集到包括0-9的数字图片即可。</p>
<p>1、多刷新几次验证码，将验证码图片保存起来，要搜集齐0-9的图片，这里我收集了4张验证码才凑齐0~9 10位数字。</p>
<p><img src="http://picture-lotors.qiniudn.com/lotors%E9%AA%8C%E8%AF%81%E7%A0%812.JPG" alt="验证码" title="验证码"></p>
<p>2、用图片处理软件打开图片，我用的是Photoshop，按住ctrl+可以将图片的视图放大，这样就能很清楚地观察到图片的每个像素。</p>
<p><img src="http://picture-lotors.qiniudn.com/lotors%E9%AA%8C%E8%AF%81%E7%A0%813.JPG" alt="放大后的验证码" title="放大后的验证码"></p>
<p>可以发现，每个数字的宽是8px，高是10px，数字的间隔是4px，第一个数字左边偏移了6px，顶部偏移了16px。这些数字后面都是要用到的。<br>3、将每个数字截出来保存为图片，大小为8*10（虽然数字1的宽只占了7个像素，但是还是要截取8个像素的宽度）。</p>
<p>二、图片二值化<br>二值化就是把图片上的验证数字上每个象素用数字1表示，其它部分用0表示。把要识别的图片，进行二值化，将数据保存到二维数组里，得到图片特征数组。</p>
<p>1、首先要将数字和背景色和干扰色区分开来，用屏幕取色器观察颜色的规律。<br>可以得出一个结论：背景颜色的R、G、B值都是大于200的，而数字的颜色的R、G、B值的某一项有小于200，因此可以很容易区分。</p>
<p>2、下面的php代码只是为了演示二维数组，为了直观看出数字，所以把1和0改为了0和-：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;&lt;img src="captcha.gif"&gt;&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"> </span><br><span class="line">getHec(<span class="string">"captcha.gif"</span>);	<span class="comment">//"captcha.gif"中的值为8690</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHec</span><span class="params">(<span class="variable">$imagePath</span>)</span> </span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = imagecreatefromjpeg(<span class="variable">$imagePath</span>);</span><br><span class="line">    <span class="variable">$size</span> = getimagesize(<span class="variable">$imagePath</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$size</span>[<span class="number">1</span>]; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$size</span>[<span class="number">0</span>]; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">            <span class="variable">$rgb</span> = imagecolorat(<span class="variable">$res</span>, <span class="variable">$j</span>, <span class="variable">$i</span>);</span><br><span class="line">            <span class="variable">$rgbarray</span> = imagecolorsforindex(<span class="variable">$res</span>, <span class="variable">$rgb</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$rgbarray</span>[<span class="string">'red'</span>] &lt; <span class="number">200</span> || <span class="variable">$rgbarray</span>[<span class="string">'green'</span>]&lt;<span class="number">200</span> || <span class="variable">$rgbarray</span>[<span class="string">'blue'</span>] &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"0"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"-"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">```   </span><br><span class="line">二值化的结果如下图所示：</span><br></pre></td></tr></table></figure></p>
<h2 id="——————————————————————————————">——————————————————————————————</h2><h2 id="——————————————————————————————-1">——————————————————————————————</h2><h2 id="——————————————————————————————-2">——————————————————————————————</h2><h2 id="——————————————————————————————-3">——————————————————————————————</h2><h2 id="——————————————————————————————-4">——————————————————————————————</h2><h2 id="——————————————————————————————-5">——————————————————————————————</h2><h2 id="——————————————————————————————-6">——————————————————————————————</h2><h2 id="——————————————————————————————-7">——————————————————————————————</h2><p>————0000————0000————0000————-00——————-<br>———-00—00———00—00———00—00———-0000——————<br>———00——00——00——0——-00——00——-00—00—————-<br>———-00—00——-00—————00——00——00——00—————<br>————0000———00-000———-00—000——00——00—————<br>———-00—00——-000—00———-000-00——00——00—————<br>———00——00——00——00—————00——00——00—————<br>———00——00——00——00——-0——00——-00—00—————-<br>———-00—00———00—00———00—00———-0000——————</p>
<h2 id="————0000————0000————0000————-00——————-">————0000————0000————0000————-00——————-</h2><h2 id="——————————————————————————————-8">——————————————————————————————</h2><h2 id="——————————————————————————————-9">——————————————————————————————</h2><h2 id="——————————————————————————————-10">——————————————————————————————</h2><h2 id="——————————————————————————————-11">——————————————————————————————</h2><hr>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果图片的背景颜色比较复杂，处理方法也是一样的，总能找到临界值来区分，具体要靠自己观察了。</span><br><span class="line"></span><br><span class="line">三、数字字模二值化</span><br><span class="line">计算出每个数字字模的二值化的数据，记录下这些数据，当作<span class="variable">key</span>即可。</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、将<span class="number">0</span>-<span class="number">9</span>的数字字模图片进行二值化，逐个取出图片的像个像素的颜色，然后获取每个像素的R、G、B值，再进行判断，代码如下：</span><br></pre></td></tr></table></figure>
<p>for ($i = 0; $i &lt; 10; $i++) {<br>    echo “‘$i’=&gt;’”;<br>    echo getHec(“$i.jpg”).”‘,<br>“;<br>}</p>
<p>function getHec($imagePath) {<br>    $res = imagecreatefromjpeg($imagePath);<br>    $size = getimagesize($imagePath);</p>
<pre><code><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$size</span>[<span class="number">1</span>]; ++<span class="variable">$i</span>) {
    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$size</span>[<span class="number">0</span>]; ++<span class="variable">$j</span>) {
        <span class="variable">$rgb</span> = imagecolorat(<span class="variable">$res</span>, <span class="variable">$j</span>, <span class="variable">$i</span>);
        <span class="variable">$rgbarray</span> = imagecolorsforindex(<span class="variable">$res</span>, <span class="variable">$rgb</span>);
        <span class="keyword">if</span> (<span class="variable">$rgbarray</span>[<span class="string">'red'</span>] &lt; <span class="number">200</span> || <span class="variable">$rgbarray</span>[<span class="string">'green'</span>]&lt;<span class="number">200</span> || <span class="variable">$rgbarray</span>[<span class="string">'blue'</span>] &lt; <span class="number">200</span>) {
            <span class="built_in">echo</span> <span class="string">"1"</span>;
        }<span class="keyword">else</span>{
            <span class="built_in">echo</span> <span class="string">"0"</span>;
        }
    }
}
</code></pre><p>}<br>输出结果：<br>‘0’ =&gt; ‘011110100001100001100001100001100001100001100001100001011110’,<br>‘1’ =&gt; ‘001000111000001000001000001000001000001000001000001000111110’,<br>‘2’ =&gt; ‘011110100001100001000001000010000100001000010000110011111111’,<br>‘3’ =&gt; ‘011110100001100001000010001100000010000001100001100001011110’,<br>‘4’ =&gt; ‘000100000100001100010100100100100100111111000100001100001111’,<br>‘5’ =&gt; ‘111111100000100000101110110001000001000001100001100001011110’,<br>‘6’ =&gt; ‘001110010001100000100000101110110001100001100001100001011110’,<br>‘7’ =&gt; ‘111111100010100010000100000100001000001000001000001000001000’,<br>‘8’ =&gt; ‘011110100001100001100001011110010010100001100001100001011110’,<br>‘9’ =&gt; ‘011100100010100001100001100011011101000001000001100010011100’,<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">四、对照样本</span><br><span class="line">把步骤二中的图片特征码和步骤三中的验证码的字模进行对比，得到验证图片上的数字。</span><br><span class="line">算法过程：</span><br><span class="line"></span><br><span class="line">1、将图片二值化后的值保存到二维数组里。</span><br><span class="line"></span><br><span class="line">2、通过循环，求出每一个数字的位置，要用到前面得到的数字的宽、高、间隔、左边偏移、顶部偏移。</span><br><span class="line">例如：第i个数字左边偏移 =（数字宽 + 间隔）* i + 左边偏移。</span><br><span class="line"></span><br><span class="line">3、知道了数字的偏移位置，就可以计算出数字在二维数组里的位置，通过循环将数字的6*10=60个数据取出来拼接在一起，就形成了与数字字模类似的字符串。</span><br><span class="line"></span><br><span class="line">4、将字符串与每一个字模的字符串比较，求其相似度，取最高的相似度对应的数字，或者相似度达到95%以上就可以断定是某个数字。</span><br><span class="line"></span><br><span class="line">5、识别结果如下：</span><br><span class="line"></span><br><span class="line">![识别结果](http://picture-lotors.qiniudn.com/lotors%E9%AA%8C%E8%AF%81%E7%A0%814.JPG "识别结果")</span><br><span class="line"></span><br><span class="line">使用目前这种方法，对验证码的识别基本上可以做到100%。</span><br><span class="line">通过以上步骤，您可能说了，并没有发现如何取出干扰素啊！其实取出干扰素的方法很简单，干扰素的一个重要特征是，不能影响验证码的显示效果，所以制作干扰素时它的RGB可能低于或者高于某个特定值，比如我给的例子中的图片，干扰素的RGB各项值是不会小于200的，所以，这样我们就很容易去掉干扰素了。</span><br><span class="line">	</span><br><span class="line">	//*-----------------------------------Valite.php--------------------------------------*//</span><br><span class="line">	<span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line">	</span><br><span class="line">	define(<span class="string">'WORD_WIDTH'</span>,<span class="number">8</span>);	<span class="comment">//定义每个字符的高度</span></span><br><span class="line">	define(<span class="string">'WORD_HIGHT'</span>,<span class="number">10</span>);	<span class="comment">//定义每个字的宽度</span></span><br><span class="line">	define(<span class="string">'OFFSET_X'</span>,<span class="number">6</span>);	<span class="comment">//左偏移的像素数</span></span><br><span class="line">	define(<span class="string">'OFFSET_Y'</span>,<span class="number">16</span>);	<span class="comment">//高偏移的像素数</span></span><br><span class="line">	define(<span class="string">'WORD_SPACING'</span>,<span class="number">4</span>);	<span class="comment">//字符间的像素数</span></span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">valite</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setImage</span><span class="params">(<span class="variable">$Image</span>)</span>	//打开二维码图片</span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="variable">$this</span>-&gt;ImagePath = <span class="variable">$Image</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">()</span></span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span><span class="params">()</span></span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable">$DataArray</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHec</span><span class="params">()</span>	//除去干扰像素的方法</span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="variable">$res</span> = imagecreatefromgif(<span class="variable">$this</span>-&gt;ImagePath);		<span class="comment">//创建图像</span></span><br><span class="line">			<span class="variable">$size</span> = getimagesize(<span class="variable">$this</span>-&gt;ImagePath);	<span class="comment">//获取图像长宽</span></span><br><span class="line">			<span class="variable">$data</span> = <span class="keyword">array</span>();</span><br><span class="line">			<span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$size</span>[<span class="number">1</span>]; ++<span class="variable">$i</span>)	<span class="comment">//循环遍历宽度</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$size</span>[<span class="number">0</span>]; ++<span class="variable">$j</span>)	<span class="comment">//循环遍历长度</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="variable">$rgb</span> = imagecolorat(<span class="variable">$res</span>,<span class="variable">$j</span>,<span class="variable">$i</span>);	<span class="comment">//取得某像素的颜色索引值</span></span><br><span class="line">					<span class="variable">$rgbarray</span> = imagecolorsforindex(<span class="variable">$res</span>, <span class="variable">$rgb</span>);	<span class="comment">// 取出red，green，blue 和 alpha 的键名的关联数组</span></span><br><span class="line">					<span class="keyword">if</span>(<span class="variable">$rgbarray</span>[<span class="string">'red'</span>] &lt; <span class="number">160</span> || <span class="variable">$rgbarray</span>[<span class="string">'green'</span>] &lt; <span class="number">160</span> || <span class="variable">$rgbarray</span>[<span class="string">'blue'</span>] &lt; <span class="number">160</span>)	<span class="comment">//比较RGB值</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="variable">$data</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]=<span class="number">1</span>;	<span class="comment">//数字输出1</span></span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						<span class="variable">$data</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]=<span class="number">0</span>;	<span class="comment">//背景输出0</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$this</span>-&gt;DataArray = <span class="variable">$data</span>;	<span class="comment">//返回数据</span></span><br><span class="line">			<span class="variable">$this</span>-&gt;ImageSize = <span class="variable">$size</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>	//获取每个像素点的坐标</span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="variable">$result</span> = <span class="string">""</span>;</span><br><span class="line">			<span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">4</span>; ++<span class="variable">$i</span>)	<span class="comment">//循环,切割四个数字</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="variable">$x</span> = (<span class="variable">$i</span> * (WORD_WIDTH + WORD_SPACING)) + OFFSET_X;	<span class="comment">//计算每个数字的起始水平像素的值X</span></span><br><span class="line">				<span class="variable">$y</span> = OFFSET_Y;</span><br><span class="line">				<span class="keyword">for</span>(<span class="variable">$h</span> = <span class="variable">$y</span>; <span class="variable">$h</span> &lt; (OFFSET_Y + WORD_HIGHT); ++<span class="variable">$h</span>)	<span class="comment">//循环获取每个数字的竖直像素值</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="variable">$w</span> = <span class="variable">$x</span>; <span class="variable">$w</span> &lt; (<span class="variable">$x</span> + WORD_WIDTH); ++<span class="variable">$w</span>)	<span class="comment">//循环获取水平像素值</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="variable">$data</span>[<span class="variable">$i</span>] .= <span class="variable">$this</span>-&gt;DataArray[<span class="variable">$h</span>][<span class="variable">$w</span>];	<span class="comment">//储存每个数字的二值码</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">foreach</span>(<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$numKey</span> =&gt; <span class="variable">$numString</span>)	<span class="comment">//循环每个数字的二值码</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="variable">$max</span> = <span class="number">0.0</span>;</span><br><span class="line">				<span class="variable">$num</span> = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">foreach</span>(<span class="variable">$this</span>-&gt;Keys <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)	<span class="comment">//匹配每个的字模二值码</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="variable">$percent</span> = <span class="number">0.0</span>;	<span class="comment">//初始相似百分比</span></span><br><span class="line">					similar_text(<span class="variable">$value</span>, <span class="variable">$numString</span>, <span class="variable">$percent</span>);	<span class="comment">//计算两个字符串的相似度（以百分比计）</span></span><br><span class="line">					<span class="keyword">if</span>(intval(<span class="variable">$percent</span>) &gt; <span class="variable">$max</span>)	<span class="comment">//当前相似度与前一次循环的相似度比较，如果比前一次相似度高则</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="variable">$max</span> = <span class="variable">$percent</span>;	<span class="comment">//储存最大相似度百分比</span></span><br><span class="line">						<span class="variable">$num</span> = <span class="variable">$key</span>;	<span class="comment">//储存最大百分比的数字</span></span><br><span class="line">						<span class="keyword">if</span>(intval(<span class="variable">$percent</span>) &gt; <span class="number">95</span>)	<span class="comment">//将字符串与每一个字模的字符串比较，求其相似度，取最高的相似度对应的数字，或者相似度达到95%以上就可以断定是某个数字</span></span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="variable">$result</span> .= <span class="variable">$num</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$this</span>-&gt;data = <span class="variable">$result</span>;</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Draw</span><span class="params">()</span>	//按顺序取出每个相熟点的值（0/1）</span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$this</span>-&gt;ImageSize[<span class="number">1</span>]; ++<span class="variable">$i</span>)</span><br><span class="line">			&#123;</span><br><span class="line">		        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$this</span>-&gt;ImageSize[<span class="number">0</span>]; ++<span class="variable">$j</span>)</span><br><span class="line">			    &#123;</span><br><span class="line">				    <span class="keyword">echo</span> <span class="variable">$this</span>-&gt;DataArray[<span class="variable">$i</span>][<span class="variable">$j</span>];</span><br><span class="line">		        &#125;</span><br><span class="line">			    <span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span>	//二值化的每个数字</span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="variable">$this</span>-&gt;Keys = <span class="keyword">array</span>(</span><br><span class="line">				<span class="string">'0'</span>=&gt;<span class="string">'00011000001111000110011011000011110000111100001111000011011001100011110000011000'</span>,</span><br><span class="line">				<span class="string">'1'</span>=&gt;<span class="string">'00011000001110000111100000011000000110000001100000011000000110000001100001111110'</span>,</span><br><span class="line">				<span class="string">'2'</span>=&gt;<span class="string">'00111100011001101100001100000011000001100000110000011000001100000110000011111111'</span>,</span><br><span class="line">				<span class="string">'3'</span>=&gt;<span class="string">'01111100110001100000001100000110000111000000011000000011000000111100011001111100'</span>,</span><br><span class="line">				<span class="string">'4'</span>=&gt;<span class="string">'00000110000011100001111000110110011001101100011011111111000001100000011000000110'</span>,</span><br><span class="line">				<span class="string">'5'</span>=&gt;<span class="string">'11111110110000001100000011011100111001100000001100000011110000110110011000111100'</span>,</span><br><span class="line">				<span class="string">'6'</span>=&gt;<span class="string">'00111100011001101100001011000000110111001110011011000011110000110110011000111100'</span>,</span><br><span class="line">				<span class="string">'7'</span>=&gt;<span class="string">'11111111000000110000001100000110000011000001100000110000011000001100000011000000'</span>,</span><br><span class="line">				<span class="string">'8'</span>=&gt;<span class="string">'00111100011001101100001101100110001111000110011011000011110000110110011000111100'</span>,</span><br><span class="line">				<span class="string">'9'</span>=&gt;<span class="string">'00111100011001101100001111000011011001110011101100000011010000110110011000111100'</span>,</span><br><span class="line">			);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$ImagePath</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$DataArray</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$ImageSize</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$data</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$Keys</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$NumStringArray</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="preprocessor">?&gt;</span></span></span><br><span class="line"></span><br><span class="line">##NRC转UTF-8编码过程</span><br><span class="line"></span><br><span class="line">UTF-8的编码规则很简单，只有二条： </span><br><span class="line"></span><br><span class="line">1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。 </span><br><span class="line"></span><br><span class="line">2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。 </span><br><span class="line"></span><br><span class="line">下表总结了编码规则，字母x表示可用编码的位。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">table</span>&gt;</span><span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>Unicode符号范围(十六进制)<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>UTF-8编码方式（二进制）<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>0000 0000-0000 007F<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>0xxxxxxx<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>0000 0080-0000 07FF<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>110xxxxx 10xxxxxx<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>0000 0800-0000 FFFF<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>1110xxxx 10xxxxxx 10xxxxxx<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>0001 0000-0010 FFFF<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">下面，还是以汉字“严”为例，演示如何实现UTF-8编码。 </span><br><span class="line"></span><br><span class="line">已知“严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此“严”的UTF-8编码需要三个字节，即格式是“1110xxxx 10xxxxxx 10xxxxxx”。然后，从“严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，“严”的UTF-8编码是“11100100 10111000 10100101”，转换成十六进制就是E4B8A5。 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	//*-----------------------------------u2utf82gb.php--------------------------------------*//</span><br><span class="line">	<span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">u2utf82gb</span><span class="params">(<span class="variable">$c</span>)</span></span>&#123;</span><br><span class="line">		<span class="variable">$str</span>=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$c</span> &lt; <span class="number">0x80</span>) &#123;</span><br><span class="line">			<span class="variable">$str</span>.=chr(<span class="variable">$c</span>);	<span class="comment">//当NRC编码位于0000 0000-0000 007F区段时，UTF-8编码转换为0<span class="label">xxxxxxx</span></span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$c</span> &lt; <span class="number">0x800</span>) &#123;</span><br><span class="line">			<span class="variable">$str</span>.=chr(<span class="number">0xC0</span> | <span class="variable">$c</span>&gt;&gt;<span class="number">6</span>);	<span class="comment">//当NRC编码位于0000 0080-0000 07FF区段时，UTF-8编码转换为110<span class="label">xxxxx 10xxxxxx</span></span></span><br><span class="line">	 		<span class="variable">$str</span>.=chr(<span class="number">0x80</span> | <span class="variable">$c</span> &amp; <span class="number">0x3F</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$c</span> &lt; <span class="number">0x10000</span>) &#123;</span><br><span class="line">			<span class="variable">$str</span>.=chr(<span class="number">0xE0</span> | <span class="variable">$c</span>&gt;&gt;<span class="number">12</span>);	<span class="comment">//当NRC编码位于0000 0800-0000 FFFF区段时，UTF-8编码转换为1110<span class="label">xxxx 10xxxxxx 10xxxxxx</span></span></span><br><span class="line">			<span class="variable">$str</span>.=chr(<span class="number">0x80</span> | <span class="variable">$c</span>&gt;&gt;<span class="number">6</span> &amp; <span class="number">0x3F</span>);</span><br><span class="line">			<span class="variable">$str</span>.=chr(<span class="number">0x80</span> | <span class="variable">$c</span> &amp; <span class="number">0x3F</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$c</span> &lt; <span class="number">0x200000</span>) &#123;</span><br><span class="line">			<span class="variable">$str</span>.=chr(<span class="number">0xF0</span> | <span class="variable">$c</span>&gt;&gt;<span class="number">18</span>);	<span class="comment">//当NRC编码位于0001 0000-0010 FFFF区段时，UTF-8编码转换为11110<span class="label">xxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span></span><br><span class="line">			<span class="variable">$str</span>.=chr(<span class="number">0x80</span> | <span class="variable">$c</span>&gt;&gt;<span class="number">12</span> &amp; <span class="number">0x3F</span>);</span><br><span class="line">			<span class="variable">$str</span>.=chr(<span class="number">0x80</span> | <span class="variable">$c</span>&gt;&gt;<span class="number">6</span> &amp; <span class="number">0x3F</span>);</span><br><span class="line">			<span class="variable">$str</span>.=chr(<span class="number">0x80</span> | <span class="variable">$c</span> &amp; <span class="number">0x3F</span>);</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">return</span> iconv(<span class="string">'UTF-8'</span>, <span class="string">'GB2312'</span>, <span class="variable">$str</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="preprocessor">?&gt;</span></span></span><br><span class="line">##通过QR获取借阅信息</span><br><span class="line">`<span class="tag">&lt;<span class="title">2014</span>/<span class="attribute">7</span>/<span class="attribute">25</span>更新&gt;</span>`今天灵（nao）机（can）一动想到一个新想法，能否利用当前借阅最下边的二维码来获取图书的有关信息，于是用手机扫了一下二维码，发现真的可以获取图书的借阅信息。</span><br><span class="line">![扫描结果](http://picture-lotors.qiniudn.com/lotorsQRcode.jpg "扫描结果")</span><br><span class="line">于是查看了一下源码，找到了生成二维码的的地址。</span><br></pre></td></tr></table></figure></p>
<pre><code>&lt;img src=<span class="string">"../opac/ajax_qr.php?qrcode=6K<span class="variable">%2B76ICF44CQMzEyNTAwMjA3NuOAkeeahOWcqOWAn</span><span class="variable">%2BS5puWIiijpopjlkI0v5bqU6L</span><span class="variable">%2BY5pel5pyfKe</span><span class="variable">%2B8mg0KTHVh56iL5bqP6K6</span><span class="variable">%2B6K6hIDIwMTQtMDktMTQgICAgICAgIA0KUEhQ5a6e5L6L57K</span><span class="variable">%2B6YCaIDIwMTQtMDktMTQgICAgICAgIA0KQXJkdWlub</span><span class="variable">%2BS4gOivleWwseS4iuaJiy4y54mILi4gMjAxNC0wOS0xNCAgICAgICAgDQrkuK3lm73lhpnmhI</span><span class="variable">%2FnlLvlhaXpl6jovbvmnb7lraYs56u55a2QLi4gMjAxNC0wOS0xNCAgICAgICAgDQpBbmRyb2lk54Ot6Zeo5bqU55So5byA5Y</span><span class="variable">%2BR6K</span><span class="variable">%2Bm6KejLi4gMjAxNC0wOS0xNCAgICAgICAgDQrkuK3lm73lhpnmhI</span><span class="variable">%2FnlLvlhaXpl6jovbvmnb7lraYs6I2J5pys6Iqx5Y2JLi4gMjAxNC0wOS0xNCAgICAgICAgDQrlkI3lrrblm73nlLvor77loIIu6Iqx6bif56</span><span class="variable">%2BHLi4gMjAxNC0wOS0xNCAgICAgICAgDQpBcmR1aW5v5oqA5pyv5YaF5bmVIDIwMTQtMDktMTQgICAgICAgIA0K55av54uCQW5kcm9pZOiusuS5iS4y54mILi4gMjAxNC0wOS0xNCAgICAgICAgDQpqUXVlcnnlvIDlj5HmioDmnK</span><span class="variable">%2For6bop6MuLiAyMDE0LTA5LTE0ICAgICAgICANCg</span><span class="variable">%3D</span><span class="variable">%3D</span>"</span> border=<span class="string">"0"</span> /&gt;&lt;<span class="regexp">/a&gt;&lt;/span</span>&gt;
</code></pre><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这个二维码是由`<span class="javascript">http:<span class="comment">//210.34.85.114:8080/opac/ajax_qr.php</span></span>`这个服务器生成的，后面的qrcode应该是GB2312转UTF-<span class="number">8</span>后url编码产生，这里不去管它。</span><br><span class="line">由于直接利用PHP无法解析二维码，所以调用`<span class="javascript">http:<span class="comment">//zxing.org/w/decode.jspx</span></span>`这一个网页服务来对二维码解析。</span><br><span class="line">用Fidder分析数据发送，该页面是通过_GET方法`<span class="javascript">http:<span class="comment">//zxing.org/w/decode?u=</span></span>`后接查询图片的url来传递数据，这里的url是`<span class="javascript">http:<span class="comment">//210.34.85.114:8080/opac/ajax_qr.php</span></span>`这个服务器生成的二维码的地址。</span><br></pre></td></tr></table></figure>
<p>GET <a href="http://zxing.org/w/decode?u=http%3A%2F%2F210.34.85.114%3A8080%2Fopac%2Fajax_qr.php%3Fqrcode%3D6K%252B76ICF44CQMzEyNTAwMjA3NuOAkeeahOWcqOWAn%252BS5puWIiijpopjlkI0v5bqU6L%252BY5pel5pyfKe%252B8mg0KTHVh56iL5bqP6K6%252B6K6hIDIwMTQtMDktMTQgICAgICAgIA0KUEhQ5a6e5L6L57K%252B6YCaIDIwMTQtMDktMTQgICAgICAgIA0KQXJkdWlub%252BS4gOivleWwseS4iuaJiy4y54mILi4gMjAxNC0wOS0xNCAgICAgICAgDQrkuK3lm73lhpnmhI%252FnlLvlhaXpl6jovbvmnb7lraYs56u55a2QLi4gMjAxNC0wOS0xNCAgICAgICAgDQpBbmRyb2lk54Ot6Zeo5bqU55So5byA5Y%252BR6K%252Bm6KejLi4gMjAxNC0wOS0xNCAgICAgICAgDQrkuK3lm73lhpnmhI%252FnlLvlhaXpl6jovbvmnb7lraYs6I2J5pys6Iqx5Y2JLi4gMjAxNC0wOS0xNCAgICAgICAgDQrlkI3lrrblm73nlLvor77loIIu6Iqx6bif56%252BHLi4gMjAxNC0wOS0xNCAgICAgICAgDQpBcmR1aW5v5oqA5pyv5YaF5bmVIDIwMTQtMDktMTQgICAgICAgIA0K55av54uCQW5kcm9pZOiusuS5iS4y54mILi4gMjAxNC0wOS0xNCAgICAgICAgDQpqUXVlcnnlvIDlj5HmioDmnK%252For6bop6MuLiAyMDE0LTA5LTE0ICAgICAgICANCg%253D%253D" target="_blank" rel="external">http://zxing.org/w/decode?u=http%3A%2F%2F210.34.85.114%3A8080%2Fopac%2Fajax_qr.php%3Fqrcode%3D6K%252B76ICF44CQMzEyNTAwMjA3NuOAkeeahOWcqOWAn%252BS5puWIiijpopjlkI0v5bqU6L%252BY5pel5pyfKe%252B8mg0KTHVh56iL5bqP6K6%252B6K6hIDIwMTQtMDktMTQgICAgICAgIA0KUEhQ5a6e5L6L57K%252B6YCaIDIwMTQtMDktMTQgICAgICAgIA0KQXJkdWlub%252BS4gOivleWwseS4iuaJiy4y54mILi4gMjAxNC0wOS0xNCAgICAgICAgDQrkuK3lm73lhpnmhI%252FnlLvlhaXpl6jovbvmnb7lraYs56u55a2QLi4gMjAxNC0wOS0xNCAgICAgICAgDQpBbmRyb2lk54Ot6Zeo5bqU55So5byA5Y%252BR6K%252Bm6KejLi4gMjAxNC0wOS0xNCAgICAgICAgDQrkuK3lm73lhpnmhI%252FnlLvlhaXpl6jovbvmnb7lraYs6I2J5pys6Iqx5Y2JLi4gMjAxNC0wOS0xNCAgICAgICAgDQrlkI3lrrblm73nlLvor77loIIu6Iqx6bif56%252BHLi4gMjAxNC0wOS0xNCAgICAgICAgDQpBcmR1aW5v5oqA5pyv5YaF5bmVIDIwMTQtMDktMTQgICAgICAgIA0K55av54uCQW5kcm9pZOiusuS5iS4y54mILi4gMjAxNC0wOS0xNCAgICAgICAgDQpqUXVlcnnlvIDlj5HmioDmnK%252For6bop6MuLiAyMDE0LTA5LTE0ICAgICAgICANCg%253D%253D</a> HTTP/1.1<br>Host: zxing.org<br>Connection: keep-alive<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1883.0 Safari/537.36<br>Referer: <a href="http://zxing.org/w/decode.jspx" target="_blank" rel="external">http://zxing.org/w/decode.jspx</a><br>Accept-Encoding: gzip,deflate,sdch<br>Accept-Language: en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>//<em>—————————————————-qrcode.php———————————————————</em>//<br>&lt;?php<br>    function qrcode($src){<br>        //切割html字符串获取图片url<br>        preg_match_all(‘/&lt;img\ssrc=\”[^\”]+\”/‘,$src,$qr);<br>        //截取的””中间的url<br>        preg_match_all(‘/\”[^\”]+/‘,$qr[0][0],$qrcode);<br>        //除去开头的 ..<br>        $qrcode = preg_replace(‘/../‘,’’,$qrcode[0][0]);<br>        //除去开头的 “<br>        $qrcode = preg_replace(‘/\”/‘,’’,$qrcode);<br>        //拼接url<br>        $qrcode = ‘<a href="http://210.34.85.114:8080&#39;.$qrcode" target="_blank" rel="external">http://210.34.85.114:8080&#39;.$qrcode</a>;<br>        //url编码<br>        $qrcode = urlencode($qrcode);<br>        //拼接查询url<br>        $url = ‘<a href="http://zxing.org/w/decode?u=&#39;.$qrcode" target="_blank" rel="external">http://zxing.org/w/decode?u=&#39;.$qrcode</a>;<br>        //获取数据<br>        $curl = curl_init($url);<br>        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);<br>        $infomation = curl_exec($curl);<br>        curl_close($curl);</p>
<pre><code>    <span class="comment">//获取QRcode信息</span>
    preg_match_all(<span class="string">'/读者[^&lt;]+/'</span>,<span class="variable">$infomation</span>,<span class="variable">$info</span>);
    <span class="comment">//UTF-8转GB2312</span>
    <span class="variable">$info</span> = iconv(<span class="string">'UTF-8'</span>,<span class="string">'GB2312'</span>,<span class="variable">$info</span>[<span class="number">0</span>][<span class="number">0</span>]);
    print_r(<span class="variable">$info</span>);
}
</code></pre><p>?&gt;<br>```</p>]]></content>
    <summary type="html">
    <![CDATA[记录图书馆查询微信公众平台开发全过程，主要内容包括：（1）Fidder2解析图书馆登入系统过程（2）模拟图书馆登入系统过程（3）机器识别验证码（4）Unicode转UTF-8编码过程（5）微信公众账号的绑定（6）Memcache缓存技术(7)正则表达式]]>
    
    </summary>
    
      <category term="PHP" scheme="http://masukio.tk/tags/PHP/"/>
    
      <category term="QRcode" scheme="http://masukio.tk/tags/QRcode/"/>
    
      <category term="图书馆" scheme="http://masukio.tk/tags/%E5%9B%BE%E4%B9%A6%E9%A6%86/"/>
    
      <category term="开发" scheme="http://masukio.tk/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="微信公众平台" scheme="http://masukio.tk/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="模拟登入" scheme="http://masukio.tk/tags/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%85%A5/"/>
    
      <category term="笔记" scheme="http://masukio.tk/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编码" scheme="http://masukio.tk/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="验证码" scheme="http://masukio.tk/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
      <category term="微信平台开发记录" scheme="http://masukio.tk/categories/%E5%BE%AE%E4%BF%A1%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>